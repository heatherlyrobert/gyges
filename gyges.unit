#!/usr/local/bin/koios
#



#23456789012  123  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  -  123456789-123456789- 
#==(verb)===  ver  ===========(description)===========  =====(function)=====  ========================(arguments)===================================  ==(test)==  ==========================(results)===================================  t  ========(var)======= 
PREP          v21  include the prototype headers                               
   incl       v21  include public header                gyges.h              



#23456789012  123  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  -  123456789-123456789- 
#==(verb)===  ver  ===========(description)===========  =====(function)=====  ========================(arguments)===================================  ==(test)==  ==========================(results)===================================  t  ========(var)======= 
SECT          v21  creating, deleting, and placing cells                                                                                                                                                                                       



#23456789012  123  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  -  123456789-123456789- 
#==(verb)===  ver  ===========(description)===========  =====(function)=====  ========================(arguments)===================================  ==(test)==  ==========================(results)===================================  t  ========(var)======= 
SCRP          v21  (s_cell) fundamental cell creation and destruction           CELL_init, CELL__new, CELL__free, CELL__valid, CELL__purge                                                                                                     

   COND       setup testing variables                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom [2000];                                                                                                                                                          
     code     create a pointer to the first cell   void *x_head = NULL;                                                                                                                                                       
     code     create a pointer to a mid-point      void *x_save = NULL;                                                                                                                                                       
     code     create a pointer to one after that   void *x_plus = NULL;                                                                                                                                                       
     code     create a pointer to the last cell    void *x_tail = NULL;                                                                                                                                                       
     code     create a pointer to an unlinked cell void *x_out  = NULL;                                                                                                                                                       

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_head = yUNIT_p_rc;                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_head, x_head);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            
     exec     test the cell validity               CELL__valid           x_head         , LINKED                                       i_equal     0                                                                      

   COND       add another cell                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            
     exec     test the cell validity               CELL__valid           x_tail         , LINKED                                       i_equal     0                                                                      

   COND       add an unlinked cell                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             UNLINKED                                                      p_exists    0                                                                      
     code     save cell pointer                    x_out  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   2, fore=   2, back=   2            
     exec     test the cell validity               CELL__valid           x_out          , UNLINKED                                     i_equal     0                                                                      

   COND       add another cell                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     keep the previous one                x_save = x_tail;                                                                                                                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   3, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   5, num=   3, fore=   3, back=   3            
     exec     test the cell validity               CELL__valid           x_tail         , LINKED                                       i_equal     0                                                                      

   COND       add another cell, but with a bad argument                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             15                                                            p_exists    0                                                                      
     code     save cell pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     keep the previous one                x_plus = x_tail;                                                                                                                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   4, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   6, num=   4, fore=   4, back=   4            
     exec     test the cell validity               CELL__valid           x_tail         , LINKED                                       i_equal     0                                                                      

   COND       add another cell                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   5, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   7, num=   5, fore=   5, back=   5            
     exec     test the cell validity               CELL__valid           x_tail         , LINKED                                       i_equal     0                                                                      

   COND       test a cell twice                                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     test the cell validity               CELL__valid           x_head         , LINKED                                       i_equal     0                                                                      
     exec     test the cell validity               CELL__valid           x_head         , LINKED                                       i_equal     1                                                                      

   COND       test a null cell                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     test the cell validity               CELL__valid           NULL           , LINKED                                       i_lesser    0                                                                      

   COND       delete a middle cell                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     test the cell validity               CELL__valid           x_plus         , LINKED                                       i_equal     0                                                                      
     exec     delete last cell                     CELL__free            x_plus         , NULL                                         p_equal     0                                                                      
     code     save cell pointer                    x_plus = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   4, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   6, num=   4, fore=   4, back=   4            

   COND       test a deleted cell                                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     test the cell validity               CELL__valid           x_plus         , LINKED                                       i_lesser    0                                                                      

   COND       try to delete a null pointer                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete last cell                     CELL__free            NULL           , NULL                                         i_lesser    0                                                                      
     code     save cell pointer                    x_plus = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   4, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   6, num=   4, fore=   4, back=   4            

   COND       add an unlinked cell, again                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             UNLINKED                                                      p_exists    0                                                                      
     code     save cell pointer                    x_out  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   4, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   7, num=   4, fore=   4, back=   4            

   COND       delete the last cell                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete last cell                     CELL__free            x_tail         , NULL                                         i_equal     0                                                                      
     code     save cell pointer                    x_tail = yUNIT_i_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   3, head=%9p, tail=%9p", x_head, x_save);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   6, num=   3, fore=   3, back=   3            

   COND       purge all cells (leaves unlinked)                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   0, fore=   0, back=   0            

   COND       delete unlinked cell                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete last cell                     CELL__free            x_out          , UNLINKED                                     i_equal     0                                                                      
     code     save cell pointer                    x_tail = yUNIT_i_rc;                                                                                                                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   0, fore=   0, back=   0            

   COND       delete the last cell again (illegal)                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete last cell                     CELL__free            x_tail         , NULL                                         i_lesser    0                                                                      

   COND       verify program teardown (still cant get last unlinked)       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_loc) location validation                                  LOC_legal                                                                                                                                            

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       update the number of tabs                                   
     code     modify the tab number                my.ntab = 3;                                                                                                                                                               

   COND       size sheet one                                              
     code     number of cols                       tabs[0].ncol      =  10;
     code     number of rows                       tabs[0].nrow      =  40;

   COND       size sheet two                                              
     code     number of rows                       tabs[1].nrow      = 100;
     code     number of cols                       tabs[1].ncol      =  40;

   COND       size sheet one                                              
     code     number of rows                       tabs[2].nrow      = 500;
     code     number of cols                       tabs[2].ncol      =  20;

   COND       check the origin (FIXED)                                    
     exec     check the cell location              LOC_legal                0,    0,    0, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,    0,    0, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,    0,    0, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a location valid in all three (FIXED)                 
     exec     check the cell location              LOC_legal                0,    5,    5, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,    5,    5, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,    5,    5, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a location outside sheet one (FIXED)                  
     exec     check the cell location              LOC_legal                0,   15,   15, CELL_FIXED                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,   15,   15, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,   15,   15, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a column out but row in (FIXED)                       
     exec     check the cell location              LOC_legal                0,   25,    5, CELL_FIXED                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,   25,    5, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,   25,    5, CELL_FIXED                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a row out but column in (FIXED)                       
     exec     check the cell location              LOC_legal                0,    5,  250, CELL_FIXED                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,    5,  250, CELL_FIXED                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,    5,  250, CELL_FIXED                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check negative tab (FIXED)                                  
     exec     check the cell location              LOC_legal               -1,    5,    5, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check too large tab (FIXED)                                 
     exec     check the cell location              LOC_legal                4,    5,    5, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check over max tab (FIXED)                                  
     exec     check the cell location              LOC_legal              100,    5,    5, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check negative col (FIXED)                                  
     exec     check the cell location              LOC_legal                0,   -5,    5, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check over max col (FIXED)                                  
     exec     check the cell location              LOC_legal                0, 1000,    5, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check negative row (FIXED)                                  
     exec     check the cell location              LOC_legal                0,    5,   -5, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check over max row (FIXED)                                  
     exec     check the cell location              LOC_legal                0,    5, 1000, CELL_FIXED                                  i_lesser    0                                                                      

   COND       check the origin (ADJUST)                                   
     exec     check the cell location              LOC_legal                0,    0,    0, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,    0,    0, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,    0,    0, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a location valid in all three (ADJUST)                
     exec     check the cell location              LOC_legal                0,    5,    5, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     exec     check the cell location              LOC_legal                1,    5,    5, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,    5,    5, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a location outside sheet one (ADJUST)                 
     exec     check the cell location              LOC_legal                0,   15,   15, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  16, row=  40                        
     exec     check the cell location              LOC_legal                1,   15,   15, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,   15,   15, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  20, row= 500                        

   COND       check a column out but row in (ADJUST)                      
     exec     check the cell location              LOC_legal                0,   25,    5, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row=  40                        
     exec     check the cell location              LOC_legal                1,   25,    5, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 100                        
     exec     check the cell location              LOC_legal                2,   25,    5, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  26, row= 500                        

   COND       check a row out but column in (ADJUST)                      
     exec     check the cell location              LOC_legal                0,    5,  250, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 251                        
     exec     check the cell location              LOC_legal                1,    5,  250, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  40, row= 251                        
     exec     check the cell location              LOC_legal                2,    5,  250, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 2                                          s_equal     s_move tab pos   : tab=   2, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 2                                          s_equal     s_move tab max   : tab=   2, col=  26, row= 500                        

   COND       check negative tab (ADJUST)                                 
     exec     check the cell location              LOC_legal               -1,    5,    5, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       check too large tab (ADJUST)                                
     exec     check the cell location              LOC_legal                4,    5,    5, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       check over max tab (ADJUST)                                 
     exec     check the cell location              LOC_legal              100,    5,    5, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       check negative col (ADJUST)                                 
     exec     check the cell location              LOC_legal                0,   -5,    5, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       check over max col (ADJUST)                                 
     exec     check the cell location              LOC_legal                0, 1000,    5, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       check negative row (ADJUST)                                 
     exec     check the cell location              LOC_legal                0,    5,   -5, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       check over max row (ADJUST)                                 
     exec     check the cell location              LOC_legal                0,    5,10000, CELL_ADAPT                                  i_lesser    0                                                                      

   COND       row legal, column is not (ADJUST)                           
     exec     check the cell location              LOC_legal                0, 1000,  250, CELL_ADAPT                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 251                        

   COND       column legal, row is not (ADJUST)                           
     exec     check the cell location              LOC_legal                0,  150, 1000, CELL_ADAPT                                  i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 251                        

   COND       finish with a legal one (ADJUST)                            
     exec     check the cell location              LOC_legal                0,   70,  500, CELL_ADAPT                                  i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  71, row= 501                        

   COND       purge all cells (leaves dtree)                                                                                                                                                                                  
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_loc) cell attachment to a sheet                           LOC_hook, LOC_unhook                                                                                                                                 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_two  = NULL;                                                                                                                                                      
     code     create a pointer again               tCELL *x_thr  = NULL;                                                                                                                                                      

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       add another cell                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check two locations                                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL);                                                                                          
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       hook up the first cell                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook one to first cell               LOC_hook              x_one, 0, 1, 1                                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check that one is hooked up right                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           

   COND       make sure that two is not hooked up                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       try to hook up two in one's place                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook one to first cell               LOC_hook              x_two, 0, 1, 1                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       make sure that one is still hooked up right                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           

   COND       make sure that two is still not hooked up                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       hook up the second cell                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook two to the second cell          LOC_hook              x_two, 0, 1, 2                                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       make sure that one is still hooked up                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           

   COND       make sure that two is now hooked up                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=   2", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=   2", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       add a third cell                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__new             LINKED                                                        p_exists    0                                                                      
     code     save cell pointer                    x_thr  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_thr);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_thr                                        s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       try to hook up the third cell (tab too high)                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_thr, 1, 1, 2                                                i_not       0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       see if three shows not hooked up                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_thr);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_thr                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       change to two worksheets                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab += 1;                                                                                                                                                              

   COND       try to hook up the third cell, again                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_thr, 1, 1, 2                                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       make sure that three is hooked up right                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=   1, row=   2", x_thr);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_thr                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   1, col=   1, row=   2", x_thr);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       make sure that one is still hooked up                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=   1", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           

   COND       make sure that two is still hooked up                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=   2", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=   2", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       try to hook up the third cell (already hooked up)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_thr, 0, 1, 2                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       try to hook up a null cell                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              NULL , 0, 1, 3                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       see if three is still hooked up                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=   1, row=   2", x_thr);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_thr                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   1, col=   1, row=   2", x_thr);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       unhook the first one                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     unhook one from the sheet            LOC_unhook            x_one                                                         i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           

   COND       try to hook one over two                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_one, 0, 1, 2                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       try to hook one into a tab too big                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_one, 5, 1, 2                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       try to hook one into a column too big                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_one, 0,50, 2                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       try to unhook a null one                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     unhook a cell                        LOC_unhook            NULL                                                          i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       try to hook one into a row too big                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook up cell                         LOC_hook              x_one, 0, 0, 100                                              i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       unhook the first one                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     unhook one from the sheet            LOC_unhook            x_two                                                         i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       try to hook two over three (diff sheet)                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     hook thr to the third cell           LOC_hook              x_two, 1, 1, 2                                                i_lesser    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify that all cells are detached                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][1]                          s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[1][2]                          s_equal     [[ CUSTOM ]]                                                           

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_cell) creating and destroying attached cells              CELL__create, CELL__delete, CELL_dup                                                                                                                 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_two  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_thr  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_dup  = NULL;                                                                                                                                                      

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0, 10, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  10, row=  10", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  10, row=  10", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       add second cell                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0, 11, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  11, row=  10", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  11, row=  10", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[11][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_two );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       add third cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0, 12, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_thr  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  12, row=  10", x_thr);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_thr                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  12, row=  10", x_thr);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[12][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   3, head=%9p, tail=%9p", x_one , x_thr );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       delete the last cell                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete cell                          CELL__delete          CHG_INPUT, 0, 12, 10                                                     i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_two );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       duplicate the second cell                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     duplicate                            CELL_dup              x_two                                                         p_exists    0                                                                      
     code     save cell pointer                    x_dup  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_dup);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_dup                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 1][20]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   3, head=%9p, tail=%9p", x_one , x_dup );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       delete the second cell                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete cell                          CELL__delete          CHG_INPUT, 0, 11, 10                                                     i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_dup );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       hook up the duplicate                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------
     exec     hook up the cell                     LOC_hook              x_dup, 0, 1, 20                                               i_equal     0                                                            
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=  20", x_dup);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_dup                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=  20", x_dup);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 1][20]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_dup );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       delete the first cell                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete cell                          CELL__delete          CHG_INPUT, 0, 10, 10                                                     i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_dup , x_dup );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       delete a non-existant cell                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete cell                          CELL__delete          CHG_INPUT, 0,  5, 10                                                     i_lesser    0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_dup , x_dup );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       duplicate the dup                                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     duplicate                            CELL_dup              x_dup                                                         p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 3][16]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_dup , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       hook up new duplicate                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------
     exec     hook up the cell                     LOC_hook              x_one, 0, 3, 16                                               i_equal     0                                                            
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   3, row=  16", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   3, row=  16", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 3][16]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_dup , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            


   COND       check the original duplicate                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   1, row=  20", x_dup);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_dup                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   1, row=  20", x_dup);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 1][20]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_dup , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_loc) moving cells between locations                       LOC_move                                                                                                                                             

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_two  = NULL;                                                                                                                                                      

   COND       change to three worksheets                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab =  3;                                                                                                                                                                
     code     number of cols                       tabs[0].ncol      = 100;                                                                                                                                                     
     code     number of rows                       tabs[0].nrow      = 100;                                                                                                                                                     
     code     number of cols                       tabs[1].ncol      =  40;                                                                                                                                                     
     code     number of rows                       tabs[1].nrow      =  40;                                                                                                                                                     
     code     number of cols                       tabs[2].ncol      =  40;                                                                                                                                                     
     code     number of rows                       tabs[2].nrow      =  40;                                                                                                                                                     
     code     current cols                         tabs[0].ccol      =   0;                                                                                                                                                     
     code     current row                          tabs[0].crow      =   0;                                                                                                                                                     

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0, 10, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  10, row=  10", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  10, row=  10", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       add second cell                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0, 11, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  11, row=  10", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  11, row=  10", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[11][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_two );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       move first one                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, 10, 10, 0, 20, 15                                          i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       verify old location is free                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                           

   COND       verify new location is occupied                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  20, row=  15", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  20, row=  15", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[20][15]                        s_equal     [[ CUSTOM ]]                                                           

   COND       move second one                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, 11, 10, 0, 30, 20                                          i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       verify old location is free                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[11][10]                        s_equal     [[ CUSTOM ]]                                                           

   COND       verify new location is occupied                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  30, row=  20", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  30, row=  20", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[30][20]                        s_equal     [[ CUSTOM ]]                                                           

   COND       move first over the second (deleting second)                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, 20, 15, 0, 30, 20                                          i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       verify old location is free                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[20][15]                        s_equal     [[ CUSTOM ]]                                                           

   COND       verify new location is occupied                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  30, row=  20", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  30, row=  20", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[30][20]                        s_equal     [[ CUSTOM ]]                                                           

   COND       move a negative cell coordinate (errors)                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, -5, 50,  0, 10, 10                                         i_not       0                                                                      
     exec     move a cell                          LOC_move              0,  5, -8,  0, 10, 10                                         i_not       0                                                                      
     exec     move a cell                          LOC_move              0,  5,  8,  0, -2, 10                                         i_not       0                                                                      
     exec     move a cell                          LOC_move              0,  5,  8,  0,  2, -3                                         i_not       0                                                                      

   COND       change to two worksheets                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab += 1;                                                                                                                                                              

   COND       verify we still have the one cell                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       move a non-existant over a first cell (deleting it)          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, 50, 50,  0, 30, 20                                         i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       add first cell, again                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0, 10, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  10, row=  10", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=  10, row=  10", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       add second cell, again                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          1, 11, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=  11, row=  10", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   1, col=  11, row=  10", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[11][10]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_two );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       move first one to the second sheet                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, 10, 10, 1,  5,  5                                          i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       verify old location is free                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                           

   COND       verify new location is occupied                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=   5, row=   5", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   1, col=   5, row=   5", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           

   COND       move second one to the same location on other sheet          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              1, 11, 10, 0,  5,  5                                          i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       verify old location is free                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , NULL );                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[11][10]                        s_equal     [[ CUSTOM ]]                                                           

   COND       verify new location is occupied                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           

   COND       verify first cell is still there (uneffected)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=   5, row=   5", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   1, col=   5, row=   5", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[1].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_loc) direct movement between cells                        LOC_jump                                                                                                                                             

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                      

   COND       setup initial vertical values                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     window size full                     my.y_full         =  44;                                                                                                                                                     
     code     window size top                      my.y_top          =   2;                                                                                                                                                     
     code     window size bottom                   my.y_bottom       =   2;                                                                                                                                                     
     code     window size avail                    my.y_avail        =  40;                                                                                                                                                     
     code     number of rows                       tabs[0].nrow      =  40;                                                                                                                                                     
     code     beginning row                        BROW              =   0;                                                                                                                                                     
     code     ending row                           EROW              =   0;                                                                                                                                                     
     code     current row                          tabs[0].crow      =   0;                                                                                                                                                     

   COND       setup initial horizonal values                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     window size full                     my.x_full         =  80;                                                                                                                                                     
     code     window size left                     my.x_left         =   5;                                                                                                                                                     
     code     window size right                    my.x_right        =   0;                                                                                                                                                     
     code     window size availible                my.x_avail        =  75;                                                                                                                                                     
     code     number of cols                       tabs[0].ncol      =  10;                                                                                                                                                     
     code     beginning col                        BCOL              =   0;                                                                                                                                                     
     code     ending col                           ECOL              =   0;                                                                                                                                                     
     code     current cols                         tabs[0].ccol      =   0;                                                                                                                                                     

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0,  5,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       get to a starting point                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,    5,    5                                              i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   5, row=   5                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       move to the origin                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,    0,    0                                              i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       move half way down                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,    2,   20                                              i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   2, row=  20                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       try to move past last row                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,    0,   50                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   2, row=  20                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       try to move past the last column                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,   15,    0                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   2, row=  20                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       try to change sheets                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 1,    5,   10                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   2, row=  20                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move error     : tab ref (1 vs 1) is too high                        

   COND       change to two worksheets                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab += 1;                                                                                                                                                              
     code     number of rows                       tabs[1].ncol      =  50;                                                                                                                                                     
     code     number of columns                    tabs[1].nrow      = 100;                                                                                                                                                     

   COND       try to change sheets, again                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              1, 15, 50                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=  15, row=  50                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  50, row= 100                        

   COND       move to a bigger cell                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              1, 32, 95                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=  32, row=  95                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  50, row= 100                        

   COND       make sure the original sheet was uneffected                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   2, row=  20                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       go back and check numbers on first sheet                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              0,  3,  3                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   3, row=   3                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       make sure the second sheet was uneffected                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=  32, row=  95                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  50, row= 100                        

   COND       try to change to a third sheet                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 2,    5,   10                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   3, row=   3                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       try to use a negative sheet                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                -1,    5,   10                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   3, row=   3                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       try to use a negative column                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,   -5,   10                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   3, row=   3                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       try to use a negative row                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump                 0,    5,  -10                                              i_lesser    0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   3, row=   3                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  10, row=  40                        

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_loc) create cell labels from locations                    LOC_ref                                                                                                                                              

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup testing variables                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a custom expect string        char label [2000];                                                                                                                                                         
     code     create a custom expect string        char x_label [2000];                                                                                                                                                       
     code     create a pointer to one cell         tCELL *x_one   = NULL;                                                                                                                                                     
     code     create a pointer to another          tCELL *x_temp  = NULL;                                                                                                                                                     
     code     create a tab index                   int    x_tab   = 0;                                                                                                                                                        
     code     create a col index                   int    x_col   = 0;                                                                                                                                                        
     code     create a row index                   int    x_row   = 0;                                                                                                                                                        

   COND       update the tab sizing                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify the tab number                my.ntab = 3;                                                                                                                                                               
     code     number of cols                       tabs[0].ncol      =   40;
     code     number of rows                       tabs[0].nrow      =   40;
     code     number of cols                       tabs[1].ncol      =   72;
     code     number of rows                       tabs[1].nrow      =  900;
     code     number of cols                       tabs[2].ncol      =   20;
     code     number of rows                       tabs[2].nrow      =  500;

   COND       create a simple label                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,    5,    5,    0, x_label                               i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0f6                                                 

   COND       create a label for a double char column                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,   30,    5,    0, x_label                               i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0ae6                                                

   COND       create a label for a double digit row                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,    7,   29,    0, x_label                               i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0h30                                                

   COND       create a label for an out-of-bounds column (relative)        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,   52,   29,    0, x_label                               i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for an out-of-bounds row (relative)           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,   0,  49, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       try rows that are too big or too small (abosolute)           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,   0,1000, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  0,   0,  -1, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  0,   0, -49, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  0,   0,5555, 0, x_label                                    i_lesser    0                                                                      

   COND       try cols that are too big or too small (abosolute)           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,1000,   0, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  0,  -1,   0, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  0, -49,   0, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  0,5555,   0, 0, x_label                                    i_lesser    0                                                                      

   COND       try a null string                                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,   7,  29, 0, NULL                                       i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       go to the second tab                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,   2,   6, 0, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 1c7                                                 

   COND       check farther out in columns (past on tab 0)                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,  70,   2, 0, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 1bs3                                                

   COND       so, then fail on tab zero to prove it ;)                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  70,   2, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for a double digit row (past on tab 0)        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,  70, 100, 0, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 1bs101                                              

   COND       so, then fail on tab zero, again to prove it ;)              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  70, 100, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for a out-of-bounds column                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,  77,  29, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for a out-of-bounds row                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,   0, 900, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       try rows that are too big and too small                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,   0,1000, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  1,   0,  -1, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  1,   0, -49, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  1,   0,5555, 0, x_label                                    i_lesser    0                                                                      

   COND       try cols that are too big and too small                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  1,1000,   5, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  1,  -1,   5, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  1, -50,   5, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                  1,5555,   0, 0, x_label                                    i_lesser    0                                                                      

   COND       go to the third tab                                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  2,   1,   1, 0, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 2b2                                                 

   COND       check farther out in columns (where tab 1 would be good)     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  2,  30,   2, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for a out-of-bounds column (relative)         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  2,  30,  29, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for a out-of-bounds row (relative)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  2,   0, 500, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       create a label for a out-of-bounds tab (relative)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  5,   0,   9, 0, x_label                                    i_lesser    0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : n/a                                                 

   COND       try tabs that are too big or too small (absolute)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                 30,   5,   5, 0, x_label                                    i_lesser    0                                                                      
     exec     construct a label                    LOC_ref                 -1,   5,   5, 0, x_label                                    i_lesser    0                                                                      

   COND       create a simple label, again                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  15,  12, 0, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0p13                                                

   COND       create a absolute row label                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  15,  12, 2, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0p$13                                               

   COND       create a absolute col label                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  15,  12, 1, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0$p13                                               

   COND       create a absolute tab label                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  15,  12, 4, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : $0p13                                               

   COND       create a absolute tab and row                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  15,  12, 6, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : $0p$13                                              

   COND       create a absolute for all three                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     construct a label                    LOC_ref                  0,  15,  12, 7, x_label                                    i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : @0p13                                               

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_loc) convert cells to labels and back                     LOC_label, LOC_parse                                                                                                                                 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a custom expect string        char x_label [2000];                                                                                                                                                       
     code     create a pointer to one cell         tCELL *x_one   = NULL;                                                                                                                                                     
     code     create a pointer to another          tCELL *x_temp  = NULL;                                                                                                                                                     
     code     create a tab index                   int    x_tab   = 0;                                                                                                                                                        
     code     create a col index                   int    x_col   = 0;                                                                                                                                                        
     code     create a row index                   int    x_row   = 0;                                                                                                                                                        

   COND       update the number of tabs                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify the tab number                my.ntab = 3;                                                                                                                                                                 
     code     number of cols                       tabs[0].ncol      =   40;                                                                                                                                                    
     code     number of rows                       tabs[0].nrow      =   40;                                                                                                                                                    
     code     number of rows                       tabs[1].nrow      = 1000;                                                                                                                                                    
     code     number of cols                       tabs[1].ncol      =   72;                                                                                                                                                    
     code     number of rows                       tabs[2].nrow      =  500;                                                                                                                                                    
     code     number of cols                       tabs[2].ncol      =   20;                                                                                                                                                    

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0,  5,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       get the label of cell one                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     create the label                     LOC_label             x_one, x_label                                                i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0f6                                                 

   COND       get a location                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     get the location                     LOC_parse             "0f6", &x_tab, &x_col, &x_row, NULL                           i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=%4d, col=%4d, row=%4d", x_one , x_tab, x_col, x_row);                                                                      
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           

   COND       move the cell and check                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0,  5,  5, 0, 20, 15                                          i_equal     0                                                                      
     exec     create the label                     LOC_label             x_one, x_label                                                i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 0u16                                                

   COND       get a location                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     get the location                     LOC_parse             "0u16", &x_tab, &x_col, &x_row, NULL                          i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=  20, row=  15", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=%4d, col=%4d, row=%4d", x_one , x_tab, x_col, x_row);                                                                      
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           

   COND       change to two worksheets                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab += 1;                                                                                                                                                              

   COND       move the cell and check                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              0, 20, 15, 1, 26,100                                          i_equal     0                                                                      
     exec     create the label                     LOC_label             x_one, x_label                                                i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 1aa101                                              

   COND       get a location                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     get the location                     LOC_parse             "1aa101", &x_tab, &x_col, &x_row, NULL                        i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=  26, row= 100", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=%4d, col=%4d, row=%4d", x_one , x_tab, x_col, x_row);                                                                      
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           

   COND       change to three worksheets                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab += 1;                                                                                                                                                              

   COND       move the cell and check                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              1, 26,100, 2,  1,  6                                          i_equal     0                                                                      
     exec     create the label                     LOC_label             x_one, x_label                                                i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 2b7                                                 

   COND       get a location                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     get the location                     LOC_parse             "2b7"   , &x_tab, &x_col, &x_row, NULL                        i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   2, col=   1, row=   6", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=%4d, col=%4d, row=%4d", x_one , x_tab, x_col, x_row);                                                                      
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           

   COND       move to a very large cell (catch column errors)              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     move a cell                          LOC_move              2,  1,  6, 1, 54,551                                          i_equal     0                                                                      
     exec     create the label                     LOC_label             x_one, x_label                                                i_equal     0                                                                      
     exec     check the label                      LOC_unit              "loc_label"      , NULL                                       s_equal     s_loc label      : 1bc552                                              

   COND       get a location                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     get the location                     LOC_parse             "1bc552", &x_tab, &x_col, &x_row, NULL                        i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   1, col=  54, row= 551", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=%4d, col=%4d, row=%4d", x_one , x_tab, x_col, x_row);                                                                      
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SECT          basic cell changes                                                                                                                                                                                                




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_cell) placing string and numeric literals in cells        CELL_change                                                                                                                                          

   COND       verify program setup                                                                                                                                                                                  
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                                                                                                                                                          
     code     create a custom expect string        char custom[2000];                                                                                                                                               
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                            
     code     create a pointer to another          tCELL *x_two  = NULL;                                                                                                                                            

   COND       add first cell                                                                                                                                                                                        
     exec     add a cell                           CELL__create          0, 10, 10                                                     p_exists    0                                                            
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                             
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");                                                                                                
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       change source value                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT,  0, 10, 10, "testing"                                         p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   7, "testing");                                                                                            
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       change source again                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT,  0, 10, 10, "this is a second test"                           p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  21, "this is a second test");                                                                              
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       change source again                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT,  0, 10, 10, "this is a second test that really has me thinking about how useful long text might be in these cells"       p_exists   0   
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:", 100, "this is a second test that really has me");                                                             
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       now clear the cell                                                                                                                                                                                    
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, ""                                                 p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   0, "");                                                                                                   
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       now wipe it                                                                                                                                                                                           
     exec     change the source string             CELL__wipe            x_one                                                         i_equal     0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");                                                                                                
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       change source to a number                                                                                                                                                                              
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "42"                                               p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   2, "42");                                                                                                 
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          42.000000                        

   COND       change source to a big number                                                                                                                                                                         
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "987654321"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "987654321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :   987654321.000000                        

   COND       back to a string                                                                                                                                                                                      
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "hey hey monkey"                                   p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  14, "hey hey monkey");                                                                                     
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       change source to a real                                                                                                                                                                               
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "9876.4321"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "9876.4321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        9876.432100                        

   COND       change source to a negative real                                                                                                                                                                      
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "-876.4321"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "-876.4321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        -876.432100                        

   COND       change source to a explicit positive real                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "+876.4321"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "+876.4321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         876.432100                        

   COND       change to number with trailing letter                                                                                                                                                                 
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "9876.432b"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "9876.432b");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.000000                        

   COND       change to two worksheets                                                                                                                                                                              
     code     modify a variable                    my.ntab += 1;                                                                                                                                                    

   COND       add second cell                                                                                                                                                                                       
     exec     add a cell                           CELL__create          1, 10, 10                                                     p_exists    0                                                            
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                             
     code     create a custom expect string        sprintf(CUSTOM, "Cell Location    : p=%9p, t=   1, c=  10, r=  10", x_two);                                                                                      
     get      check the cell's location            unit_accessor         "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                 
     code     create a custom expect string        sprintf(CUSTOM, "Sheet Location   : p=%9p",  x_two);                                                                                                             
     get      check the sheet location             unit_accessor         "sheet_who",     tabs[1].sheet[10][10]                        s_equal     [[ CUSTOM ]]                                                 
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=   2, f=   2, b=   2                    
     code     create a custome expect string       sprintf(CUSTOM, "Cell Linked List : n=   2, h=%9p, t=%9p", x_one, x_two);                                                                                        
     get      review the cell linked list          unit_accessor         "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                 

   COND       change source to a big number                                                                                                                                                                         
     exec     change the source string             CELL_change           CHG_INPUT, 1, 10, 10, "987654321"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "987654321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_two                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_two                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_two                                        s_equal     Cell Value       :   987654321.000000                        

   COND       change one to a negative                                                                                                                                                                              
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "-876.4321"                                        p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "-876.4321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        -876.432100                        

   COND       verify two stayed the same                                                                                                                                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "987654321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_two                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_two                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_two                                        s_equal     Cell Value       :   987654321.000000                        

   COND       verify that one stayed                                                                                                                                                                                
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "-876.4321");                                                                                          
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        -876.432100                        

   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SECT          fundamental dependency creation and destruction                                                                                                                                                                   




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_dep ) one-way dependency creation and destruction         DEP__new, DEP__free, DEP_init, DEP_purge                                                                                                             

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to the first dep    void *x_head = NULL;                                                                                                                                                       
     code     create a pointer to the first dep    void *x_next = NULL;                                                                                                                                                       
     code     create a pointer to a mid-point      void *x_save = NULL;                                                                                                                                                       
     code     create a pointer to one after that   void *x_plus = NULL;                                                                                                                                                       
     code     create a pointer to the last dep     void *x_tail = NULL;                                                                                                                                                       

   COND       (DLL00) verify program setup initializes                                                                                                                                                                        
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       (DLL01) add a first                                                                                                                                                                                             
     exec     add a dep                            DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_head = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   1, head=%9p, tail=%9p", x_head, x_head);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   1, fore=   1, back=   1                      

   COND       (DLL02) delete the first                                                                                                                                                                                        
     exec     delete dep                           DEP__free             x_head                                                        p_null      0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   0, head=%9p, tail=%9p", NULL  , NULL  );                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       (DLL03) add first, again                                                                                                                                                                                        
     exec     add a dep                            DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_head = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   1, head=%9p, tail=%9p", x_head, x_head);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   1, fore=   1, back=   1                      

   COND       (DLL04) add another                                                                                                                                                                                             
     exec     add a cell                           DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     keep the new pointer                 x_next = x_tail;                                                                                                                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   2, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   2, fore=   2, back=   2                      

   COND       (DLL05) and a third                                                                                                                                                                                             
     exec     add a cell                           DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     keep the previous one                x_save = x_tail;                                                                                                                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   3, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   3, fore=   3, back=   3                      

   COND       (DLL06) and a forth                                                                                                                                                                                             
     exec     add a cell                           DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     keep the previous one                x_plus = x_tail;                                                                                                                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   4, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       (DLL07) and then a final                                                                                                                                                                                        
     exec     add a dep                            DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   5, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   5, fore=   5, back=   5                      

   COND       (DLL08) delete the middle                                                                                                                                                                                       
     exec     delete dep                           DEP__free             x_plus                                                        p_null      0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   4, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       (DLL09) delete the tail                                                                                                                                                                                         
     exec     delete dep                           DEP__free             x_tail                                                        p_null      0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   3, head=%9p, tail=%9p", x_head, x_save);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   3, fore=   3, back=   3                      
     code     keep the new tail                    x_tail = x_save;                                                                                                                                                           

   COND       (DLL10) delete the head                                                                                                                                                                                         
     exec     delete dep                           DEP__free             x_head                                                        p_null      0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   2, head=%9p, tail=%9p", x_next, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   2, fore=   2, back=   2                      
     code     keep the new head                    x_head = x_next;                                                                                                                                                           

   COND       (DLL11) add another                                                                                                                                                                                             
     exec     add                                  DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_tail = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   3, head=%9p, tail=%9p", x_head, x_tail);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   3, fore=   3, back=   3                      

   COND       (DLL12) purge all                                                                                                                                                                                               
     exec     purge                                DEP_purge                                                                           i_equal     0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       (DLL13) add one again                                                                                                                                                                                           
     exec     add                                  DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_head = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   1, head=%9p, tail=%9p", x_head, x_head);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   1, fore=   1, back=   1                      

   COND       (DLL14) purge all, on single list                                                                                                                                                                               
     exec     purge                                DEP_purge                                                                           i_equal     0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       (DLL15) purge all, on empty list                                                                                                                                                                                
     exec     purge                                DEP_purge                                                                           i_not       0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       (DLL16) delete on empty list                                                                                                                                                                                    
     exec     delete                               DEP__free             NULL                                                          p_null      0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       (DLL17) add one again                                                                                                                                                                                           
     exec     add                                  DEP__new                                                                            p_exists    0                                                                      
     code     save deps pointer                    x_head = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_dep pointers   : num=   1, head=%9p, tail=%9p", x_head, x_head);                                                                                         
     get      review the deps linked list          DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     [[ CUSTOM ]]                                                           
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   1, fore=   1, back=   1                      

   COND       (DLL18) verify program teardown purges                                                                                                                                                                          
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   ,  "root"                                    s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      



#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_dep ) two-way dependency creation and destruction         DEP_create, DEP_delete, DEP_requires, DEP_provides, DEP_check                                                                                        

   COND       verify program setup initializes                                                                                                                                                                                
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_1st  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_2nd  = NULL;                                                                                                                                                      
     code     create a pointer to a third          tCELL *x_3rd  = NULL;                                                                                                                                                      
     code     create a pointer to a fourth         tCELL *x_4th  = NULL;                                                                                                                                                      
     code     create a pointer to a fifth          tCELL *x_5th  = NULL;                                                                                                                                                      
     code     create a pointer to a ninth          tCELL *x_9th  = NULL;                                                                                                                                                      

   COND       create the four cells                                                                                                                                                                                           
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  5, "one"                                              p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_1st                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  6, "two"                                              p_exists    0                                                                      
     code     save cell pointer                    x_2nd  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_2nd                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  6,  5, "three"                                            p_exists    0                                                                      
     code     save cell pointer                    x_3rd  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_3rd                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  6,  6, "four"                                             p_exists    0                                                                      
     code     save cell pointer                    x_4th  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_4th                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  7,  7, "five"                                             p_exists    0                                                                      
     code     save cell pointer                    x_5th  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_5th                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 10, 10, "nine"                                             p_exists    0                                                                      
     code     save cell pointer                    x_9th  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_9th                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   7, num=   6, fore=   6, back=   6            

   COND       review all cell connections (NONE)                                                                                                                                                                              
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 3rd dependent on the 1st                                                                                                                                                                                   
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_3rd            ,  x_1st                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0g6,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0g6,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 4th dependent on the 1st                                                                                                                                                                                   
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_4th            ,  x_1st                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0g7,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 1) ,0f6,                                    
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 4th dependent on the 2nd                                                                                                                                                                                   
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_4th            ,  x_2nd                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0g7,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       remove dependency of 3rd on 1st                                                                                                                                                                                 
     exec     remove a dependency                  DEP_delete            x_3rd            ,  x_1st                                     i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0g7,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0g7,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       try to make null dependent on the 1st                                                                                                                                                                           
     exec     create a dependency                  DEP_create            DEP_REQUIRE, NULL             ,  x_2nd                        i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      

   COND       try to make 3rd dependent on the null                                                                                                                                                                           
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_3rd            ,  NULL                         i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      

   COND       make 4th dependent on the 2nd, again (duplicate)                                                                                                                                                                
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_4th            ,  x_2nd                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0g7,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0g7,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 3rd dependent on the 1st, again                                                                                                                                                                            
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_3rd            ,  x_1st                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       make 4th dependent on itself (circular)                                                                                                                                                                         
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_4th            ,  x_4th                        i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       add dependency on 5th for 4th (take 4th off root)                                                                                                                                                               
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_5th            ,  x_4th                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  12, fore=  12, back=  12                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0h8,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 1) ,0g7,                                    
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       remove dependency of 2nd on 1st (non-existant)                                                                                                                                                                  
     exec     remove a dependency                  DEP_delete            x_2nd            ,  x_1st                                     i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  12, fore=  12, back=  12                      

   COND       add dependency on 5th for 2nd                                                                                                                                                                                   
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_5th            ,  x_2nd                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0h8,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 2) ,0f7,0g7,                                
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       add dependency on 2nd for 5th (looped and illegal)                                                                                                                                                              
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_2nd            ,  x_5th                        i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0h8,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 2) ,0f7,0g7,                                
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       add dependency on 1st for 5th (three step removed loop)                                                                                                                                                         
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_1st            ,  x_5th                        i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0h8,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 2) ,0f7,0g7,                                
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       add dependency on 9th for 5th (take 5th off root)                                                                                                                                                               
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_9th            ,  x_5th                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0k11,                               
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 2) ,0f7,0g7,                                
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,0k11,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 1) ,0h8,                                    
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 1) ,root,                                   

   COND       remove dependency of 5th on 4th (get 4th back to root)                                                                                                                                                          
     exec     remove a dependency                  DEP_delete            x_5th            ,  x_4th                                     i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0g6,0g7,0k11,                           
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 1) ,0f7,                                    
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,0k11,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 1) ,0h8,                                    
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 1) ,root,                                   

   COND       verify program teardown purges                                                                                                                                                                                  
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_dep ) range dependency creation and destruction           DEP_range, DEP_cleanse                                                                                                                               
# 2014-02-17 : had to change from CELL__create to CELL_change to avoid cell deletion when dependencies are cleared

   COND       verify program setup initializes                                                                                                                                                                                
     exec     setup the program                    PROG_testloud                                                                       i_equal     0                                                                      
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_1st  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_2nd  = NULL;                                                                                                                                                      
     code     create a pointer to a third          tCELL *x_3rd  = NULL;                                                                                                                                                      
     code     create a pointer to a fourth         tCELL *x_4th  = NULL;                                                                                                                                                      
     code     create a pointer to a fifth          tCELL *x_5th  = NULL;                                                                                                                                                      
     code     create a pointer to a sixth          tCELL *x_6th  = NULL;                                                                                                                                                      
     code     create a pointer to a seventh        tCELL *x_7th  = NULL;                                                                                                                                                      
     code     create a pointer to a eighth         tCELL *x_8th  = NULL;                                                                                                                                                      

   COND       create the four cells                                                                                                                                                                                           
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  5, "1st"                                              p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  6,  5, "2nd"                                              p_exists    0                                                                      
     code     save cell pointer                    x_2nd  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  6,  6, "5th"                                              p_exists    0                                                                      
     code     save cell pointer                    x_5th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  7,  6, "6th"                                              p_exists    0                                                                      
     code     save cell pointer                    x_6th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  8,  8, "7th"                                              p_exists    0                                                                      
     code     save cell pointer                    x_7th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  9,  9, "8th"                                              p_exists    0                                                                      
     code     save cell pointer                    x_8th  = yUNIT_p_rc;                                                                                                                                                       
     get      review the cell counts               unit_accessor         "cell_count"     ,  NULL                                      s_equal     Cell Links Count : n=   6, f=   6, b=   6                              

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       add dependency on 8th for 1st (get started simple)                                                                                                                                                                
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_8th            ,  x_1st                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0j10,                                   
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0j10,                                   
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 1) ,0f6,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       cleanse the 8th cell (just one entry)                                                                                                                                                                             
     exec     remove all dependencies              DEP_cleanse           x_8th                                                         i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       add several dependencies on 7th                                                                                                                                                                                   
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_7th            ,  x_1st                        i_equal     0                                                                      
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_7th            ,  x_2nd                        i_equal     0                                                                      
     exec     create a dependency                  DEP_create            DEP_REQUIRE, x_7th            ,  x_5th                        i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0i9,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0i9,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0i9,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0i9,                                    
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 3) ,0f6,0g6,0g7,                            
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 1) ,root,                                   
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       cleanse the 7th cell (with three dependencies)                                                                                                                                                                    
     exec     create a dependency                  DEP_cleanse           x_7th                                                         i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       create a single cell range dependency from 8th on 1st                                                                                                                                                             
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   5,   0,   5,   5               i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0j10,                                   
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0j10,                                   
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 1) ,0f6,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       cleanse the 8th cell (with one dependency)                                                                                                                                                                        
     exec     create a dependency                  DEP_cleanse           x_8th                                                         i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       create a multiple cell range dependency from 8th                                                                                                                                                                  
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   5,   0,   7,   5               i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      

   COND       review all cell connections (adds a cell at 0h6)                                                                                                                                                                
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0j10,                                   
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0j10,                                   
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0j10,                                   
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 1) ,0j10,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 3) ,0f6,0g6,0h6,                            
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       cleanse the 8th cell (but leaves new cell)                                                                                                                                                                        
     exec     remove all dependencies              DEP_cleanse           x_8th                                                         i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       create a multiple cell range dependency from 8th                                                                                                                                                                  
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   5,   0,   7,   6               i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections (adds a cell at 0h6)                                                                                                                                                                
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0j10,                                   
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0j10,                                   
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0j10,                                   
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 1) ,0j10,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0j10,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0j10,                                   
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 1) ,0j10,                                   
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 6) ,0f6,0f7,0g6,0g7,0h6,0h7,                
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       try a reversed column range                                                                                                                                                                                       
     exec     create a dependency                  DEP_range             x_8th            ,   0,   7,   5,   0,   5,   6               i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       try a reversed row range                                                                                                                                                                                          
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   6,   0,   7,   5               i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       try column too low                                                                                                                                                                                                
     exec     create a dependency                  DEP_range             x_8th            ,   0,  -1,   6,   0,   7,   5               i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       try row too low                                                                                                                                                                                                   
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,  -2,   0,   7,   5               i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       try column too high                                                                                                                                                                                               
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   5,   0,  50,   6               i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       try row too high                                                                                                                                                                                                  
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   5,   0,   7, 100               i_lesser    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections (verify no changes)                                                                                                                                                                 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0j10,                                   
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0j10,                                   
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0j10,                                   
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 1) ,0j10,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0j10,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0j10,                                   
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 1) ,0j10,                                   
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 6) ,0f6,0f7,0g6,0g7,0h6,0h7,                
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       put a new range that overlaps the existing one on 8th                                                                                                                                                             
     exec     create a dependency                  DEP_range             x_8th            ,   0,   5,   5,   0,   7,   5               i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections (nothing new)                                                                                                                                                                         
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0j10,                                   
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0j10,                                   
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0j10,                                   
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 1) ,0j10,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0j10,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0j10,                                   
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 1) ,0j10,                                   
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 0) .                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 6) ,0f6,0f7,0g6,0g7,0h6,0h7,                
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       add an overlapping range to 7th                                                                                                                                                                                   
     exec     create a dependency                  DEP_range             x_7th            ,   0,   5,   5,   0,   7,   5               i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  22, fore=  22, back=  22                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0i9,0j10,                               
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0i9,0j10,                               
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 2) ,0i9,0j10,                               
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 2) ,0i9,0j10,                               
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0j10,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0j10,                                   
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 1) ,0j10,                                   
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 3) ,0f6,0g6,0h6,                            
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 1) ,root,                                   
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 6) ,0f6,0f7,0g6,0g7,0h6,0h7,                
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 1) ,root,                                   

   COND       cleanse the 8th cell                                                                                                                                                                                              
     exec     create a dependency                  DEP_cleanse           x_8th                                                         i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0i9,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0i9,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0i9,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 1) ,0i9,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 3) ,0f6,0g6,0h6,                            
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 1) ,root,                                   
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       add an overlapping range to 7th                                                                                                                                                                                   
     exec     create a dependency                  DEP_range             x_7th            ,   0,   7,   5,   0,   7,   6               i_equal     0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0i9,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0i9,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0i9,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 1) ,0i9,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0h7"                                     s_equal     s_dep requires   : 0h7   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_provides"  ,  "0h7"                                     s_equal     s_dep provides   : 0h7   ( 1) ,0i9,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 4) ,0f6,0g6,0h6,0h7,                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 1) ,root,                                   
     get      review the provides 8th              DEP_unit              "cell_requires"  ,  "0j10"                                    s_equal     s_dep requires   : 0j10  ( 0) .                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0j10"                                    s_equal     s_dep provides   : 0j10  ( 0) .                                        

   COND       verify program teardown purges                                                                                                                                                                                  
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      




#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_dep ) two-way dependency creation using formulas          DEP_create, DEP_delete, DEP_requires, DEP_provides, DEP_check                                                                                        

   COND       verify program setup initializes                                                                                                                                                                                
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_1st  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_2nd  = NULL;                                                                                                                                                      
     code     create a pointer to a third          tCELL *x_3rd  = NULL;                                                                                                                                                      
     code     create a pointer to a fourth         tCELL *x_4th  = NULL;                                                                                                                                                      
     code     create a pointer to a fifth          tCELL *x_5th  = NULL;                                                                                                                                                      
     code     create a pointer to a ninth          tCELL *x_9th  = NULL;                                                                                                                                                      

   COND       create the four cells                                                                                                                                                                                           
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  5, "one"                                              p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_1st                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  6, "two"                                              p_exists    0                                                                      
     code     save cell pointer                    x_2nd  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_2nd                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  6,  5, "three"                                            p_exists    0                                                                      
     code     save cell pointer                    x_3rd  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_3rd                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  6,  6, "four"                                             p_exists    0                                                                      
     code     save cell pointer                    x_4th  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_4th                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  7,  7, "five"                                             p_exists    0                                                                      
     code     save cell pointer                    x_5th  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_5th                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 10, 10, "nine"                                             p_exists    0                                                                      
     code     save cell pointer                    x_9th  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's information         unit_accessor         "cell_info",     x_9th                                        s_equal     Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0                   
     get      review the cell counts               unit_accessor         "cell_count"     ,  NULL                                      s_equal     Cell Links Count : n=   6, f=   6, b=   6                              

   COND       review all cell connections (NONE)                                                                                                                                                                              
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 0) .                                        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 3rd dependent on the 1st                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  5, "=f6"                                              p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0g6,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0g6,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 4th dependent on the 1st                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  6, "=f6"                                              p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0g7,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 1) ,0f6,                                    
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 4th dependent on the 2nd                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  6, "=f6+f7"                                           p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0g7,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       remove dependency of 3rd on 1st                                                                                                                                                                                 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  5, ""                                                 p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0g7,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0g7,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 0) .                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 3rd dependent on the 1st, again                                                                                                                                                                            
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  5, "=f6"                                              p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0g7,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       make 4th dependent on itself (circular)                                                                                                                                                                         
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  6, "=f6+f7+g7"                                        p_null      0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 1) ,0g6,                                    
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,0g6,                                    
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 0) .                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       put 4th back to original                                                                                                                                                                                        
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  6, "=f6+f7"                                           p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  10, fore=  10, back=  10                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0g7,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       add dependency on 5th for 4th (take 4th off root)                                                                                                                                                               
     exec     change the source string             CELL_change           CHG_INPUT, 0,  7,  7, "=g7"                                              p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  12, fore=  12, back=  12                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0h8,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 1) ,0g7,                                    
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 1) ,0g7,                                    
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       add dependency on 5th for 2nd                                                                                                                                                                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  7,  7, "=g7+f7"                                           p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  14, fore=  14, back=  14                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0h8,                                
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 2) ,0f7,0g7,                                
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 0) .                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 0) .                                        

   COND       add dependency on 9th for 5th (take 5th off root)                                                                                                                                                               
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=h8"                                              p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 2) ,0g6,0k11,                               
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0h8,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 2) ,0f7,0g7,                                
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,0k11,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 1) ,0h8,                                    
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 1) ,root,                                   

   COND       remove dependency of 5th on 4th (get 4th back to root)                                                                                                                                                          
     exec     change the source string             CELL_change           CHG_INPUT, 0,  7,  7, "=f7"                                              p_exists    0                                                                      
     get      review the deps linked list links    DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       review all cell connections                                                                                                                                                                                     
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0g6,0g7,0k11,                           
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 2) ,0g6,0g7,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0f7"                                     s_equal     s_dep requires   : 0f7   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0f7"                                     s_equal     s_dep provides   : 0f7   ( 2) ,0g7,0h8,                                
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,root,                                   
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 2) ,0f6,0f7,                                
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,root,                                   
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0h8"                                     s_equal     s_dep requires   : 0h8   ( 1) ,0f7,                                    
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0h8"                                     s_equal     s_dep provides   : 0h8   ( 1) ,0k11,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0k11"                                    s_equal     s_dep requires   : 0k11  ( 1) ,0h8,                                    
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0k11"                                    s_equal     s_dep provides   : 0k11  ( 1) ,root,                                   

   COND       verify program teardown purges                                                                                                                                                                                  
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the linked list               DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the link counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      




#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SECT          cell formula conversion from infix to rpn                                                                                                                                                                         



#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)===================================  ====(return var)==== 
SCRP          (s_calc) basic arithmetic [ 7] +, -, *, /, %, --, ++         CELL_change, RPN_convert, CELL_interpret, CALC_build, CALC_eval                                                                                      

   COND       verify program setup                                                                                                                                                                                  
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                                                                                                                                                          
     code     create a custom expect string        char custom[2000];                                                                                                                                               
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                            
#    code     turn on debug                        debug.calc = 'y';                                                                                                                                                

   COND       add first cell                                                                                                                                                                                        
     exec     add a cell                           CELL__create          0, 10, 10                                                     p_exists    0                                                            
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                             
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");                                                                                                
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0         

   COND       basic formula                                                                                                                                                                                         
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=30*30"                                           p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   6, "=30*30");                                                                                             
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         900.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  3) =,30,30,*                           

   COND       change source to a number                                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "42"                                               p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   2, "42");                                                                                                 
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          42.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  0) (null)                              

   COND       basic formula with more steps                                                                                                                                                                         
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=30*30*2+5"                                       p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  10, "=30*30*2+5");                                                                                         
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  7 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        1805.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  7) =,30,30,*,2,*,5,+                   

   COND       change source to a number                                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "42"                                               p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   2, "42");                                                                                                 
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          42.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  0) (null)                              

   COND       basic formula with more steps                                                                                                                                                                         
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=30*30*2+5"                                       p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  10, "=30*30*2+5");                                                                                         
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  7 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        1805.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  7) =,30,30,*,2,*,5,+                   

   COND       basic formula needing presedence                                                                                                                                                                      
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=30*30+2*5"                                       p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  10, "=30*30+2*5");                                                                                         
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  7 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         910.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  7) =,30,30,*,2,5,*,+                   

   COND       use parens to change presedence                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=30*30*(2+5)"                                     p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  12, "=30*30*(2+5)");                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  7 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        6300.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  7) =,30,30,*,2,5,+,*                   

   COND       addition and subtraction are equal (tricky)                                                                                                                                                           
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=10-3+2"                                          p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   7, "=10-3+2");                                                                                            
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           9.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  5) =,10,3,-,2,+                        

   COND       addition and multipication order (subtle)                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=1+2*3"                                           p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   6, "=1+2*3");                                                                                             
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           7.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  5) =,1,2,3,*,+                         

   COND       multiplcation and addition                                                                                                                                                                            
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=2+3*4"                                           p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   6, "=2+3*4");                                                                                             
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          14.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  5) =,2,3,4,*,+                         

   COND       multiplcation and addition (order change)                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=3*4+2"                                           p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   6, "=3*4+2");                                                                                             
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          14.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  5) =,3,4,*,2,+                         

   COND       multiplcation and addition (with parens)                                                                                                                                                              
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=(2+3)*4"                                         p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   8, "=(2+3)*4");                                                                                           
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          20.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  5) =,2,3,+,4,*                         

   COND       combination                                                                                                                                                                                           
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=4+5*6/3"                                         p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   8, "=4+5*6/3");                                                                                           
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  7 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          14.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  7) =,4,5,6,*,3,/,+                     

   COND       modulus (integer)                                                                                                                                                                                     
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=5%3"                                             p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   4, "=5%3");                                                                                               
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           2.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  3) =,5,3,%                             

   COND       increment                                                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=++5"                                             p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   4, "=++5");                                                                                               
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  2 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           6.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  2) =,5,++                              

   COND       decrement                                                                                                                                                                                             
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=--5"                                             p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   4, "=--5");                                                                                               
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  2 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           4.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  2) =,5,--                              

   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_calc) basic logical    [ 3] &&, ||, !                     CELL_change, RPN_convert, CELL_interpret, CALC_build, CALC_eval                                                                                      

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)              
     get      review the deps links count          DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       setup some testing variables                                                                                                                                                                          
     code     create a custom expect string        char custom[2000];                                                                                                                                               
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                            

   COND       add first cell                                                                                                                                                                                        
     exec     add a cell                           CELL__create          0, 10, 10                                                        p_exists    0                                                            
     code     save cell pointer                    x_one  = yUNIT_p_rc;
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");       
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0         

   COND       basic AND (1 vs 1)                                                                                                                                                                                    
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "=1&&1"                                               p_exists    0                                                            
     code     create a custom expect string        sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=1&&1");
     get      check the cell's source string       unit_accessor         "cell_source",   x_one                                        s_equal     [[ CUSTOM ]]                                                 
     get      check the cell's information         unit_accessor         "cell_info",     x_one                                        s_equal     Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           1.000000                        
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_one                                        s_equal     Cell RPN         : (  3) =,1,1,&&                            

COND     basic AND (1 vs 0)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=1&&0"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=1&&0");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,1,0,&&                       

COND     basic AND (0 vs 1)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=0&&1"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=0&&1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,0,1,&&                       

COND     basic AND (0 vs 0)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=0&&0"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=0&&0");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,0,0,&&                       

COND     basic OR  (1 vs 1)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=1||1"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=1||1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           1.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,1,1,||                       

COND     basic OR  (1 vs 0)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=1||0"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=1||0");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           1.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,1,0,||                       

COND     basic OR  (0 vs 1)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=0||1"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=0||1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           1.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,0,1,||                       

COND     basic OR  (0 vs 0)                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=0||0"                                          p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   5, "=0||0");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  3 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  3) =,0,0,||                       

COND     basic NOT (0)                                                      
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=!0"                                            p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   3, "=!0");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  2 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           1.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  2) =,0,!                          

COND     basic NOT (1)                                                      
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=!1"                                            p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   3, "=!1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  2 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  2) =,1,!                          

COND     ANDs before ORs                                                    
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=1&&0||1"                                       p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   8, "=1&&0||1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           1.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  5) =,1,0,&&,1,||                  

COND     ANDs before ORs                                                    
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=1||0&&1"                                       p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   8, "=1||0&&1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  5 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           1.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  5) =,1,0,1,&&,||                  

COND     NOTs before both                                                   
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=!1||0&&1"                                      p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   9, "=!1||0&&1");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  6 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  6) =,1,!,0,1,&&,||                

COND     parens to override                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=!(1||(0&&1))"                                    p_exists   0                                                     
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  13, "=!(1||(0&&1))");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  6 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  6) =,1,0,1,&&,||,!                

COND     parens to override                                                 
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=!((1||0)&&1)"                                    p_exists   0                                                     
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  13, "=!((1||0)&&1)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  6 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  6) =,1,0,||,1,&&,!                

COND     use the IF statement (TRUE)                                        
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=if(1&&1,20,50)"                                  p_exists   0                                                     
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  15, "=if(1&&1,20,50)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  6 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :          20.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  6) =,1,1,&&,20,50,if              

COND     use the IF statement (FALSE)                                       
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=if(1&&0,20,50)"                                  p_exists   0                                                     
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  15, "=if(1&&0,20,50)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c=  6 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :          50.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : (  6) =,1,0,&&,20,50,if              

COND     use the IF statement (NESTED)                                      
  exec   change the source string               CELL_change                CHG_INPUT,  0, 10, 10, "=if(1&&0,20,if(1||0,50,10))"                    p_exists   0                                                     
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  27, "=if(1&&0,20,if(1||0,50,10))");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=f f=? d=0 a=> c= 11 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :          50.000000                   
  get    check the cell's RPN version           unit_accessor              "cell_rpn",      x_one                                   s_equal    Cell RPN         : ( 11) =,1,0,&&,20,1,0,||,50,10,if,if 

   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_calc) basic relational [ 6] ==, <, >, <=, >=, !=          CELL_change, RPN_convert, CELL_interpret, CALC_build, CALC_eval                                                                                      

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps links count          DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                      
     code     create a pointer to another cell     tCELL *x_two  = NULL;                                                                                                                                                      
     code     create a pointer to a third cell     tCELL *x_thr  = NULL;                                                                                                                                                      
     code     create a pointer to a fourth cell    tCELL *x_fou  = NULL;                                                                                                                                                      
     code     create a pointer to a fifth cell     tCELL *x_fif  = NULL;                                                                                                                                                      

   COND       change environment                                                                                                                                                                                              
     code     modify debugging                     debug.calc = 'n';                                                                                                                                                          

   COND       change to three worksheets                                                                                                                                                                                      
     code     modify a variable                    my.ntab = 5;                                                                                                                                                               

   COND       add first cell                                                                                                                                                                                                  
     exec     change the source string             CELL_change           CHG_INPUT, 0, 10, 10, "20.156"                                           p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;

   COND       add second cell                                                                                                                                                                                                 
     exec     change the source string             CELL_change           CHG_INPUT, 1, 10, 10, "20.158"                                           p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;

   COND       add third cell                                                                                                                                                                                                  
     exec     change the source string             CELL_change           CHG_INPUT, 2, 10, 10, "20.159"                                           p_exists    0                                                                      
     code     save cell pointer                    x_thr  = yUNIT_p_rc;

   COND       add fourth cell                                                                                                                                                                                                 
     exec     change the source string             CELL_change           CHG_INPUT, 3, 10, 10, "20.158"                                           p_exists    0                                                                      
     code     save cell pointer                    x_fou  = yUNIT_p_rc;

   COND       review cell list                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   5, num=   4, fore=   4, back=   4            
     code     create a custome expect string       sprintf(CUSTOM, "Cell Linked List : n=   4, h=%9p, t=%9p", x_one , x_fou );                                                                                                
     get      review the cell linked list          unit_accessor         "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       equality (==) when a <  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 0k11 == 1k11)"                                p_exists    0                                                                      
     code     save cell pointer                    x_fif  = yUNIT_p_rc;
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,0k11,1k11,==                                

   COND       review cell list                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   6, num=   5, fore=   5, back=   5            
     code     create a custome expect string       sprintf(CUSTOM, "Cell Linked List : n=   5, h=%9p, t=%9p", x_one , x_fif );                                                                                                
     get      review the cell linked list          unit_accessor         "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       equality (==) when a >  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 2k11 == 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,2k11,1k11,==                                

   COND       equality (==) when a == b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 3k11 == 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,3k11,1k11,==                                

   COND       lesser   (< ) when a <  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 0k11 <  1k11)"                                p_exists    0                                                                      
     code     save cell pointer                    x_fif  = yUNIT_p_rc;
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,0k11,1k11,<                                 

   COND       lesser   (< ) when a >  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 2k11 <  1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,2k11,1k11,<                                 

   COND       lesser   (< ) when a == b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 3k11 <  1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,3k11,1k11,<                                 

   COND       less eq  (<=) when a <  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 0k11 <= 1k11)"                                p_exists    0                                                                      
     code     save cell pointer                    x_fif  = yUNIT_p_rc;
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,0k11,1k11,<=                                

   COND       less eq  (<=) when a >  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 2k11 <= 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,2k11,1k11,<=                                

   COND       less eq  (<=) when a == b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 3k11 <= 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,3k11,1k11,<=                                

   COND       greater  (> ) when a <  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 0k11 >  1k11)"                                p_exists    0                                                                      
     code     save cell pointer                    x_fif  = yUNIT_p_rc;
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,0k11,1k11,>                                 

   COND       greater  (> ) when a >  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 2k11 >  1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,2k11,1k11,>                                 

   COND       greater  (> ) when a == b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 3k11 >  1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,3k11,1k11,>                                 

   COND       great eq (>=) when a <  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 0k11 >= 1k11)"                                p_exists    0                                                                      
     code     save cell pointer                    x_fif  = yUNIT_p_rc;
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,0k11,1k11,>=                                

   COND       great eq (>=) when a >  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 2k11 >= 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,2k11,1k11,>=                                

   COND       great eq (>=) when a == b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 3k11 >= 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,3k11,1k11,>=                                

   COND       not eq   (!=) when a <  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 0k11 != 1k11)"                                p_exists    0                                                                      
     code     save cell pointer                    x_fif  = yUNIT_p_rc;
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,0k11,1k11,!=                                

   COND       not eq   (!=) when a >  b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 2k11 != 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           1.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,2k11,1k11,!=                                

   COND       not eq   (!=) when a == b                                                                                                                                                                                       
     exec     change the source string             CELL_change           CHG_INPUT, 4, 10, 10, "= ( 3k11 != 1k11)"                                p_exists    0                                                                      
     get      check the cell's value               unit_accessor         "cell_value",    x_fif                                        s_equal     Cell Value       :           0.000000                                  
     get      check the cell's RPN version         unit_accessor         "cell_rpn",      x_fif                                        s_equal     Cell RPN         : (  3) =,3k11,1k11,!=                                

   COND       review cell list                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   6, num=   5, fore=   5, back=   5            
     code     create a custome expect string       sprintf(CUSTOM, "Cell Linked List : n=   5, h=%9p, t=%9p", x_one , x_fif );                                                                                                
     get      review the cell linked list          unit_accessor         "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_calc) basic trig       [19] sin, cos, tan, deg, rad, ...  CELL_change, RPN_convert, CELL_interpret, CALC_build, CALC_eval                                                                                      

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps links count          DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       setup environment and test variables                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     modify debugging                     debug.calc = 'n';                                                                                                                                                          
     code     modify a variable                    my.ntab = 5;                                                                                                                                                               

   COND       add the source cell and formulas                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "0"                                                p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  5, "=sin(0f6)"                                        p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0g6"                                      s_equal     s_celln rpn      : (   2) =,0f6,sin                                    
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  6, "=cos(0f6)"                                        p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0g7"                                      s_equal     s_celln rpn      : (   2) =,0f6,cos                                    
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  7, "=tan(0f6)"                                        p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0g8"                                      s_equal     s_celln rpn      : (   2) =,0f6,tan                                    
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  8, "=asin(0g6)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0g9"                                      s_equal     s_celln rpn      : (   2) =,0g6,asin                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6,  9, "=acos(0g7)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0g10"                                     s_equal     s_celln rpn      : (   2) =,0g7,acos                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  6, 10, "=atan(0g8)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0g11"                                     s_equal     s_celln rpn      : (   2) =,0g8,atan                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  7,  5, "=rad(0f6)"                                        p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0h6"                                      s_equal     s_celln rpn      : (   2) =,0f6,rad                                    
     exec     change the source string             CELL_change           CHG_INPUT, 0,  8,  5, "=sinr(0h6)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0i6"                                      s_equal     s_celln rpn      : (   2) =,0h6,sinr                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  8,  6, "=cosr(0h6)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0i7"                                      s_equal     s_celln rpn      : (   2) =,0h6,cosr                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  8,  7, "=tanr(0h6)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0i8"                                      s_equal     s_celln rpn      : (   2) =,0h6,tanr                                   
     exec     change the source string             CELL_change           CHG_INPUT, 0,  8,  8, "=asinr(0i6)"                                      p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0i9"                                      s_equal     s_celln rpn      : (   2) =,0i6,asinr                                  
     exec     change the source string             CELL_change           CHG_INPUT, 0,  8,  9, "=acosr(0i7)"                                      p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0i10"                                     s_equal     s_celln rpn      : (   2) =,0i7,acosr                                  
     exec     change the source string             CELL_change           CHG_INPUT, 0,  8, 10, "=atanr(0i8)"                                      p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0i11"                                     s_equal     s_celln rpn      : (   2) =,0i8,atanr                                  
     exec     change the source string             CELL_change           CHG_INPUT, 0,  9,  5, "=deg (0h6)"                                       p_exists    0                                                                      
     get      check the cell's RPN version         CELL__unitnew         "cell_rpn"       , "0j6"                                      s_equal     s_celln rpn      : (   2) =,0h6,deg                                    

   COND       review dependencies                                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 7) ,0g9,0g10,0g11,0i9,0i10,0i11,0j6,        
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 0f6              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 0) .                                        
     get      review the provides 0f6              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 4) ,0g6,0g7,0g8,0h6,                        
     get      review the requires 0g6              DEP_unit              "cell_requires"  ,  "0g6"                                     s_equal     s_dep requires   : 0g6   ( 1) ,0f6,                                    
     get      review the provides 0g6              DEP_unit              "cell_provides"  ,  "0g6"                                     s_equal     s_dep provides   : 0g6   ( 1) ,0g9,                                    
     get      review the requires 0g7              DEP_unit              "cell_requires"  ,  "0g7"                                     s_equal     s_dep requires   : 0g7   ( 1) ,0f6,                                    
     get      review the provides 0g7              DEP_unit              "cell_provides"  ,  "0g7"                                     s_equal     s_dep provides   : 0g7   ( 1) ,0g10,                                   
     get      review the requires 0g8              DEP_unit              "cell_requires"  ,  "0g8"                                     s_equal     s_dep requires   : 0g8   ( 1) ,0f6,                                    
     get      review the provides 0g8              DEP_unit              "cell_provides"  ,  "0g8"                                     s_equal     s_dep provides   : 0g8   ( 1) ,0g11,                                   
     get      review the requires 0g9              DEP_unit              "cell_requires"  ,  "0g9"                                     s_equal     s_dep requires   : 0g9   ( 1) ,0g6,                                    
     get      review the provides 0g9              DEP_unit              "cell_provides"  ,  "0g9"                                     s_equal     s_dep provides   : 0g9   ( 1) ,root,                                   
     get      review the requires 0g10             DEP_unit              "cell_requires"  ,  "0g10"                                    s_equal     s_dep requires   : 0g10  ( 1) ,0g7,                                    
     get      review the provides 0g10             DEP_unit              "cell_provides"  ,  "0g10"                                    s_equal     s_dep provides   : 0g10  ( 1) ,root,                                   
     get      review the requires 0g11             DEP_unit              "cell_requires"  ,  "0g11"                                    s_equal     s_dep requires   : 0g11  ( 1) ,0g8,                                    
     get      review the provides 0g11             DEP_unit              "cell_provides"  ,  "0g11"                                    s_equal     s_dep provides   : 0g11  ( 1) ,root,                                   
     get      review the requires 0h6              DEP_unit              "cell_requires"  ,  "0h6"                                     s_equal     s_dep requires   : 0h6   ( 1) ,0f6,                                    
     get      review the provides 0h6              DEP_unit              "cell_provides"  ,  "0h6"                                     s_equal     s_dep provides   : 0h6   ( 4) ,0i6,0i7,0i8,0j6,                        
     get      review the requires 0i6              DEP_unit              "cell_requires"  ,  "0i6"                                     s_equal     s_dep requires   : 0i6   ( 1) ,0h6,                                    
     get      review the provides 0i6              DEP_unit              "cell_provides"  ,  "0i6"                                     s_equal     s_dep provides   : 0i6   ( 1) ,0i9,                                    
     get      review the requires 0i7              DEP_unit              "cell_requires"  ,  "0i7"                                     s_equal     s_dep requires   : 0i7   ( 1) ,0h6,                                    
     get      review the provides 0i7              DEP_unit              "cell_provides"  ,  "0i7"                                     s_equal     s_dep provides   : 0i7   ( 1) ,0i10,                                   
     get      review the requires 0i8              DEP_unit              "cell_requires"  ,  "0i8"                                     s_equal     s_dep requires   : 0i8   ( 1) ,0h6,                                    
     get      review the provides 0i8              DEP_unit              "cell_provides"  ,  "0i8"                                     s_equal     s_dep provides   : 0i8   ( 1) ,0i11,                                   
     get      review the requires 0i9              DEP_unit              "cell_requires"  ,  "0i9"                                     s_equal     s_dep requires   : 0i9   ( 1) ,0i6,                                    
     get      review the provides 0i9              DEP_unit              "cell_provides"  ,  "0i9"                                     s_equal     s_dep provides   : 0i9   ( 1) ,root,                                   
     get      review the requires 0i10             DEP_unit              "cell_requires"  ,  "0i10"                                    s_equal     s_dep requires   : 0i10  ( 1) ,0i7,                                    
     get      review the provides 0i10             DEP_unit              "cell_provides"  ,  "0i10"                                    s_equal     s_dep provides   : 0i10  ( 1) ,root,                                   
     get      review the requires 0i11             DEP_unit              "cell_requires"  ,  "0i11"                                    s_equal     s_dep requires   : 0i11  ( 1) ,0i8,                                    
     get      review the provides 0i11             DEP_unit              "cell_provides"  ,  "0i11"                                    s_equal     s_dep provides   : 0i11  ( 1) ,root,                                   
     get      review the requires 0j6              DEP_unit              "cell_requires"  ,  "0j6"                                     s_equal     s_dep requires   : 0j6   ( 1) ,0h6,                                    
     get      review the provides 0j6              DEP_unit              "cell_provides"  ,  "0j6"                                     s_equal     s_dep provides   : 0j6   ( 1) ,root,                                   

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+0"                                               p_exists    0                                                                      
#    ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :           0.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/1   s_celln value    :           0.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/1   s_celln value    :           0.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/1   s_celln value    :           0.000000                                  
     get      check the arctangent in radians      CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           0.000000                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :           0.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+15"                                              p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          15.000000                                  
#    ####       degrees
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.258819                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.965926                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.267949                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/1   s_celln value    :          15.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/1   s_celln value    :          15.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/1   s_celln value    :          15.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.261799                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.258819                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.965926                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.267949                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/1   s_celln value    :           0.261799                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/1   s_celln value    :           0.261799                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           0.261799                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          15.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+30"                                              p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          30.000000                                  
#    ####       degrees
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.500000                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.866025                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.577350                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/1   s_celln value    :          30.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/1   s_celln value    :          30.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/1   s_celln value    :          30.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.523599                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.500000                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.866025                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.577350                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/1   s_celln value    :           0.523599                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/1   s_celln value    :           0.523599                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           0.523599                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          30.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+45"                                              p_exists    0                                                                      
#    ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          45.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/1   s_celln value    :          45.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/1   s_celln value    :          45.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/1   s_celln value    :          45.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.785398                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/1   s_celln value    :           0.785398                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/1   s_celln value    :           0.785398                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           0.785398                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          45.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+60"                                              p_exists    0                                                                      
#    ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          60.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.866025                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.500000                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           1.732051                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/1   s_celln value    :          60.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/1   s_celln value    :          60.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/1   s_celln value    :          60.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           1.047198                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.866025                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.500000                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           1.732051                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/1   s_celln value    :           1.047198                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/1   s_celln value    :           1.047198                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           1.047198                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          60.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+75"                                              p_exists    0                                                                      
#    ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          75.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.965926                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.258819                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           3.732051                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/1   s_celln value    :          75.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/1   s_celln value    :          75.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/1   s_celln value    :          75.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           1.308997                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.965926                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.258819                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           3.732051                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/1   s_celln value    :           1.308997                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/1   s_celln value    :           1.308997                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           1.308997                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          75.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+90"                                              p_exists    0                                                                      
#    ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          90.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.000000                                  
#     set      v21  turn debugging on                    yVAR_debug            'y'                                                                                                   i_equal     0                                                                      
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :          90.000000                                  
#     set      v21  turn debugging off                   yVAR_debug            '-'                                                                                                   i_equal     0                                                                      
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          90.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :           0.000000                                  
#    ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           1.570796                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/5   s_celln value    :           0.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           1.570796                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           1.570796                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/1   s_celln value    :           0.000000                                  
#    ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          90.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+105"                                             p_exists    0                                                                      
#    ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         105.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.965926                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.258819                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -3.732051                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/3   s_celln value    :          75.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/3   s_celln value    :         105.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/3   s_celln value    :         -75.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           1.832596                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.965926                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.258819                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -3.732051                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/3   s_celln value    :           1.308997                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/3   s_celln value    :           1.832596                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/3   s_celln value    :          -1.308997                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         105.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+120"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         120.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.866025                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.500000                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -1.732051                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/3   s_celln value    :          60.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/3   s_celln value    :         120.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/3   s_celln value    :         -60.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           2.094395                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.866025                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.500000                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -1.732051                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/3   s_celln value    :           1.047198                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/3   s_celln value    :           2.094395                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/3   s_celln value    :          -1.047198                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         120.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+135"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         135.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.707107                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/3   s_celln value    :          45.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/3   s_celln value    :         135.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/3   s_celln value    :         -45.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           2.356194                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.707107                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/3   s_celln value    :           0.785398                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/3   s_celln value    :           2.356194                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/3   s_celln value    :          -0.785398                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         135.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+150"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         150.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.500000                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.866025                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -0.577350                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/3   s_celln value    :          30.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/3   s_celln value    :         150.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/3   s_celln value    :         -30.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           2.617994                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.500000                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.866025                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -0.577350                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/3   s_celln value    :           0.523599                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/3   s_celln value    :           2.617994                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/3   s_celln value    :          -0.523599                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         150.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+165"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         165.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.258819                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.965926                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -0.267949                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :          15.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :         165.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :         -15.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           2.879793                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.258819                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.965926                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -0.267949                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           0.261799                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           2.879793                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :          -0.261799                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         165.000000                                  

   COND       add the degree/radians cell with simple value                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+180"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         180.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :           0.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :         180.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          -0.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           3.141593                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           0.000000                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           3.141593                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.000000                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         180.000000                                  

   COND       try a negative degree                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "-45"                                              p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         -45.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :          -0.707107                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :         -45.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          45.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :         -45.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :          -0.785398                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :          -0.707107                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :          -0.785398                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           0.785398                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :          -0.785398                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         -45.000000                                  

   COND       try a negative degree                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "-405"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :        -405.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :          -0.707107                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :         -45.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          45.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :         -45.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :          -7.068583                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :          -0.707107                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :          -1.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :          -0.785398                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           0.785398                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :          -0.785398                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :        -405.000000                                  

   COND       try a negative degree                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+405"                                             p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         405.000000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :          45.000000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          45.000000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          45.000000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           7.068583                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.707107                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           1.000000                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           0.785398                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           0.785398                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.785398                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         405.000000                                  

   COND       try with a decimal place                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+10.4"                                            p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          10.400000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.180519                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.983571                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.183534                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :          10.400000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          10.400000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          10.400000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.181514                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.180519                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.983571                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.183534                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           0.181514                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           0.181514                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.181514                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          10.400000                                  

   COND       try with two decimal places (round down)                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+10.43"                                           p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          10.430000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.180519                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.983571                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.183534                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :          10.400000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          10.400000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          10.400000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.182038                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.180519                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.983571                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.183534                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           0.181514                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           0.181514                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.181514                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          10.430000                                  

   COND       try with two decimal places (round up)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+10.37"                                           p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          10.370000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :           0.180519                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :           0.983571                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.183534                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :          10.400000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :          10.400000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          10.400000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           0.180991                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :           0.180519                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :           0.983571                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.183534                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :           0.181514                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           0.181514                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.181514                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :          10.370000                                  

   COND       try with another single decimal place                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "+198.6"                                           p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         198.600000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :          -0.318959                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.947768                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.336537                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :         -18.600000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :         161.400000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          18.600000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :           3.466224                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :          -0.318959                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.947768                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.336537                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :          -0.324631                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           2.816961                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.324631                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :         198.600000                                  

   COND       try with a single decimal place thats negative               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "-156.8"                                           p_exists    0                                                                      
     ####       degrees
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :        -156.800000                                  
     get      check the sine                       CELL__unitnew         "cell_value"     , "0g6"                                      u_round/1   s_celln value    :          -0.393942                                  
     get      check the cosine                     CELL__unitnew         "cell_value"     , "0g7"                                      u_round/1   s_celln value    :          -0.919135                                  
     get      check the tangent                    CELL__unitnew         "cell_value"     , "0g8"                                      u_round/1   s_celln value    :           0.428601                                  
     get      check the arcsine                    CELL__unitnew         "cell_value"     , "0g9"                                      u_round/5   s_celln value    :         -23.200000                                  
     get      check the arccosine                  CELL__unitnew         "cell_value"     , "0g10"                                     u_round/5   s_celln value    :         156.800000                                  
     get      check the arctangent                 CELL__unitnew         "cell_value"     , "0g11"                                     u_round/5   s_celln value    :          23.200000                                  
     ####       radians
     get      check the conversion to radians      CELL__unitnew         "cell_value"     , "0h6"                                      u_round/1   s_celln value    :          -2.736676                                  
     get      check the sine of radians            CELL__unitnew         "cell_value"     , "0i6"                                      u_round/1   s_celln value    :          -0.393942                                  
     get      check the cosine of radians          CELL__unitnew         "cell_value"     , "0i7"                                      u_round/1   s_celln value    :          -0.919135                                  
     get      check the tangent of radians         CELL__unitnew         "cell_value"     , "0i8"                                      u_round/1   s_celln value    :           0.428601                                  
     get      check the arcsine in radians         CELL__unitnew         "cell_value"     , "0i9"                                      u_round/5   s_celln value    :          -0.404916                                  
     get      check the arccosine in radians       CELL__unitnew         "cell_value"     , "0i10"                                     u_round/5   s_celln value    :           2.736676                                  
     get      check the artangent in radians       CELL__unitnew         "cell_value"     , "0i11"                                     u_round/5   s_celln value    :           0.404916                                  
     ####       back to degrees
     get      check the conversion back to degs    CELL__unitnew         "cell_value"     , "0j6"                                      s_equal     s_celln value    :        -156.800000                                  

   COND       retrieve the constant for PI                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=pi()"                                            p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :           3.141593                                  

   COND       work a hypotenuse calculation                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=hypot(12,5)"                                     p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          13.000000                                  

   COND       work a hypotenuse calculation                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=hypot(14,48)"                                    p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          50.000000                                  

   COND       work a hypotenuse calculation                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=hypot(6,8)"                                      p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          10.000000                                  

   COND       work a hypotenuse calculation                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=hypot(3,4)"                                      p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :           5.000000                                  

   COND       work a hypotenuse calculation                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=hypot(7,8)"                                      p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          10.630146                                  

   COND       work a hypotenuse calculation                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=hypot(4,3.5)"                                    p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :           5.315073                                  

   COND       work a side calculation                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=side(13,12)"                                     p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :           5.000000                                  

   COND       work a side calculation                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=side(13,5)"                                      p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          12.000000                                  

   COND       work a side calculation                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=side(50,48)"                                     p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  

   COND       work a side calculation                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT, 0,  5,  5, "=side(50,14)"                                     p_exists    0                                                                      
     get      check the degree value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          48.000000                                  

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SECT          range selection                                                                                                                                                                                                   



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_sel ) set range selections directly from functions        SEL_clear, SEL_start, SEL_increase, SEL_islive, SEL_set                                                                                                                      

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       change to three worksheets                                                                                                                                                                                      
     code     modify a variable                    my.ntab =  3;                                                                                                                                                              

   COND       setup initial vertical values                               
     code     number of rows                       tabs[0].nrow      =  40;
     code     number of rows                       tabs[1].nrow      =  40;
     code     number of rows                       tabs[2].nrow      =  40;

   COND       setup initial horizonal values                              
     code     number of cols                       tabs[0].ncol      =  20;
     code     number of cols                       tabs[1].ncol      =  20;
     code     number of cols                       tabs[2].ncol      =  20;

   COND       check selection initialization                                                                                                                                                                                  
     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range selection in CUM mode                                                                                                                                                                               
     exec     call the selection                   SEL_start                0,    5,    5, SEL_CUM                                     i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to lower right                                                                                                                                                                         
     exec     call the selection                   SEL_increase             0,    7,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       reselect existing cells in middle                                                                                                                                                                               
     exec     call the selection                   SEL_increase             0,    6,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to the left                                                                                                                                                                            
     exec     call the selection                   SEL_increase             0,    3,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   5, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection upward                                                                                                                                                                                 
     exec     call the selection                   SEL_increase             0,    6,    2                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   2, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       reselect existing cells in middle again                                                                                                                                                                         
     exec     call the selection                   SEL_increase             0,    4,    5                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   2, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to the right again                                                                                                                                                                     
     exec     call the selection                   SEL_increase             0,   15,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   2, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection across tabs                                                                                                                                                                           
     exec     call the selection                   SEL_increase             1,    0,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   2, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection before first column                                                                                                                                                                   
     exec     call the selection                   SEL_increase             0,   -1,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   2, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection before first row                                                                                                                                                                      
     exec     call the selection                   SEL_increase             0,    0,   -1                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   2, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue selection to origin                                                                                                                                                                                    
     exec     call the selection                   SEL_increase             0,    0,    0                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   0, br=   0, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection past last column                                                                                                                                                                      
     exec     call the selection                   SEL_increase             0,   25,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   0, br=   0, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection past last row                                                                                                                                                                         
     exec     call the selection                   SEL_increase             0,    0,   45                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   0, br=   0, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection to a bad tab                                                                                                                                                                          
     exec     call the selection                   SEL_increase             6,    0,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   0, br=   0, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       check selection initialization, again                                                                                                                                                                           
     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range selection in FROM mode                                                                                                                                                                              
     exec     call the selection                   SEL_start                1,    5,    5, SEL_FROM                                    i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to lower right                                                                                                                                                                         
     exec     call the selection                   SEL_increase             1,    7,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       reselect existing cells in middle                                                                                                                                                                               
     exec     call the selection                   SEL_increase             1,    6,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=   6, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to the left                                                                                                                                                                            
     exec     call the selection                   SEL_increase             1,    3,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   3, br=   5, ec=   5, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection upward                                                                                                                                                                                 
     exec     call the selection                   SEL_increase             1,    6,    2                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   2, ec=   6, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       reselect existing cells in middle again                                                                                                                                                                         
     exec     call the selection                   SEL_increase             1,    4,    5                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   4, br=   5, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to the right again                                                                                                                                                                     
     exec     call the selection                   SEL_increase             1,   15,    6                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection across tabs                                                                                                                                                                           
     exec     call the selection                   SEL_increase             2,    0,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection before first column                                                                                                                                                                   
     exec     call the selection                   SEL_increase             1,   -1,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection before first row                                                                                                                                                                      
     exec     call the selection                   SEL_increase             1,    0,   -1                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   5, br=   5, ec=  15, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue selection to origin                                                                                                                                                                                    
     exec     call the selection                   SEL_increase             1,    0,    0                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   0, br=   0, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection past last column                                                                                                                                                                      
     exec     call the selection                   SEL_increase             1,   25,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   0, br=   0, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection past last row                                                                                                                                                                         
     exec     call the selection                   SEL_increase             1,    0,   45                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   0, br=   0, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       try to continue selection to a bad tab                                                                                                                                                                          
     exec     call the selection                   SEL_increase             6,    0,    0                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   1, bc=   0, br=   0, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       check selection initialization, again                                                                                                                                                                           
     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       try to increase selection without starting                                                                                                                                                                      
     exec     call the selection                   SEL_increase             0,    2,   10                                              i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       use the full range selection                                                                                                                                                                                    
     exec     call the selection                   SEL_set                  0,    2,   10,   15,   15                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   2, br=  10, ec=  15, er=  15      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       use the full range selection on second tab                                                                                                                                                                      
     exec     call the selection                   SEL_set                  1,   15,   17,   19,   18                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   1, bc=  15, br=  17, ec=  19, er=  18      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       use the full range selection on bad tab                                                                                                                                                                         
     exec     call the selection                   SEL_set                  5,   15,   17,   19,   18                                  i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       use the full range selection with ending too large                                                                                                                                                              
     exec     call the selection                   SEL_set                  0,   15,   17,   60,   18                                  i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       use the full range selection with beginning too small                                                                                                                                                           
     exec     call the selection                   SEL_set                  0,   -1,   17,   19,   18                                  i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       use the full range selection with ending before beginning                                                                                                                                                       
     exec     call the selection                   SEL_set                  0,   19,   18,   15,   17                                  i_lesser    0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       use the full range selection on single cell                                                                                                                                                                     
     exec     call the selection                   SEL_set                  0,    1,    1,    1,    1                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   1, br=   1, ec=   1, er=   1      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_sel ) validate whether cells are in current selection     SEL_selected                                                                                                                                                                 

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       change to three worksheets                                                                                                                                                                                      
     code     modify a variable                    my.ntab =  3;                                                                                                                                                              

   COND       setup initial vertical values                               
     code     number of rows                       tabs[0].nrow      =  40;
     code     number of rows                       tabs[1].nrow      =  40;
     code     number of rows                       tabs[2].nrow      =  40;

   COND       setup initial horizonal values                              
     code     number of cols                       tabs[0].ncol      =  20;
     code     number of cols                       tabs[1].ncol      =  20;
     code     number of cols                       tabs[2].ncol      =  20;

   COND       check selection initialization                                                                                                                                                                                  
     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range selection in FROM mode                                                                                                                                                                              
     exec     call the selection                   SEL_start                0,    5,    5, SEL_FROM                                    i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   0, bc=   5, br=   5, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection                                                                                                                                                                                        
     exec     call the selection                   SEL_increase             0,   10,   15                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       test a square pattern on the selection                                                                                                                                                                          
     exec     call the selection test              SEL_selected             0,    0,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,    5                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    5,   10                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    5,   15                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    5,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,    5                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,   10,   10                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,   10,   15                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,   10,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   20                                              i_equal     0                                                                      

   COND       test middle on other tabs                                                                                                                                                                                       
     exec     call the selection test              SEL_selected            -1,    7,    7                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    7,    7                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             1,    7,    7                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             2,    7,    7                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             3,    7,    7                                              i_equal     0                                                                      

   COND       modify range selection                                                                                                                                                                                          
     exec     call the selection                   SEL_increase             0,    0,    0                                              i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : f, ta=   0, bc=   0, br=   0, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       test a square pattern on the selection                                                                                                                                                                          
     exec     call the selection test              SEL_selected             0,    0,    0                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    0,    5                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    0,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,    0                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    5,    5                                              i_equal     1                                                                      
     exec     call the selection test              SEL_selected             0,    5,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   20                                              i_equal     0                                                                      

   COND       turn off range selection                                                                                                                                                                                        
     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       test a square pattern on the selection                                                                                                                                                                          
     exec     call the selection test              SEL_selected             0,    0,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    0,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,    5,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   10,   20                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,    0                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,    5                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   10                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   15                                              i_equal     0                                                                      
     exec     call the selection test              SEL_selected             0,   15,   20                                              i_equal     0                                                                      

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_sel ) range selection retrieval for range functions       SEL_first, SEL_next, SEL_range                                                                                                                                               

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       change to three worksheets                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab =  3;                                                                                                                                                                
     code     number of rows                       tabs[0].nrow      =  40;                                                                                                                                                     
     code     number of rows                       tabs[1].nrow      =  40;                                                                                                                                                     
     code     number of rows                       tabs[1].nrow      =  40;                                                                                                                                                     
     code     current row                          tabs[0].crow      =   0;                                                                                                                                                     
     code     number of cols                       tabs[0].ncol      =  40;                                                                                                                                                     
     code     number of cols                       tabs[1].ncol      =  40;                                                                                                                                                     
     code     number of cols                       tabs[2].ncol      =  40;                                                                                                                                                     
     code     current cols                         tabs[0].ccol      =   0;                                                                                                                                                     

   COND       setup some testing variables                                 ------------------------------------------------------------   ------------------------------------------------------------------------------------  
     code     create a custom expect string        char custom[2000];                                                                                                                                                           
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_two  = NULL;                                                                                                                                                        
     code     create a pointer to a third          tCELL *x_thr  = NULL;                                                                                                                                                        
     code     create a pointer to temp cell        tCELL *x_temp = NULL;                                                                                                                                                        
     code     create a tab variable                int    xtab  = 0;                                                                                                                                                            
     code     create a col variable                int    xcol  = 0;                                                                                                                                                            
     code     create a row variable                int    xrow  = 0;                                                                                                                                                            
     code     create a col variable for end        int    xcol2 = 0;                                                                                                                                                            
     code     create a row variable for end        int    xrow2 = 0;                                                                                                                                                            

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0,  5,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one , x_one );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       add second cell                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create          0,  7,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                                       
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   7, row=   5", x_two);                                                                                         
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   7, row=   5", x_two);                                                                                         
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 7][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one , x_two );                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check selection initialization                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range selection in CUM mode                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_start                0,    5,    5, SEL_CUM                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       continue range selection to lower right                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_increase             0,    7,    6                                              i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       get the full range                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the range function              SEL_range             &xtab, &xcol, &xrow, &xcol2, &xrow2                           i_equal     0                                                                      
     code     create a custom expect string        sprintf(CUSTOM, "s_sel range      : c, ta=%4d, bc=%4d, br=%4d, ec=%4d, er=%4d",  xtab, xcol, xrow, xcol2, xrow2);                                                            
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     [[ CUSTOM ]]                                                           

   COND       get the first cell in the range (occupied)                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_first             &xtab, &xcol, &xrow                                           p_exists    0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   5, row=   5                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_temp);                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the next cell in the range                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   6, row=   5                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : not found in cell list"                       );                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 6][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the next cell in the range (occupied again)              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_exists    0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   7, row=   5                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   7, row=   5", x_temp);                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   7, row=   5", x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 7][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the next cell in the range (next row, unoccupied)        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   5, row=   6                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : not found in cell list"                       );                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 6]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the next cell in the range (unoccupied)                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   6, row=   6                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : not found in cell list"                       );                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 6][ 6]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the last cell in the range (unoccupied)                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   7, row=   6                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : not found in cell list"                       );                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 7][ 6]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                        
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       go past the end                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_exists    0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=   7, er=   6      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=  -1, row=  -1                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : not found in cell list"                       );                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p", 0    , xcol, xrow, DONE_DONE);                                                                     
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       increase the range in the same direction                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_increase          0, 20, 10                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=  20, er=  10      

   COND       get the full range                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------
     exec     call the range function              SEL_range             &xtab, &xcol, &xrow, &xcol2, &xrow2                           i_equal     0                                                                      
     code     create a custom expect string        sprintf(CUSTOM, "s_sel range      : c, ta=%4d, bc=%4d, br=%4d, ec=%4d, er=%4d",  xtab, xcol, xrow, xcol2, xrow2);                                                               
     get      review the selection                 SEL_unit              "sel_range"    , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the first cell in the range (occupied)                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_first             &xtab, &xcol, &xrow                                           p_exists    0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=  20, er=  10      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   5, row=   5                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_temp);                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get past the old last column (show new action)               ------------------------------------------------------------  ------------------------------------------------------------------------------------
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                            
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_exists    0                                                            
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                            
     exec     call the selection                   SEL_next              &xtab, &xcol, &xrow                                           p_null      0                                                            
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=  20, er=  10      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   9, row=   5                        

   COND       get the first cell in the range (restartable)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_first             &xtab, &xcol, &xrow                                           p_exists    0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   5, ec=  20, er=  10      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   5, row=   5                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_temp);                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, tab=   0, col=   5, row=   5", x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       increase the range in the opposite direction                 ------------------------------------------------------------  ------------------------------------------------------------------------------------
     exec     call the selection                   SEL_increase          0,  4,  3                                                     i_equal     0                                                            
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   4, br=   3, ec=  20, er=  10      

   COND       get the first cell in the new range (unoccupied)             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_first             &xtab, &xcol, &xrow                                           p_null      0                                                                      
     code     save cell pointer                    x_temp = yUNIT_p_rc;                                                                                                                                                       
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   4, br=   3, ec=  20, er=  10      
     get      review the selection                 SEL_unit              "sel_curr"     , '-'                                          s_equal     s_sel current    : tab=   0, col=   4, row=   3                        
     code     create a custom expect string        sprintf (CUSTOM, "s_cell location  : not found in cell list"                       );                                                                                        
     get      check the cell's location            CELL__unit            "cell_where",    x_temp                                       s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_loc occupant   : ptr=%9p, no cell attached"            , x_temp);                                                                                        
     get      check the sheet location             LOC_unit              "loc_who"  ,     tabs[0].sheet[ 4][ 3]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_sel full       : tab=%4d, col=%4d, row=%4d, ptr=%9p",  xtab, xcol, xrow, x_temp);                                                                         
     get      check the sheet location             SEL_unit              "sel_full"     , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       get the full range                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the range function              SEL_range             &xtab, &xcol, &xrow, &xcol2, &xrow2                           i_equal     0                                                                      
     code     create a custom expect string        sprintf(CUSTOM, "s_sel range      : c, ta=%4d, bc=%4d, br=%4d, ec=%4d, er=%4d",  xtab, xcol, xrow, xcol2, xrow2);                                                            
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     [[ CUSTOM ]]                                                           

   COND       start range selection, over                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_start             0, 10, 10, SEL_CUM                                            i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  10, br=  10, ec=  10, er=  10      

   COND       continue range selection                                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_increase          0, 12, 15                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=   0, row=   0                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  10, br=  10, ec=  12, er=  15      

   COND       get the full range                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the range function              SEL_range             &xtab, &xcol, &xrow, &xcol2, &xrow2                           i_equal     0                                                                      
     code     create a custom expect string        sprintf(CUSTOM, "s_sel range      : c, ta=%4d, bc=%4d, br=%4d, ec=%4d, er=%4d",  xtab, xcol, xrow, xcol2, xrow2);                                                            
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     [[ CUSTOM ]]                                                           

   COND       clear range selection                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
     exec     call the selection                   SEL_clear                                                                           i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=  10, row=  10                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_sel ) using range selection simplifiers                   SEL_from, SEL_col, SEL_row                                                                                                                           

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       change to three worksheets                                                                                                                                                                                      
     code     modify a variable                    my.ntab =  3;                                                                                                                                                              

   COND       setup initial vertical values                               
     code     number of rows                       tabs[0].nrow      =  40;
     code     number of rows                       tabs[1].nrow      =  40;
     code     number of rows                       tabs[2].nrow      =  40;
     code     current row                          tabs[0].crow      =   0;

   COND       setup initial horizonal values                              
     code     number of cols                       tabs[0].ncol      =  40;
     code     number of cols                       tabs[1].ncol      =  40;
     code     number of cols                       tabs[2].ncol      =  80;
     code     current cols                         tabs[0].ccol      =   0;

   COND       get to a starting point                                                                                                                                                                                         
     exec     set the current cell                 LOC_jump              0, 15, 20                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=  15, row=  20                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range with simplifier                                                                                                                                                                                     
     exec     call the selection                   SEL_from                                                                            i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=  15, row=  20                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  15, br=  20, ec=  15, er=  20      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       get to another point                                                                                                                                                                                            
     exec     set the current cell                 LOC_jump              0, 20, 20                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=  20, row=  20                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  15, br=  20, ec=  20, er=  20      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       get to a third point                                                                                                                                                                                            
     exec     set the current cell                 LOC_jump              0, 10, 25                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=  10, row=  25                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  10, br=  20, ec=  20, er=  25      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       clear range selection                                                                                                                                                                                           
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
     exec     call the selection                   SEL_clear                                                                           i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   0, col=  15, row=  20                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       get to a starting point                                                                                                                                                                                         
     exec     set the current cell                 LOC_jump              1, 10, 35                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   1, col=  10, row=  35                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range with simplifier                                                                                                                                                                                     
     exec     call the selection                   SEL_from                                                                            i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   1, col=  10, row=  35                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   1, bc=  10, br=  35, ec=  10, er=  35      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       select the entire column                                                                                                                                                                                        
     exec     call the selection                   SEL_col                                                                             i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   1, col=  10, row=  35                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   1, bc=  10, br=   0, ec=  10, er=  39      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       move down a few rows (no change expected)                                                                                                                                                                       
     exec     set the current cell                 LOC_jump              1, 10, 37                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   1, col=  10, row=  37                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   1, bc=  10, br=   0, ec=  10, er=  39      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       move over a few columns                                                                                                                                                                                         
     exec     set the current cell                 LOC_jump              1, 12, 37                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   1, col=  12, row=  37                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   1, bc=  10, br=   0, ec=  12, er=  39      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       clear range selection                                                                                                                                                                                           
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
     exec     call the selection                   SEL_clear                                                                           i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   1, col=  10, row=  35                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       get to a starting point                                                                                                                                                                                         
     exec     set the current cell                 LOC_jump              2,  2,  2                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   2, col=   2, row=   2                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       start range with simplifier                                                                                                                                                                                     
     exec     call the selection                   SEL_from                                                                            i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   2, col=   2, row=   2                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   2, bc=   2, br=   2, ec=   2, er=   2      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       select the entire row                                                                                                                                                                                           
     exec     call the selection                   SEL_row                                                                             i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   2, col=   2, row=   2                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   2, bc=   0, br=   2, ec=  79, er=   2      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       move down a few rows                                                                                                                                                                                            
     exec     set the current cell                 LOC_jump              2, 20, 10                                                     i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   2, col=  20, row=  10                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   2, bc=   0, br=   2, ec=  79, er=  10      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       select the entire column                                                                                                                                                                                        
     exec     call the selection                   SEL_col                                                                             i_equal     0                                                                      
     get      review the current position          move_unit             "tab_cur"      , NULL                                         s_equal     s_move tab cur   : tab=   2, col=  20, row=  10                        
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   2, bc=   0, br=   0, ec=  79, er=  39      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       purge all cells                                                                                                                                                                                                 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_sel ) selection buffer hooking and unhooking of cells     REG_hook, REG_unhook, LOC_hook, LOC_unhook                                                                                                           

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       change to three worksheets                                                                                                                                                                                      
     code     modify a variable                    my.ntab =  3;                                                                                                                                                              

   COND       setup initial vertical values                               
     code     number of rows                       tabs[0].nrow      =  40;
     code     number of rows                       tabs[1].nrow      =  40;
     code     number of rows                       tabs[1].nrow      =  40;
     code     current row                          tabs[0].crow      =   0;

   COND       setup initial horizonal values                              
     code     number of cols                       tabs[0].ncol      =  40;
     code     number of cols                       tabs[1].ncol      =  40;
     code     number of cols                       tabs[2].ncol      =  40;
     code     current cols                         tabs[0].ccol      =   0;

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a custom expect string        char custom[2000];                                                                                                                                                         
     code     create a pointer to one cell         tCELL *x_one  = NULL;                                                                                                                                                      
     code     create a pointer to another          tCELL *x_two  = NULL;                                                                                                                                                      
     code     create a pointer to a third          tCELL *x_thr  = NULL;                                                                                                                                                      

   COND       check buffer                                                                                                                                                                                                    
     code     create a custom expect string        sprintf (CUSTOM, "s_reg buffer (-) : (01) nbuf=   0, head=%9p, tail=%9p", NULL, NULL);                                                                                            
     exec     check buffer                         REG_unit              "reg_buffer"   , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       add first cell                                                                                                                                                                                                  
     exec     add a cell                           CELL__create          0,  5,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                       
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=   1, f=   1, b=   1                              
     code     create a custom expect string        sprintf(CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   5, row=   5", x_one);                                                                                                 
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "Sheet Location   : p=%9p",  x_one);                                                                                                                       
     get      check the sheet location             unit_accessor         "sheet_who",     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custome expect string       sprintf(CUSTOM, "s_cell main list : num=   1, head=%9p, tail=%9p", x_one, x_one);                                                                                          
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       add second cell                                                                                                                                                                                                 
     exec     add a cell                           CELL__create          0,  7,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_two  = yUNIT_p_rc;                                                                                                                                                       
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=   2, f=   2, b=   2                              
     code     create a custom expect string        sprintf(CUSTOM, "s_cell location  : ptr=%9p, tab=   0, col=   7, row=   5", x_two);                                                                                                 
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "Sheet Location   : p=%9p",  x_two);                                                                                                                       
     get      check the sheet location             unit_accessor         "sheet_who",     tabs[0].sheet[ 7][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custome expect string       sprintf(CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one, x_two);                                                                                          
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       unhook the second cell                                                                                                                                                                                          
     exec     unhook a cell                        LOC_unhook            x_two                                                         i_equal     0                                                                      
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=   2, f=   2, b=   2                              
     code     create a custom expect string        sprintf(CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_two);                                                                                                 
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "Sheet Location   : p=%9p", NULL);                                                                                                                         
     get      check the sheet location             unit_accessor         "sheet_who",     tabs[0].sheet[ 7][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custome expect string       sprintf(CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one, x_two);                                                                                          
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       check buffer                                                                                                                                                                                                    
     code     create a custom expect string        sprintf (CUSTOM, "s_reg buffer (-) : (01) nbuf=   0, head=%9p, tail=%9p", NULL, NULL);                                                                                            
     exec     check buffer                         REG_unit              "reg_buffer"   , '-'                                          s_equal     [[ CUSTOM ]]                                                           

   COND       hook second cell to buffer                                                                                                                                                                                      
     exec     hook a cell to a buffer              REG_hook              x_two          , '-', '-'                                     i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_reg buffer (-) : (01) nbuf=   1, head=%9p, tail=%9p", x_two, x_two);                                                                                          
     exec     check buffer                         REG_unit              "reg_buffer"   , '-'                                          s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_cell location  : ptr=%9p, tab= -11, col=   0, row=  -1", x_two);                                                                                                 
     get      check the cell's location            CELL__unit            "cell_where",    x_two                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custome expect string       sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one, x_two);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       unhook the first cell                                                                                                                                                                                           
     exec     unhook a cell                        LOC_unhook            x_one                                                         i_equal     0                                                                      
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=   2, f=   2, b=   2                              
     code     create a custom expect string        sprintf(CUSTOM, "s_cell location  : ptr=%9p, tab=  -1, col=  -1, row=  -1", x_one);                                                                                                 
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "Sheet Location   : p=%9p", NULL);                                                                                                                         
     get      check the sheet location             unit_accessor         "sheet_who",     tabs[0].sheet[ 5][ 5]                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custome expect string       sprintf(CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one, x_two);                                                                                          
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           

   COND       hook first cell to buffer                                                                                                                                                                                       
     exec     hook a cell to a buffer              REG_hook              x_one          , '-', '-'                                     i_equal     0                                                                      
     code     create a custom expect string        sprintf (CUSTOM, "s_reg buffer (-) : (01) nbuf=   2, head=%9p, tail=%9p", x_two, x_one);                                                                                          
     exec     check buffer                         REG_unit              "reg_buffer"   , '-'                                          s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf(CUSTOM, "s_cell location  : ptr=%9p, tab= -11, col=   1, row=  -1", x_one);                                                                                                 
     get      check the cell's location            CELL__unit            "cell_where",    x_one                                        s_equal     [[ CUSTOM ]]                                                           
     code     create a custome expect string       sprintf (CUSTOM, "s_cell main list : num=   2, head=%9p, tail=%9p", x_one, x_two);                                                                                         
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         s_equal     [[ CUSTOM ]]                                                           








   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SECT          register handling                                                                                                                                                                                                 




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_sel ) basic cut, copy, and paste using base register      REG_copy, REG_paste, SEL_set, CELL_change                                                                                                            

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup sheet values                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     number of rows                       tabs[0].nrow      =  40;
     code     number of cols                       tabs[0].ncol      =  40;


   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char x_custom [2000];                                                                                                                                                        
     code     create a register list holder        char x_list   [2000];                                                                                                                                                        
     code     create a pointer to one cell         tCELL *x_1st  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_2nd  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_3rd  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_4th  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_5th  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_6th  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_7th  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_8th  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_9th  = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_A    = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_B    = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_C    = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_D    = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_E    = NULL;                                                                                                                                                        
     code     create a pointer to another          tCELL *x_F    = NULL;                                                                                                                                                        

   COND       setup a table of cells                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  3, "+15"                                              p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  4, "+35"                                              p_exists    0                                                                      
     code     save cell pointer                    x_2nd  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  5, "+92"                                              p_exists    0                                                                      
     code     save cell pointer                    x_3rd  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  4,  3, "-2"                                               p_exists    0                                                                      
     code     save cell pointer                    x_4th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  4,  4, "-3"                                               p_exists    0                                                                      
     code     save cell pointer                    x_5th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  4,  5, "-1"                                               p_exists    0                                                                      
     code     save cell pointer                    x_6th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  3, "=d4*e4"                                           p_exists    0                                                                      
     code     save cell pointer                    x_7th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  4, "=d4"                                              p_exists    0                                                                      
     code     save cell pointer                    x_8th  = yUNIT_p_rc;                                                                                                                                                       
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  5, "=d6+e6"                                           p_exists    0                                                                      
     code     save cell pointer                    x_9th  = yUNIT_p_rc;                                                                                                                                                       
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  10, num=   9, fore=   9, back=   9            

   COND       check the base register                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 000 ,");                                                                                                                               
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 000 ,");                                                                                                                               
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+92:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          92.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          91.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       set a single cell range                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_set                  0,    3,    3,    3,    3                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   3, ec=   3, er=   3      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       copy the cell                                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the copy command                REG_copy                                                                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  11, num=  10, fore=  10, back=  10            

   COND       check the base register                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 001 ,0d4,");                                                                                                                           
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 001 ,0d4,");                                                                                                                           
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources (nothings changed on copy)           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+92:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (nothings changed on copy)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          92.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          91.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothings changed on copy)       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       check that range selection auto-cleared                                                                                                                                                                         
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       go to a new location                                                                                                                                                                                            
     exec     set the current cell                 LOC_jump                 0,    3,    5                                              i_equal     0                                                                      

   COND       paste the cell                                                                                                                                                                                                  
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  11, num=  10, fore=  10, back=  10            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 001 ,0d4,");                                                                                                                              
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 001 ,0d4,");                                                                                                                              
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources (only 0d6 changed on paste)          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (0d6 plus recalc on 0f6 changed)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothings changed on paste)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       set a single cell range                                                                                                                                                                                         
     exec     call the selection                   SEL_set                  0,    4,    3,    4,    3                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   4, br=   3, ec=   4, er=   3      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       cut the cell                                                                                                                                                                                                    
     exec     call the copy command                REG_cut                                                                             i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  11, num=  10, fore=  10, back=  10            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 001 ,0e4,");                                                                                                                              
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 001 ,0e4,");                                                                                                                              
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources (cut removes 0e4)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (0e4 plus recalc on 0f4 changes)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothings changed with cut)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       go to the location of the cut                                                                                                                                                                                   
     exec     set the current cell                 LOC_jump                 0,    4,    3                                              i_equal     0                                                                      

   COND       paste the cell                                                                                                                                                                                                  
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  11, num=  10, fore=  10, back=  10            

   COND       check the base register (no change)                                                                                                                                                                             
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 001 ,0e4,");                                                                                                                              
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 001 ,0e4,");                                                                                                                              
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources (returns values to before cut)       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (returns values to before cut)        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothings changed on paste)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       clear the register                                                                                                                                                                                              
     exec     call the copy command                REG_clear             '-', '-'                                                      i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  10, num=   9, fore=   9, back=   9            

   COND       check the base register (empty)                                                                                                                                                                                 
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 000 ,");                                                                                                                                  
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 000 ,");                                                                                                                                  
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       set a multi cell range (all literals)                                                                                                                                                                           
     exec     call the selection                   SEL_set                  0,    3,    3,    4,    5                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=   3, ec=   4, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       copy the cells (creating six new ones)                                                                                                                                                                          
     exec     call the copy command                REG_copy                                                                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  16, num=  15, fore=  15, back=  15            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 006 ,0d4,0d5,0d6,0e4,0e5,0e6,");                                                                                                          
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 006 ,0d4,0e4,0d6,0e6,0d5,0e5,");                                                                                                          
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources (nothing changes on copy)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (nothing changes on copy)             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothing changes on copy)        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       check that range selection auto-cleared                                                                                                                                                                         
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      

   COND       go to a location to paste                                                                                                                                                                                       
     exec     set the current cell                 LOC_jump                 0,    3,   10                                              i_equal     0                                                                      

   COND       paste the cells (creating six new ones)                                                                                                                                                                         
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  22, num=  21, fore=  21, back=  21            

   COND       check the sheet sources (adds the six new cells)             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (adds the six new cells)              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (no degendencies added)          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : 0d11  ( 0) .                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : 0d11  ( 0) .                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : 0d12  ( 0) .                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : 0d12  ( 0) .                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : 0d13  ( 0) .                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : 0d13  ( 0) .                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : 0e11  ( 0) .                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : 0e12  ( 0) .                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : 0e12  ( 0) .                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : 0e13  ( 0) .                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : 0e13  ( 0) .                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       check around new cells                                                                                                                                                                                          
     exec     retrieve a new cell                  LOC_cell              0,  2, 10                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  2, 11                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  2, 12                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  3,  9                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  4,  9                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  3, 13                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  4, 13                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  5, 10                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  5, 11                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  5, 12                                                     p_null      0                                                                      

   COND       verify new can change without effecting old                                                                                                                                                                     
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3, 10, "+136"                                             p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  22, num=  21, fore=  21, back=  21            
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   4) :+136:                                       
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         136.000000                                  

   COND       verify old can change also without effecting new one                                                                                                                                                            
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  3, "+90"                                              p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  22, num=  21, fore=  21, back=  21            
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+90:                                        
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          90.000000                                  
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   4) :+136:                                       
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         136.000000                                  

   COND       paste the cells, again (creating no new ones)                                                                                                                                                                   
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  22, num=  21, fore=  21, back=  21            

   COND       verify old one unchanged and new one updated                                                                                                                                                                    
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+90:                                        
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          90.000000                                  
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :          15.000000                                  

   COND       clear the register                                                                                                                                                                                              
     exec     call the copy command                REG_clear             '-', '-'                                                      i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  16, num=  15, fore=  15, back=  15            

   COND       verify old and new unchanged                                                                                                                                                                                    
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+90:                                        
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          90.000000                                  
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :          15.000000                                  

   COND       go to a location to paste (with an empty register)                                                                                                                                                              
     exec     set the current cell                 LOC_jump                 0,    3,   15                                              i_equal     0                                                                      

   COND       paste the register (but no cells)                                                                                                                                                                               
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  16, num=  15, fore=  15, back=  15            

   COND       check that location is empty                                                                                                                                                                                    
     exec     retrieve a new cell                  LOC_cell              0,  3, 15                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  3, 16                                                     p_null      0                                                                      
     exec     retrieve a new cell                  LOC_cell              0,  3, 17                                                     p_null      0                                                                      

   COND       set a multi cell range (all literals)                                                                                                                                                                           
     exec     call the selection                   SEL_set                  0,    3,   10,    4,   12                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   3, br=  10, ec=   4, er=  12      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       cut the cells (creating six new ones)                                                                                                                                                                           
     exec     call the copy command                REG_cut                                                                             i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  16, num=  15, fore=  15, back=  15            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 006 ,0d11,0d12,0d13,0e11,0e12,0e13,");                                                                                               
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 006 ,0d11,0e11,0d12,0e12,0d13,0e13,");                                                                                               
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       check the sheet sources (makeing sure new area is gone)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+90:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (makeing sure new area is gone)       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          90.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :        -180.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          90.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (makeing sure new area is gone)  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       go to the original location                                                                                                                                                                                     
     exec     set the current cell                 LOC_jump                 0,    3,    3                                              i_equal     0                                                                      

   COND       paste the register                                                                                                                                                                                              
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  16, num=  15, fore=  15, back=  15            

   COND       check the sheet sources (0d4 returns)                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   6) :=d4*e4:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   3) :=d4:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   6) :=d6+e6:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (0d4 plus recalc on 0f4 and 0f5)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothing changes)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       set a multi cell range (a blank space)                                                                                                                                                                          
     exec     call the selection                   SEL_set                  0,    5,   10,    5,   12                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=  10, ec=   5, er=  12      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       copy the cells (creating three new ones)                                                                                                                                                                        
     exec     call the copy command                REG_copy                                                                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  10, num=   9, fore=   9, back=   9            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 000 ,");                                                                                                                             
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 000 ,");                                                                                                                             
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       set a multi cell range (only formulas)                                                                                                                                                                          
     exec     call the selection                   SEL_set                  0,    5,    3,    5,    5                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   3, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       copy the cells (creating three new ones)                                                                                                                                                                        
     exec     call the copy command                REG_copy                                                                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  13, num=  12, fore=  12, back=  12            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 003 ,0f4,0f5,0f6,");                                                                                                                 
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 003 ,0f4,0f5,0f6,");                                                                                                                 
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       go to the original location                                                                                                                                                                                     
     exec     set the current cell                 LOC_jump                 0,    5,    3                                              i_equal     0                                                                      

   COND       paste the register                                                                                                                                                                                              
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  13, num=  12, fore=  12, back=  12            

   COND       trap new cell pointers                                                                                                                                                                                          
     exec     retrieve a new cell                  LOC_cell              0,  5,  3                                                     p_exists    0                                                                      
     code     save cell pointer                    x_7th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  5,  4                                                     p_exists    0                                                                      
     code     save cell pointer                    x_8th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  5,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_9th  = yUNIT_p_rc;                                                                                                                                                       

   COND       check the sheet sources (nothing changes, but cleaning)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   8) :=0d4*0e4:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   4) :=0d4:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   8) :=0d6+0e6:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (0d4 plus recalc on 0f4 and 0f5)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (nothing changes)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       set a multi cell range (only formulas)                                                                                                                                                                          
     exec     call the selection                   SEL_set                  0,    5,    3,    5,    5                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=   3, ec=   5, er=   5      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       cut the cells this time                                                                                                                                                                                         
     exec     call the copy command                REG_cut                                                                             i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  10, num=   9, fore=   9, back=   9            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 003 ,0f4,0f5,0f6,");                                                                                                                 
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 003 ,0f4,0f5,0f6,");                                                                                                                 
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       go to the original location                                                                                                                                                                                     
     exec     set the current cell                 LOC_jump                 0,    5,   10                                              i_equal     0                                                                      

   COND       paste the register (adding three formulas plus six nulls)                                                                                                                                                       
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  17, num=  16, fore=  16, back=  16            

   COND       trap new cell pointers                                                                                                                                                                                          
     exec     retrieve a new cell                  LOC_cell              0,  5, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_7th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  5, 11                                                     p_exists    0                                                                      
     code     save cell pointer                    x_8th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  5, 12                                                     p_exists    0                                                                      
     code     save cell pointer                    x_9th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  3, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_A    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  3, 11                                                     p_null      0                                                                      
     code     save cell pointer                    x_B    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  3, 12                                                     p_exists    0                                                                      
     code     save cell pointer                    x_C    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  4, 10                                                     p_exists    0                                                                      
     code     save cell pointer                    x_D    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  4, 11                                                     p_null      0                                                                      
     code     save cell pointer                    x_E    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  4, 12                                                     p_exists    0                                                                      
     code     save cell pointer                    x_F    = yUNIT_p_rc;                                                                                                                                                       

   COND       check the sheet sources (formulas moved and placeholders)    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (  10) :=0d11*0e11:                                 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (   5) :=0d11:                                      
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (  10) :=0d13+0e13:                                 

   COND       check the sheet values (0d4 plus recalc on 0f4 and 0f5)      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :           0.000000                                  

   COND       review all cell connections (nothing changes)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f11,0f12,0f13,                         
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 0) .                                        
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 0) .                                        
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 0) .                                        
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 0) .                                        
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : 0d11  ( 0) .                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : 0d11  ( 2) ,0f11,0f12,                              
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : 0d13  ( 0) .                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : 0d13  ( 1) ,0f13,                                   
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : 0e11  ( 1) ,0f11,                                   
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : 0e13  ( 0) .                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : 0e13  ( 1) ,0f13,                                   
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : 0f11  ( 2) ,0d11,0e11,                              
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : 0f11  ( 1) ,root,                                   
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : 0f12  ( 1) ,0d11,                                   
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : 0f12  ( 1) ,root,                                   
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : 0f13  ( 2) ,0d13,0e13,                              
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : 0f13  ( 1) ,root,                                   
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       set a multi cell range (new formulas)                                                                                                                                                                           
     exec     call the selection                   SEL_set                  0,    5,   10,    5,   12                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=   5, br=  10, ec=   5, er=  12      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       cut the cells, again                                                                                                                                                                                            
     exec     call the copy command                REG_cut                                                                             i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  10, num=   9, fore=   9, back=   9            

   COND       check the base register                                                                                                                                                                                         
     code     create a custom expect string        sprintf (CUSTOM, "s_reg sort - (01) 003 ,0f11,0f12,0f13,");                                                                                                              
     get      check the register cell list         REG_unit              "reg_sort"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           
     code     create a custom expect string        sprintf (CUSTOM, "s_reg list - (01) 003 ,0f11,0f12,0f13,");                                                                                                              
     get      check the register cell list         REG_unit              "reg_list"   , '-'                                            s_equal     [[ CUSTOM ]]                                                           

   COND       go to the original location                                                                                                                                                                                     
     exec     set the current cell                 LOC_jump                 0,    5,    3                                              i_equal     0                                                                      

   COND       paste the register (adding three formulas, removeing nulls)                                                                                                                                                     
     exec     call the copy command                REG_paste                                                                           i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=  13, num=  12, fore=  12, back=  12            

   COND       trap new cell pointers                                                                                                                                                                                          
     exec     retrieve a new cell                  LOC_cell              0,  5,  3                                                     p_exists    0                                                                      
     code     save cell pointer                    x_7th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  5,  4                                                     p_exists    0                                                                      
     code     save cell pointer                    x_8th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  5,  5                                                     p_exists    0                                                                      
     code     save cell pointer                    x_9th  = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  3, 10                                                     p_null      0                                                                      
     code     save cell pointer                    x_A    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  3, 11                                                     p_null      0                                                                      
     code     save cell pointer                    x_B    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  3, 12                                                     p_null      0                                                                      
     code     save cell pointer                    x_C    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  4, 10                                                     p_null      0                                                                      
     code     save cell pointer                    x_D    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  4, 11                                                     p_null      0                                                                      
     code     save cell pointer                    x_E    = yUNIT_p_rc;                                                                                                                                                       
     exec     retrieve a new cell                  LOC_cell              0,  4, 12                                                     p_null      0                                                                      
     code     save cell pointer                    x_F    = yUNIT_p_rc;                                                                                                                                                       

   COND       check the sheet sources (back to the old way)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d4"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d5"                                      s_equal     s_celln source   : (   3) :+35:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d6"                                      s_equal     s_celln source   : (   3) :+15:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e4"                                      s_equal     s_celln source   : (   2) :-2:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e5"                                      s_equal     s_celln source   : (   2) :-3:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e6"                                      s_equal     s_celln source   : (   2) :-1:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f4"                                      s_equal     s_celln source   : (   8) :=0d4*0e4:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f5"                                      s_equal     s_celln source   : (   4) :=0d4:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f6"                                      s_equal     s_celln source   : (   8) :=0d6+0e6:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e13"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f12"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f13"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check the sheet values (back to the old way)                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d4"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d5"                                      s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d6"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e4"                                      s_equal     s_celln value    :          -2.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e5"                                      s_equal     s_celln value    :          -3.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e6"                                      s_equal     s_celln value    :          -1.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f4"                                      s_equal     s_celln value    :         -30.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f5"                                      s_equal     s_celln value    :          15.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f6"                                      s_equal     s_celln value    :          14.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e13"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f12"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f13"                                     s_equal     s_celln value    :         ---.------                                  

   COND       review all cell connections (back to the old way)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the requires root             DEP_unit              "cell_requires"  ,  "root"                                    s_equal     s_dep requires   : root  ( 3) ,0f4,0f5,0f6,                            
     get      review the provides root             DEP_unit              "cell_provides"  ,  "root"                                    s_equal     s_dep provides   : root  ( 0) .                                        
     get      review the requires 1st              DEP_unit              "cell_requires"  ,  "0d4"                                     s_equal     s_dep requires   : 0d4   ( 0) .                                        
     get      review the provides 1st              DEP_unit              "cell_provides"  ,  "0d4"                                     s_equal     s_dep provides   : 0d4   ( 2) ,0f4,0f5,                                
     get      review the requires 2nd              DEP_unit              "cell_requires"  ,  "0d5"                                     s_equal     s_dep requires   : 0d5   ( 0) .                                        
     get      review the provides 2nd              DEP_unit              "cell_provides"  ,  "0d5"                                     s_equal     s_dep provides   : 0d5   ( 0) .                                        
     get      review the requires 3rd              DEP_unit              "cell_requires"  ,  "0d6"                                     s_equal     s_dep requires   : 0d6   ( 0) .                                        
     get      review the provides 3rd              DEP_unit              "cell_provides"  ,  "0d6"                                     s_equal     s_dep provides   : 0d6   ( 1) ,0f6,                                    
     get      review the requires 4th              DEP_unit              "cell_requires"  ,  "0e4"                                     s_equal     s_dep requires   : 0e4   ( 0) .                                        
     get      review the provides 4th              DEP_unit              "cell_provides"  ,  "0e4"                                     s_equal     s_dep provides   : 0e4   ( 1) ,0f4,                                    
     get      review the requires 5th              DEP_unit              "cell_requires"  ,  "0e5"                                     s_equal     s_dep requires   : 0e5   ( 0) .                                        
     get      review the provides 5th              DEP_unit              "cell_provides"  ,  "0e5"                                     s_equal     s_dep provides   : 0e5   ( 0) .                                        
     get      review the requires 6th              DEP_unit              "cell_requires"  ,  "0e6"                                     s_equal     s_dep requires   : 0e6   ( 0) .                                        
     get      review the provides 6th              DEP_unit              "cell_provides"  ,  "0e6"                                     s_equal     s_dep provides   : 0e6   ( 1) ,0f6,                                    
     get      review the requires 7th              DEP_unit              "cell_requires"  ,  "0f4"                                     s_equal     s_dep requires   : 0f4   ( 2) ,0d4,0e4,                                
     get      review the provides 7th              DEP_unit              "cell_provides"  ,  "0f4"                                     s_equal     s_dep provides   : 0f4   ( 1) ,root,                                   
     get      review the requires 8th              DEP_unit              "cell_requires"  ,  "0f5"                                     s_equal     s_dep requires   : 0f5   ( 1) ,0d4,                                    
     get      review the provides 8th              DEP_unit              "cell_provides"  ,  "0f5"                                     s_equal     s_dep provides   : 0f5   ( 1) ,root,                                   
     get      review the provides 9th              DEP_unit              "cell_requires"  ,  "0f6"                                     s_equal     s_dep requires   : 0f6   ( 2) ,0d6,0e6,                                
     get      review the provides 9th              DEP_unit              "cell_provides"  ,  "0f6"                                     s_equal     s_dep provides   : 0f6   ( 1) ,root,                                   
     get      review the provides A                DEP_unit              "cell_requires"  ,  "0d11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides A                DEP_unit              "cell_provides"  ,  "0d11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_requires"  ,  "0d12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides B                DEP_unit              "cell_provides"  ,  "0d12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_requires"  ,  "0d13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides C                DEP_unit              "cell_provides"  ,  "0d13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0e11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0e11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0e12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0e12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0e13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0e13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_requires"  ,  "0f11"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides D                DEP_unit              "cell_provides"  ,  "0f11"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_requires"  ,  "0f12"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides E                DEP_unit              "cell_provides"  ,  "0f12"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_requires"  ,  "0f13"                                    s_equal     s_dep requires   : ----- ( 0) -                                        
     get      review the provides F                DEP_unit              "cell_provides"  ,  "0f13"                                    s_equal     s_dep provides   : ----- ( 0) -                                        
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=  16, fore=  16, back=  16                      

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_rpn ) adjusting formulas to account for cell movement     RPN_adjust, LOC_parse, LOC_ref, yRPN_stokens                                                                                                         

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char x_custom [2000];                                                                                                                                                      
     code     create a register list holder        char x_updated[2000];                                                                                                                                                      
     code     create a pointer to one cell         tCELL *x_1st  = NULL;                                                                                                                                                      

   COND       change to three worksheets                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab =  3;                                                                                                                                                              
     code     number of rows                       tabs[0].nrow      = 200;                                                                                                                                                   
     code     number of rows                       tabs[1].nrow      = 200;                                                                                                                                                   
     code     number of rows                       tabs[2].nrow      = 200;                                                                                                                                                   
     code     number of cols                       tabs[0].ncol      =  72;                                                                                                                                                   
     code     number of cols                       tabs[1].ncol      =  72;                                                                                                                                                   
     code     number of cols                       tabs[2].ncol      =  72;                                                                                                                                                   

   COND       setup a cell                                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=1c3"                                     p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    4) :=1c3:                                      

   COND       adjust cell elements greater by one                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1d3                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1c4                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1d4                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2c3                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     1,     1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2d4                                               

   COND       adjust cell element lesser by one                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1b3                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1c2                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -1,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1b2                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0c3                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,    -1,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0b2                                               

   COND       adjust cell element in opposite directions                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -1,     1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1b4                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2c2                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     1,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0d2                                               
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,    -1,     1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2b4                                               

   COND       push the elements out of bounds                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -2,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     2,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -3,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    75,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,    -3, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,   200, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              

   COND       change the cell to absolute row                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=1c$3"                                    p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    5) :=1c$3:                                     

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1d$3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1c$3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1a$3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2c$3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0f$3                                              

   COND       change the cell to absolute col                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=1$c3"                                    p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    5) :=1$c3:                                     

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1$c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1$c5                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1$c7                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2$c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0$c2                                              

   COND       change the cell to absolute tab                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=$1c3"                                    p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    5) :=$1c3:                                     

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = $1d3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = $1c5                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = $1a7                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = $1c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = $1f2                                              

   COND       change the cell to all absolutes                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=$1$c$3"                                  p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    7) :=$1$c$3:                                   

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @1c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @1c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @1c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @1c3                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @1c3                                              

   COND       change the cell to non-formula                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "testing"                                  p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    7) :testing:                                   

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_lesser    0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : testing                                             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_lesser    0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : testing                                             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_lesser    0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : testing                                             

   COND       change the cell to several addresses                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=1c$3+1$d3-$1e3"                          p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (   15) :=1c$3+1$d3-$1e3:                           

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1d$3 + 1$d3 - $1f3                                
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1c$3 + 1$d5 - $1e5                                
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1a$3 + 1$d7 - $1c7                                
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 2c$3 + 2$d3 - $1e3                                
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0f$3 + 0$d2 - $1h2                                

   COND       change the cell to addresses and numbers                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=((3.42*1c$3)+1$d3-$1e3)/5"               p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (   26) :=((3.42*1c$3)+1$d3-$1e3)/5:                

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * 1d$3 ) + 1$d3 - $1f3 ) / 5             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * 1c$3 ) + 1$d5 - $1e5 ) / 5             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * 1a$3 ) + 1$d7 - $1c7 ) / 5             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * 2c$3 ) + 2$d3 - $1e3 ) / 5             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * 0f$3 ) + 0$d2 - $1h2 ) / 5             

   COND       adjust cell elements too far                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -3,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * #REF ) + 1$d3 - $1b3 ) / 5             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,    -3, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * 1c$3 ) + #REF - #REF ) / 5             
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -2,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = ( ( 3.42 * #REF ) + #REF - $1e3 ) / 5             

   COND       try a null cell                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            NULL    ,     0,     1,     0, x_updated                      i_lesser    0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : n/a                                                 

   COND       try a null return variable                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, NULL                           i_lesser    0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : n/a                                                 

   COND       change the cell to an empty string                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, ""                                         p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    0) ::                                          
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_lesser    0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : n/a                                                 

   COND       change the cell to a duplicate formula                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "!f4"                                      p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    3) :!f4:                                       

   COND       change the cell to an fully absolute address                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=@f4"                                     p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    4) :=@f4:                                      

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @0f4                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @0f4                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @0f4                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @0f4                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = @0f4                                              

   COND       change the cell to a shortened absolute address              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    10,    10, "=$f4"                                     p_exists    0                                                                      
     code     save cell pointer                    x_1st  = yUNIT_p_rc;                                                                                                                                                       
     get      check the cell's source string       unit_accessor         "cell_source", x_1st                                          s_equal     Cell Source      : (    4) :=$f4:                                      

   COND       adjust cell elements around                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     1,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0$f4                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,     0,     2, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0$f6                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     0,    -2,     4, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 0$f8                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,     1,     0,     0, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = 1$f4                                              
     exec     call the formula adjustment          RPN_adjust            x_1st   ,    -1,     3,    -1, x_updated                      i_equal     0                                                                      
     get      review the updated formula           RPN_unit              "rpn_updated"    ,  NULL                                      s_equal     s_rpn updated    : = #REF                                              

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
#SCRP          (s_sel ) working with registers                              SEL_init, REG_index , basics of SEL_save                                                                                                             
#
#   COND       verify program setup                                                                                                                                                                                            
#     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
#     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
#     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : num=   0, fore=   0, back=   0                      
#
#   COND       change to three worksheets                                                                                                                                                                                      
#     code     modify a variable                    my.ntab =  3;                                                                                                                                                              
#
#   COND       setup initial vertical values                               
#     code     number of rows                       tabs[0].nrow      =  40;
#     code     number of rows                       tabs[1].nrow      =  40;
#     code     number of rows                       tabs[2].nrow      =  40;
#
#   COND       setup initial horizonal values                              
#     code     number of cols                       tabs[0].ncol      =  20;
#     code     number of cols                       tabs[1].ncol      =  20;
#     code     number of cols                       tabs[2].ncol      =  20;
#
#   COND       check buffer name conversion                                                                                                                                                                                    
#     get      convert a name                       REG_index             '0'                                                           i_equal     0                                                                      
#     get      convert a name                       REG_index             '-'                                                           i_equal     1                                                                      
#     get      convert a name                       REG_index             'a'                                                           i_equal     2                                                                      
#     get      convert a name                       REG_index             'b'                                                           i_equal     3                                                                      
#     get      convert a name                       REG_index             'c'                                                           i_equal     4                                                                      
#     get      convert a name                       REG_index             'd'                                                           i_equal     5                                                                      
#     get      convert a name                       REG_index             'e'                                                           i_equal     6                                                                      
#     get      convert a name                       REG_index             'f'                                                           i_equal     7                                                                      
#     get      convert a name                       REG_index             'g'                                                           i_equal     8                                                                      
#     get      convert a name                       REG_index             'h'                                                           i_equal     9                                                                      
#     get      convert a name                       REG_index             'i'                                                           i_equal     10                                                                     
#     get      convert a name                       REG_index             'j'                                                           i_equal     11                                                                     
#     get      convert a name                       REG_index             'k'                                                           i_equal     12                                                                     
#     get      convert a name                       REG_index             'l'                                                           i_equal     13                                                                     
#     get      convert a name                       REG_index             'm'                                                           i_equal     14                                                                     
#     get      convert a name                       REG_index             'n'                                                           i_equal     15                                                                     
#     get      convert a name                       REG_index             'o'                                                           i_equal     16                                                                     
#     get      convert a name                       REG_index             'p'                                                           i_equal     17                                                                     
#     get      convert a name                       REG_index             'q'                                                           i_equal     18                                                                     
#     get      convert a name                       REG_index             'r'                                                           i_equal     19                                                                     
#     get      convert a name                       REG_index             's'                                                           i_equal     20                                                                     
#     get      convert a name                       REG_index             't'                                                           i_equal     21                                                                     
#     get      convert a name                       REG_index             'u'                                                           i_equal     22                                                                     
#     get      convert a name                       REG_index             'v'                                                           i_equal     23                                                                     
#     get      convert a name                       REG_index             'w'                                                           i_equal     24                                                                     
#     get      convert a name                       REG_index             'x'                                                           i_equal     25                                                                     
#     get      convert a name                       REG_index             'y'                                                           i_equal     26                                                                     
#     get      convert a name                       REG_index             'z'                                                           i_equal     27                                                                     
#     get      convert a name                       REG_index             'A'                                                           i_equal     28                                                                     
#     get      convert a name                       REG_index             'B'                                                           i_equal     29                                                                     
#     get      convert a name                       REG_index             'C'                                                           i_equal     30                                                                     
#     get      convert a name                       REG_index             'D'                                                           i_equal     31                                                                     
#     get      convert a name                       REG_index             'E'                                                           i_equal     32                                                                     
#     get      convert a name                       REG_index             'F'                                                           i_equal     33                                                                     
#     get      convert a name                       REG_index             'G'                                                           i_equal     34                                                                     
#     get      convert a name                       REG_index             'H'                                                           i_equal     35                                                                     
#     get      convert a name                       REG_index             'I'                                                           i_equal     36                                                                     
#     get      convert a name                       REG_index             'J'                                                           i_equal     37                                                                     
#     get      convert a name                       REG_index             'K'                                                           i_equal     38                                                                     
#     get      convert a name                       REG_index             'L'                                                           i_equal     39                                                                     
#     get      convert a name                       REG_index             'M'                                                           i_equal     40                                                                     
#     get      convert a name                       REG_index             'N'                                                           i_equal     41                                                                     
#     get      convert a name                       REG_index             'O'                                                           i_equal     42                                                                     
#     get      convert a name                       REG_index             'P'                                                           i_equal     43                                                                     
#     get      convert a name                       REG_index             'Q'                                                           i_equal     44                                                                     
#     get      convert a name                       REG_index             'R'                                                           i_equal     45                                                                     
#     get      convert a name                       REG_index             'S'                                                           i_equal     46                                                                     
#     get      convert a name                       REG_index             'S'                                                           i_equal     46                                                                     
#     get      convert a name                       REG_index             'T'                                                           i_equal     47                                                                     
#     get      convert a name                       REG_index             'U'                                                           i_equal     48                                                                     
#     get      convert a name                       REG_index             'V'                                                           i_equal     49                                                                     
#     get      convert a name                       REG_index             'W'                                                           i_equal     50                                                                     
#     get      convert a name                       REG_index             'X'                                                           i_equal     51                                                                     
#     get      convert a name                       REG_index             'Y'                                                           i_equal     52                                                                     
#     get      convert a name                       REG_index             'Z'                                                           i_equal     53                                                                     
#     get      convert a name                       REG_index             '+'                                                           i_equal     54                                                                     
#
#   COND       try bad buffer references                                                                                                                                                                                       
#     get      convert a name                       REG_index             ' '                                                           i_lesser    0                                                                      
#     get      convert a name                       REG_index             0                                                             i_lesser    0                                                                      
#     get      convert a name                       REG_index             12                                                            i_lesser    0                                                                      
#     get      convert a name                       REG_index             '/'                                                           i_lesser    0                                                                      
#     get      convert a name                       REG_index             '@'                                                           i_lesser    0                                                                      
#     get      convert a name                       REG_index             '5'                                                           i_lesser    0                                                                      
#
#   COND       check selection buffer initialization                                                                                                                                                                           
#     exec     clear the selection                  SEL_init                                                                            i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range",   '-'                                            s_equal     s_reg range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'a'                                            s_equal     s_reg range      : a, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'b'                                            s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'c'                                            s_equal     s_reg range      : c, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'd'                                            s_equal     s_reg range      : d, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'e'                                            s_equal     s_reg range      : e, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'f'                                            s_equal     s_reg range      : f, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'g'                                            s_equal     s_reg range      : g, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'h'                                            s_equal     s_reg range      : h, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'i'                                            s_equal     s_reg range      : i, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'j'                                            s_equal     s_reg range      : j, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'k'                                            s_equal     s_reg range      : k, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'l'                                            s_equal     s_reg range      : l, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'm'                                            s_equal     s_reg range      : m, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'n'                                            s_equal     s_reg range      : n, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'o'                                            s_equal     s_reg range      : o, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'p'                                            s_equal     s_reg range      : p, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'q'                                            s_equal     s_reg range      : q, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'r'                                            s_equal     s_reg range      : r, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   's'                                            s_equal     s_reg range      : s, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   't'                                            s_equal     s_reg range      : t, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'u'                                            s_equal     s_reg range      : u, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'v'                                            s_equal     s_reg range      : v, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'w'                                            s_equal     s_reg range      : w, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'x'                                            s_equal     s_reg range      : x, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'y'                                            s_equal     s_reg range      : y, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   'z'                                            s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range",   '+'                                            s_equal     s_reg range      : +, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      
#
#   COND       start range selection in FROM mode                                                                                                                                                                              
#     exec     call the selection                   SEL_start                0,    5,    5, SEL_FROM                                    i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   5, br=   5, ec=   5, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       continue range selection                                                                                                                                                                                        
#     exec     call the selection                   SEL_increase             0,   10,   15                                              i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       save the range in first buffer                                                                                                                                                                                  
##     exec     call the selection                   SEL_save              'a'                                                           i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       check selection initialization and saved buffer                                                                                                                                                                 
#     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      
#
#   COND       start range selection in FROM mode                                                                                                                                                                              
#     exec     call the selection                   SEL_start                0,    0,    5, SEL_FROM                                    i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   5, ec=   0, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       continue range selection                                                                                                                                                                                        
#     exec     call the selection                   SEL_increase             0,   10,    5                                              i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       save the range in another buffer                                                                                                                                                                                
##     exec     call the selection                   SEL_save              'b'                                                           i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       check selection initialization and saved buffer                                                                                                                                                                 
#     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      
#
#   COND       start range selection in CUM mode                                                                                                                                                                               
#     exec     call the selection                   SEL_start                1,   10,   15, SEL_CUM                                     i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   1, bc=  10, br=  15, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       continue range selection                                                                                                                                                                                        
#     exec     call the selection                   SEL_increase             1,   10,    5                                              i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   1, bc=  10, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       save the range in another buffer                                                                                                                                                                                
##     exec     call the selection                   SEL_save              'z'                                                           i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   1, bc=  10, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   1, bc=  10, br=   5, ec=  10, er=  15      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       try to save it bad buffers                                                                                                                                                                                      
##     exec     call the selection                   SEL_save              '#'                                                           i_lesser    0                                                                      
##     exec     call the selection                   SEL_save              '/'                                                           i_lesser    0                                                                      
##     exec     call the selection                   SEL_save              ' '                                                           i_lesser    0                                                                      
##     exec     call the selection                   SEL_save              0                                                             i_lesser    0                                                                      
##     exec     call the selection                   SEL_save              15                                                            i_lesser    0                                                                      
#
#   COND       check selection initialization and saved buffer                                                                                                                                                                 
#     exec     clear the selection                  SEL_clear                                                                           i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   1, bc=  10, br=   5, ec=  10, er=  15      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      
#
#   COND       start range selection in CUM mode                                                                                                                                                                               
#     exec     call the selection                   SEL_start                2,    6,   10, SEL_CUM                                     i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   2, bc=   6, br=  10, ec=   6, er=  10      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   5, br=   5, ec=  10, er=  15      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   5, ec=  10, er=   5      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   1, bc=  10, br=   5, ec=  10, er=  15      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      
#
#   COND       clear out buffers, again                                                                                                                                                                                        
#     exec     call the selection                   SEL_init                                                                            i_equal     0                                                                      
#     get      review the selection                 SEL_unit              "reg_range"    , '-'                                          s_equal     s_reg range      : -, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'a'                                          s_equal     s_reg range      : a, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'b'                                          s_equal     s_reg range      : b, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     get      review the selection                 SEL_unit              "reg_range"    , 'z'                                          s_equal     s_reg range      : z, ta=   0, bc=   0, br=   0, ec=   0, er=   0      
#     exec     check if selection is live           SEL_islive                                                                          i_equal     0                                                                      
#
#   COND       verify program teardown                                                                                                                                                                                         
#     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
#     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
#     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : num=   0, fore=   0, back=   0                      



#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_calc) basic cell reference formulas                       CELL_change, RPN_convert, CELL_interpret, CALC_build, CALC_eval                                                                                      

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom [2000];                                                                                                                                                          

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list"      , NULL                                       u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       change to three worksheets                                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     modify a variable                    my.ntab += 2;                                                                                                                                                                

   COND       check the sheet sources (initial state)                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (initial state)                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check the sheet values (initial state)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check settings (initial state)                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (initial state)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 0) .                                        
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       add first cell                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL__create           0, 3, 10                                                     p_exists   0                                                                       
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       check cell sources (0d11 there but null)                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (null) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (0d11 there but null)                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (0d11 now there)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (0d11 now there)                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=- f=? d=0 a=? c=  0 r=  0 d=  0                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (none exists)                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 0) .                                        
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change first cell to a simple cell reference formula         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11"                                             p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check cell sources (0d11 now there, and null 0e11)           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   4) :=e11:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (0d11 now there, and null 0e11)        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   1) =,0e11                                       
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (0d11 now there, and null 0e11)            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (0d11 now there, and null 0e11)          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  1 r=  1 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=- f=? d=0 a=? c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (ties root, 0d11, and 0e11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 1) ,0e11,                                   
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       put a value in the second cell                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 4, 10, "20"                                               p_exists    0                                                            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check cell sources (changes 0e11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   4) :=e11:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   2) :20:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   1) =,0e11                                       
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0e11 and recalc 0d11)             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :          20.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :          20.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (0e11 changes to a number)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  1 r=  1 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (ties root, 0d11, and 0e11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 1) ,0e11,                                   
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change the value in second cell                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 4, 10, "100"                                              p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check cell sources (changes 0e11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   4) :=e11:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   1) =,0e11                                       
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0e11 and recalc 0d11)             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (no changes)                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  1 r=  1 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   4, fore=   4, back=   4                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 1) ,0e11,                                   
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change the formula in the first cell                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11+12"                                          p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            

   COND       check cell sources (changes 0d11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   7) :=e11+12:                                    
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (only 0d11 changes)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,12,+                                  
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (only 0d11 changes)                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         112.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0d11)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  1 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       delete the first cell (with the formula)                     ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete cell                          CELL__delete          CHG_INPUT,  0, 3, 10                                                     i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            

   COND       check cell sources (changes 0d11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (----) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (only 0d11 changes)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (----) -                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (only 0d11 changes)                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :         ---.------                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0d11)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (all gone)                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 0) .                                        
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       add a formula to the first cell again)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11*f11"                                         p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0d11, adds 0f11)                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   8) :=e11*f11:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (only 0d11 changes)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,0f11,*                                
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (only 0d11 changes)                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0d11)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=- f=? d=0 a=? c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (all gone)                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       put a value in the third cell                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 5, 10, "5"                                                p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0e11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   8) :=e11*f11:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   1) :5:                                          
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,0f11,*                                
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0f11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         500.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :           5.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0f11 only)                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change the formula in the first cell                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11+f11"                                         p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0d11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   8) :=e11+f11:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   1) :5:                                          
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (changes 0d11 only)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,0f11,+                                
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0d11 only)                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         105.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :           5.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0f11 only)                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       delete the third cell (required by first, so just cleared)   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     delete cell                          CELL__delete          CHG_INPUT,  0, 5, 10                                                     i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0f11 only)                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   8) :=e11+f11:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,0f11,+                                
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0f11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0f11 only)                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=- f=? d=0 a=? c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change the value in third cell                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 5, 10, "5"                                                p_exists    0                                                            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       change the formula, again                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11/f11"                                         p_exists    0                                                            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0f11 and 0d11)                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   8) :=e11/f11:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   1) :5:                                          
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,0f11,/                                
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0f11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :          20.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :           5.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (changes 0f11 only)                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change the value in third cell                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 5, 10, "35"                                               p_exists    0                                                            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0f11)                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   8) :=e11/f11:                                   
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   2) :35:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   3) =,0e11,0f11,/                                
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0f11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :           2.857143                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (no changes)                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  3 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       change the formula, again                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11+f11+e11"                                     p_exists    0                                                            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   4, num=   3, fore=   3, back=   3            

   COND       check cell sources (changes 0d11)                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (  12) :=e11+f11+e11:                               
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   2) :35:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check rpn translation (changes 0d11)                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   5) =,0e11,0f11,+,0e11,+                         
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (----) -                                            

   COND       check cell values (changes 0f11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         235.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :         ---.------                                  

   COND       check cell settings (no changes)                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  5 r=  2 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : --- --- --- --- ----- ----- -----                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   6, fore=   6, back=   6                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 2) ,0e11,0f11,                              
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : ----- ( 0) -                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : ----- ( 0) -                                        

   COND       make formula include forth cell (second sheet)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, "=e11+f11+(e11*1g11)"                              p_exists    0                                                                      
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   5, num=   4, fore=   4, back=   4            

   COND       check cell sources (changes 0d11 and adds 1g11)              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (  19) :=e11+f11+(e11*1g11):                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   2) :35:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (   0) ::                                           

   COND       check rpn translation (changes 0d11)                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   7) =,0e11,0f11,+,0e11,1g11,*,+                  
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (   0) .                                            

   COND       check cell values (changes 1g11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :         135.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :           0.000000                                  

   COND       check cell settings (changes 0d11 and 1g11)                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  7 r=  3 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : t=- f=? d=0 a=? c=  0 r=  0 d=  1                   

   COND       check dependencies (addresses add of 1g11)                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 3) ,0e11,0f11,1g11,                         
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : 1g11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : 1g11  ( 1) ,0d11,                                   

   COND       change the value in the forth cell                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  1, 6, 10, "40"                                               p_exists    0                                                            
     get      review the cell counts               CELL__unit            "cell_count"     , NULL                                       s_equal     s_cell count     : all=   5, num=   4, fore=   4, back=   4            

   COND       check cell sources (changes 1g11)                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (  19) :=e11+f11+(e11*1g11):                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   2) :35:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (   2) :40:                                         

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   7) =,0e11,0f11,+,0e11,1g11,*,+                  
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (   0) .                                            

   COND       check cell values (changes 1g11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :        4135.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :          40.000000                                  

   COND       check cell settings (changes 1g11)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=f f=? d=0 a=> c=  7 r=  3 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  1                   

   COND       check dependencies (no changes)                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   8, fore=   8, back=   8                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 1) ,0d11,                                   
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 3) ,0e11,0f11,1g11,                         
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 1) ,root,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 1) ,0d11,                                   
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : 1g11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : 1g11  ( 1) ,0d11,                                   

   COND       clear the formula (and kills all dependencies)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the source string             CELL_change           CHG_INPUT,  0, 3, 10, ""                                                 p_exists    0                                                            

   COND       check cell sources (changes 1g11)                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0d11"                                     s_equal     s_celln source   : (   0) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0e11"                                     s_equal     s_celln source   : (   3) :100:                                        
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0f11"                                     s_equal     s_celln source   : (   2) :35:                                         
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "1g11"                                     s_equal     s_celln source   : (   2) :40:                                         

   COND       check rpn translation (no changes)                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0d11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0e11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "0f11"                                     s_equal     s_celln rpn      : (   0) .                                            
     get      check the cell's source string       CELL__unitnew         "cell_rpn"       , "1g11"                                     s_equal     s_celln rpn      : (   0) .                                            

   COND       check cell values (changes 1g11, recalcs 0d11)               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0d11"                                     s_equal     s_celln value    :           0.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0e11"                                     s_equal     s_celln value    :         100.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "0f11"                                     s_equal     s_celln value    :          35.000000                                  
     get      check the cell's value               CELL__unitnew         "cell_value"     , "1g11"                                     s_equal     s_celln value    :          40.000000                                  

   COND       check cell settings (changes each a little)                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0d11"                                     s_equal     s_celln info     : t=- f=? d=0 a=? c=  0 r=  0 d=  0                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0e11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "0f11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                   
     get      check the cell's information         CELL__unitnew         "cell_info"      , "1g11"                                     s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                   

   COND       check dependencies (blank slate)                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      
     get      check dtree requirements             DEP_unit              "cell_requires"  , "root"                                     s_equal     s_dep requires   : root  ( 0) .                                        
     get      check dtree dependencies             DEP_unit              "cell_provides"  , "root"                                     s_equal     s_dep provides   : root  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0d11"                                     s_equal     s_dep requires   : 0d11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0d11"                                     s_equal     s_dep provides   : 0d11  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0e11"                                     s_equal     s_dep requires   : 0e11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0e11"                                     s_equal     s_dep provides   : 0e11  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "0f11"                                     s_equal     s_dep requires   : 0f11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "0f11"                                     s_equal     s_dep provides   : 0f11  ( 0) .                                        
     get      check the requirements               DEP_unit              "cell_requires"  , "1g11"                                     s_equal     s_dep requires   : 1g11  ( 0) .                                        
     get      check the dependencies               DEP_unit              "cell_provides"  , "1g11"                                     s_equal     s_dep provides   : 1g11  ( 0) .                                        

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_calc) basic range functions                               CELL_change, RPN_convert, CELL_interpret, CALC_build, CALC_eval                                                                                      

   COND       setup some testing variables                                
     code     create a custom expect string        char custom [2000];
     code     create a pointer to one cell         tCELL *x_one  = NULL;
     code     create a pointer to second           tCELL *x_two  = NULL;

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      review the deps linked list          DEP_unit              "dep_pointers"   , "root"                                     s_equal     s_dep pointers   : num=   0, head=    (nil), tail=    (nil)            
     get      review the deps counts               DEP_unit              "dep_count"      , "root"                                     s_equal     s_dep count      : num=   0, fore=   0, back=   0                      

   COND       set up simple data set                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    0, "title"                                      p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    1, "+600"                                       p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    2, "+470"                                       p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    3, "+170"                                       p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    5, "+430"                                       p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    7, "+300"                                       p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    8, "testing"                                    p_exists    0                                                                      

   COND       run a count                                                 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=count   (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           5.000000                                  

   COND       run a counta                                                
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=counta  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           7.000000                                  

   COND       run a countb                                                
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=countb  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          11.000000                                  

   COND       run a reqs                                                  
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=reqs    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          18.000000                                  

   COND       run a sum                                                   
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=sum     (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :        1970.000000                                  

   COND       run a mean/average                                          
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=mean    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         394.000000                                  

   COND       run a standard deviation                                    
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=stddev  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         147.322775                                  

   COND       run a minimum                                               
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=min     (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         170.000000                                  

   COND       run a maximum                                               
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=max     (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         600.000000                                  

   COND       run a first quartile                                        
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=qtr1    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         267.500000                                  

   COND       run a third quartile                                        
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=qtr3    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         502.500000                                  

   COND       run a median                                                
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=median  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         430.000000                                  

   COND       run a range                                                 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=range   (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         430.000000                                  

   COND       run a interquartile range                                   
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=rangeq  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         235.000000                                  

   COND       run a mode                                                  
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=mode    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         170.000000                                  

   COND       set up a more complex data set                              
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    0, "+53.73"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    1, "+53.87"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    2, "+53.85"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    3, "+53.88"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    0,    4, "+54.08"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    0, "+54.14"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    1, "+54.50"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    2, "+54.30"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    3, "+54.40"                                     p_exists    0                                                                      
     exec     change the source string             CELL_change           CHG_INPUT,   0,    1,    4, "+54.16"                                     p_exists    0                                                                      
     exec     change the source string             CELL__delete          CHG_INPUT,   0,    1,    5                                               i_equal     0                                                                      
     exec     change the source string             CELL__delete          CHG_INPUT,   0,    0,    7                                               i_equal     0                                                                      
     exec     change the source string             CELL__delete          CHG_INPUT,   0,    1,    8                                               i_equal     0                                                                      

   COND       run a count                                                 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=count   (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          10.000000                                  

   COND       run a counta                                                
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=counta  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          10.000000                                  

   COND       run a countb                                                
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=countb  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           8.000000                                  

   COND       run a reqs                                                  
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=reqs    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          18.000000                                  

   COND       run a sum                                                   
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=sum     (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :         540.910000                                  

   COND       run a mean/average                                          
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=mean    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          54.091000                                  

   COND       run a standard deviation                                    
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=stddev  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.244027                                  

   COND       run a minimum                                               
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=min     (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          53.730000                                  

   COND       run a maximum                                               
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=max     (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          54.500000                                  

   COND       run a first quartile                                        
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=qtr1    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          53.870000                                  

   COND       run a third quartile                                        
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=qtr3    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          54.300000                                  

   COND       run a median                                                
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=median  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          54.110000                                  

   COND       run a range                                                 
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=range   (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.770000                                  

   COND       run a interquartile range                                   
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=rangeq  (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :           0.430000                                  

   COND       run a mode                                                  
     exec     add a cell                           CELL_change           CHG_INPUT,   0,    3,   10, "=mode    (a1..b9)"                          p_exists   0                                                                       
     code     save cell pointer                    x_one  = yUNIT_p_rc;                                                                                                                                                         
     get      check the cell's value               unit_accessor         "cell_value",    x_one                                        s_equal     Cell Value       :          54.000000                                  

   COND       verify program teardown                                      
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_cell) verify cell width setting                           CELL_width                                                    none                                                                                 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup some testing variables                                 ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     code     create a custom expect string        char custom[2000];                                                                                                                                                         

   COND       add first couple cells                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 10, 10, "test"                                             p_exists    0                                                                      
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 11, 10, "first"                                            p_exists    0                                                                      
     exec     add a cell                           CELL__create          0, 12, 10                                                     p_exists    0                                                                      

   COND       check cell sources (initial setting)                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0k11"                                     s_equal     s_celln source   : (   4) :test:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0l11"                                     s_equal     s_celln source   : (   5) :first:                                      
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0m11"                                     s_equal     s_celln source   : (null) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0n11"                                     s_equal     s_celln source   : (----) ::                                           

   COND       check cell sources (initial version)                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (   8) :test    :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (null) ::                                           
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (----) ::                                           

   COND       add next couple cells                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 12, 10, "second"                                           p_exists    0                                                                      
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 13, 10, "a_longer_one_in_here"                             p_exists    0                                                                      

   COND       check cell sources (0m11 and 0n11 updated)                   ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0k11"                                     s_equal     s_celln source   : (   4) :test:                                       
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0l11"                                     s_equal     s_celln source   : (   5) :first:                                      
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0m11"                                     s_equal     s_celln source   : (   6) :second:                                     
     get      check the cell's source string       CELL__unitnew         "cell_source"    , "0n11"                                     s_equal     s_celln source   : (  20) :a_longer_one_in_here:                       

   COND       check cell printables (0m11 and 0n11 updated)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (   8) :test    :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   8) :second  :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (   8) :a_long> :                                   

   COND       select the first cell                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                                      

   COND       widen to big-normal                                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'N'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  12) :test        :                               
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   8) :second  :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (   8) :a_long> :                                   

   COND       set back to normal                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'n'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (   8) :test    :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   8) :second  :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (   8) :a_long> :                                   

   COND       widen to wide-normal                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'w'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  20) :test                :                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   8) :second  :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (   8) :a_long> :                                   

   COND       select the fourth cell                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              0, 13, 10                                                     i_equal     0                                                                      

   COND       widen to extra-wide                                          ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'W'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0n11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  20) :test                :                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   8) :second  :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       select the third cell                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              0, 12, 10                                                     i_equal     0                                                                      

   COND       narrow to minimum                                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'm'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0m11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  20) :test                :                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       select the first cell                                        ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                                      

   COND       narrow by one                                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'h'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  19) :test               :                        
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       narrow by big-one                                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'H'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  15) :test           :                            
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by one                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'l'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  16) :test            :                           
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       narrow by big-one                                            ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'H'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  15) :test           :                            
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by big-one                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'L'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  20) :test                :                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by one twice                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'l'                                                           i_equal     0                                                                      
     exec     change the width                     CELL_width            CHG_INPUT, 'l'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  22) :test                  :                     
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by big-one                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'L'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  25) :test                     :                  
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by big-one, again                                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'L'                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  30) :test                          :             
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       go to exactly 17                                             ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, -17                                                           i_equal     0                                                                      

   COND       check cell printables (only 0k11 updated)                    ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  17) :test             :                          
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       select the first two cells                                                                                                                                                                                      
     exec     call the selection                   SEL_set                  0,   10,   10,   11,   10                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  10, br=  10, ec=  11, er=  10      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       enlarge by one                                               ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'l'                                                           i_equal     0                                                                      

   COND       check cell printables (0k11 and 0l11 updated)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  18) :test              :                         
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   9) :first    :                                  
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by another one                                       ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'l'                                                           i_equal     0                                                                      

   COND       check cell printables (0k11 and 0l11 updated)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  19) :test               :                        
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (  10) :first     :                                 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       enlarge by big one                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'L'                                                           i_equal     0                                                                      

   COND       check cell printables (0k11 and 0l11 updated)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  20) :test                :                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (  15) :first          :                            
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   4) :se> :                                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       select the middle two cells                                                                                                                                                                                     
     exec     call the selection                   SEL_set                  0,   11,   10,   12,   10                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  11, br=  10, ec=  12, er=  10      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       set to normal                                                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     change the width                     CELL_width            CHG_INPUT, 'n'                                                           i_equal     0                                                                      

   COND       check cell printables (0l11 and 0m11 updated)                ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0k11"                                     s_equal     s_celln print    : (  20) :test                :                       
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0l11"                                     s_equal     s_celln print    : (   8) :first   :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0m11"                                     s_equal     s_celln print    : (   8) :second  :                                   
     get      check the cell's source string       CELL__unitnew         "cell_printable" , "0n11"                                     s_equal     s_celln print    : (  50) :a_longer_one_in_here              ++        

   COND       purge all cells                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#======  ==========(description)========================(method)=========  =======================(params)========================  =(test)== =======================(result)========================= 
SCRP     single cell string formatting          CELL_printable            

COND     verify program setup                                               
  exec   setup the program                      PROG_testing                                                                        i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     setup some testing variables                                       
  code   create a custom expect string          char custom[2000];
  code   create a pointer to one cell           tCELL *x_one  = NULL;

COND     add first cell                                                     
  exec   add a cell                             CELL__create               0, 10, 10                                                   p_exists   0                                                       
  code   save cell pointer                      x_one  = yUNIT_p_rc;
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0    

   COND       get the initial selection set                               
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                            

COND     get small amount of text in the cell                               
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "test"                                        p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (    4) :%-.40s:", "test");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (   8) :test    :                    

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (   8) :   test :                    

COND     format to the center                                               
  exec   change the alignment                   CELL_align                 CHG_INPUT, '|'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (   8) :  test  :                    

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (   8) :test    :                    

COND     format to the center, again                                        
  exec   change the alignment                   CELL_align                 CHG_INPUT, '|'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (   8) :  test  :                    

COND     widen cell for better testing                                      
  exec   change the alignment                   CELL_width                 CHG_INPUT, 'N'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :    test    :                

COND     format with a dash fill                                            
  exec   change the formatting                  CELL_format                CHG_INPUT, '-'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :----test--- :                

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :test------- :                

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :-------test :                

COND     format to the center, again                                        
  exec   change the alignment                   CELL_align                 CHG_INPUT, '|'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :----test--- :                

COND     format with a underscore fill                                      
  exec   change the formatting                  CELL_format                CHG_INPUT, '_'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=_ d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :____test___ :                

COND     format with a equal sign fill                                      
  exec   change the formatting                  CELL_format                CHG_INPUT, '='                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :====test=== :                

COND     format with a dash fill, again                                     
  exec   change the formatting                  CELL_format                CHG_INPUT, '-'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :----test--- :                

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :-------test :                

COND     get a empty string in the cell                                     
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, ""                                               p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   0, "");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=- d=0 a=? c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :          - :                

COND     format with a empty fill                                           
  exec   change the formatting                  CELL_format                CHG_INPUT, ' '                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=- d=0 a=? c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :          - :                

COND     get a longer value in the cell                                     
  exec   change the source string               CELL_change               CHG_INPUT,  0, 10, 10, "testing"                                        p_exists   0                                                       
  exec   change the formatting                  CELL_format                CHG_INPUT, ' '                                                      i_equal    0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   7, "testing");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :testing     :                

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :    testing :                

COND     format to the center                                               
  exec   change the alignment                   CELL_align                 CHG_INPUT, '|'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :  testing   :                

COND     format with dash fill                                              
  exec   change the format                      CELL_format                CHG_INPUT, '.'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=. d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :..testing.. :                

COND     format with numeric format                                         
  exec   change the format                      CELL_format                CHG_INPUT, 'f'                                                      i_lesser   0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=. d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :..testing.. :                

COND     format with numeric format                                         
  exec   change the format                      CELL_format                CHG_INPUT, ','                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=. d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :..testing.. :                

COND     format with numeric format                                         
  exec   change the format                      CELL_format                CHG_INPUT, 'x'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=. d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :..testing.. :                

COND     format with dash fill, again                                       
  exec   change the format                      CELL_format                CHG_INPUT, '-'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :--testing-- :                

COND     get a almost max length string in cell                             
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "eleventeen"                                     p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  10, "eleventeen");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :-eleventeen :                

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :eleventeen- :                

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :-eleventeen :                

COND     format with a empty fill                                           
  exec   change the formatting                  CELL_format                CHG_INPUT, ' '                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) : eleventeen :                

COND     get a longer value in the cell                                     
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "eleventeeny"                                     p_exists   0                                                      
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  11, "eleventeeny");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :eleventeeny :                

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :eleventeeny :                

COND     format to the center                                               
  exec   change the alignment                   CELL_align                 CHG_INPUT, '|'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :eleventeeny :                

COND     format with equal sign fill                                        
  exec   change the format                      CELL_format                CHG_INPUT, '='                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :eleventeeny :                

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :eleventeeny :                

COND     get a over long string in the cell                                 
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "supercalafragalistic"                            p_exists   0                                                      
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  20, "supercalafragalistic");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :supercalaf> :                

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :<ragalistic :                

COND     format to the center                                               
  exec   change the alignment                   CELL_align                 CHG_INPUT, '|'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :<calafraga> :                

COND     format with a empty fill                                           
  exec   change the formatting                  CELL_format                CHG_INPUT, ' '                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :<calafraga> :                

COND     get a over long string with spaces                                 
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "super alaf agal stic"                            p_exists   0                                                      
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  20, "super alaf agal stic");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=| c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :           0.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :< alaf aga> :                

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=< c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :super alaf> :                

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :< agal stic :                

COND     make cell even wider                                               
  exec   change the alignment                   CELL_width                 CHG_INPUT, 'w'                                                      i_equal    0                                                       
  exec   change the alignment                   CELL_width                 CHG_INPUT, 'L'                                                      i_equal    0                                                       
  exec   change the alignment                   CELL_width                 CHG_INPUT, 'L'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :         super alaf agal stic : 

COND     use equal sign filler                                              
  exec   change the format                      CELL_format                CHG_INPUT, '='                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :=========super alaf agal stic : 

COND     try left with bracket alignment                                    
  exec   change the alignment                   CELL_align                 CHG_INPUT, '['                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=[ c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :[super alaf agal stic========]: 

COND     put a medium size string in the cell                               
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "super calaf"                      p_exists   0                                                      
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  11, "super calaf");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=[ c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :[super calaf=================]: 

COND     switch to righ bracket alignment                                   
  exec   change the alignment                   CELL_align                 CHG_INPUT, ']'                                                      i_equal    0                                                       
  exec   change the format                      CELL_format                CHG_INPUT, '_'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=_ d=0 a=] c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :[_________________super calaf]: 

COND     switch to left brace alignment                                     
  exec   change the alignment                   CELL_align                 CHG_INPUT, '{'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=_ d=0 a={ c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :[__super calaf_______________]: 

COND     switch to right brace alignment                                    
  exec   change the alignment                   CELL_align                 CHG_INPUT, '}'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=_ d=0 a=} c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :[_______________super calaf__]: 

COND     try to force real/float format                                     
  exec   change the format                      CELL_format                CHG_INPUT, 'r'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=_ d=0 a=} c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  30) :[_______________super calaf__]: 

   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#======  ==========(description)========================(method)=========  =======================(params)========================  =(test)== =======================(result)========================= 
SCRP     single cell numeric formatting         CELL_printable            

COND     verify program setup                                               
  exec   setup the program                      PROG_testing                                                                        i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     setup some testing variables                                       
  code   create a custom expect string          char custom[2000];
  code   create a pointer to one cell           tCELL *x_one  = NULL;

COND     add first cell                                                     
  exec   add a cell                             CELL__create               0, 10, 10                                                   p_exists   0                                                       
  code   save cell pointer                      x_one  = yUNIT_p_rc;
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0    

   COND       get the initial selection set                               
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                            

COND     get a solid number in the cell                                     
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "54321.6789"                                     p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",  10, "54321.6789");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :       54321.678900                   

COND     widen cell for better testing                                      
  exec   change the alignment                   CELL_width                 CHG_INPUT, 'N'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=? d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :      54322 :                

COND     format to as a comma                                               
  exec   change the format                      CELL_format                CHG_INPUT, ','                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :     54,322 :                

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :     54,322 :                

COND     change to accounting format                                        
  exec   change the format                      CELL_format                CHG_INPUT, 'a'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=a d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :    54,322  :                

COND     change to currency format                                          
  exec   change the format                      CELL_format                CHG_INPUT, '$'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=$ d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :   $54,322  :                

COND     change to float format                                             
  exec   change the format                      CELL_format                CHG_INPUT, 'r'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=r d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :      54322 :                

COND     change to comma format                                             
  exec   change the format                      CELL_format                CHG_INPUT, ','                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :     54,322 :                

COND     change to a decimal                                                
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '1'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=1 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :   54,321.7 :                

COND     change to two decimals                                             
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '2'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=2 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :  54,321.68 :                

COND     change to three decimals                                           
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '3'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=3 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) : 54,321.679 :                

COND     change to four decimals                                            
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '4'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=4 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :54,321.6789 :                

COND     change to five decimals                                            
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '5'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=5 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :<,321.67890 :                

COND     change to four decimals                                            
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '4'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=4 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :54,321.6789 :                

COND     change to three decimals                                           
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '3'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=3 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) : 54,321.679 :                

COND     change to no decimals                                              
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '0'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :     54,322 :                

COND     change to four decimals                                            
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '4'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=4 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :54,321.6789 :                

COND     change to integer format (but four dec spacing)                    
  exec   change the format                      CELL_format                CHG_INPUT, 'i'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=i d=4 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) : 54322      :                

COND     change to comma format                                             
  exec   change the format                      CELL_format                CHG_INPUT, ','                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=4 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :54,321.6789 :                

COND     change to no decimals                                              
  exec   change the decimals                    CELL_decimals              CHG_INPUT, '0'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=, d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :     54,322 :                

COND     change to integer format                                           
  exec   change the format                      CELL_format                CHG_INPUT, 'i'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=i d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :      54322 :                

COND     change filler type                                                 
  exec   change the format                      CELL_format                CHG_INPUT, '-'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=i d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :      54322 :                

COND     change another filler                                              
  exec   change the format                      CELL_format                CHG_INPUT, '.'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=i d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :      54322 :                

COND     change to an illegal format                                        
  exec   change the format                      CELL_format                CHG_INPUT, 'Q'                                                      i_lesser   0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=i d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :      54322 :                

COND     get a small number in the cell                                     
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "21"                                             p_exists   0                                                       
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (%5d) :%-.40s:",   2, "21");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=i d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's value                 unit_accessor              "cell_value",    x_one                                   s_equal    Cell Value       :          21.000000                   
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :         21 :                

COND     change to bullet format                                            
  exec   change the format                      CELL_format                CHG_INPUT, 'p'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=n f=p d=0 a=> c=  0 r=  0 d=  0    
  get    check the cell's printable string      unit_accessor              "cell_printable",x_one                                   s_equal    Cell Printable   : (  12) :        21) :                


   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            









#======  ==========(description)========================(method)=========  =======================(params)========================  =(test)== =======================(result)========================= 
SCRP     alter cell alignment                   CELL_align                

COND     verify program setup                                               
  exec   setup the program                      PROG_testing                                                                        i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     setup some testing variables                                       
  code   create a custom expect string          char custom[2000];
  code   create a pointer to one cell           tCELL *x_one  = NULL;

COND     add first cell                                                     
  exec   add a cell                             CELL__create               0, 10, 10                                                   p_exists   0                                                       
  code   save cell pointer                      x_one  = yUNIT_p_rc;
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0    

   COND       get the initial selection set                               
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                            

COND     add some contents                                                  
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "test"                                           p_exists   0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0    

COND     format to the right                                                
  exec   change the alignment                   CELL_align                 CHG_INPUT, '>'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0    

COND     format to with an illegal lower case letter                        
  exec   change the alignment                   CELL_align                 CHG_INPUT, 'a'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0    

COND     format to with an illegal upper case letter                        
  exec   change the alignment                   CELL_align                 CHG_INPUT, 'X'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0    

COND     format to with a space                                             
  exec   change the alignment                   CELL_align                 CHG_INPUT, ' '                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=> c=  0 r=  0 d=  0    

COND     format to the left decimal                                         
  exec   change the alignment                   CELL_align                 CHG_INPUT, '['                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=[ c=  0 r=  0 d=  0    

COND     format to the right decimal                                        
  exec   change the alignment                   CELL_align                 CHG_INPUT, ']'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=] c=  0 r=  0 d=  0    

COND     format to with a number                                            
  exec   change the alignment                   CELL_align                 CHG_INPUT, '3'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=] c=  0 r=  0 d=  0    

COND     format to with a fill character                                    
  exec   change the alignment                   CELL_align                 CHG_INPUT, '='                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=] c=  0 r=  0 d=  0    

COND     format to the center decimal                                       
  exec   change the alignment                   CELL_align                 CHG_INPUT, '^'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=^ c=  0 r=  0 d=  0    

COND     format to the left                                                 
  exec   change the alignment                   CELL_align                 CHG_INPUT, '<'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0    

   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            





#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_cell) printable comma formats                             CELL__print_comma                                                                                                                                    

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a return holder               char  x_string  [MAX_STR];                                                                                                                                                 

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       test a very simple number                                                                                                                                                                                       
     exec     pass a simple number                 CELL__print_comma     ',',  0,          1.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1>>                                               

   COND       simple thousands test                                                                                                                                                                                           
     exec     pass a simple number                 CELL__print_comma     ',',  0,       2000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2,000>>                                           

   COND       simple millions test                                                                                                                                                                                            
     exec     pass a simple number                 CELL__print_comma     ',',  0,    3000000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<3,000,000>>                                       

   COND       negative number                                                                                                                                                                                                 
     exec     pass a simple number                 CELL__print_comma     ',',  0,    -400000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-400,000>>                                        

   COND       small decimals                                                                                                                                                                                                  
     exec     pass a simple number                 CELL__print_comma     ',',  1,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.1>>                                        

   COND       few more decimals                                                                                                                                                                                               
     exec     pass a simple number                 CELL__print_comma     ',',  3,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123>>                                      

   COND       lots of decimals                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     ',',  6,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123000>>                                   

   COND       maxiumum decimals                                                                                                                                                                                               
     exec     pass a simple number                 CELL__print_comma     ',',  9,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123000000>>                                

   COND       bad number of decimals                                                                                                                                                                                          
     exec     pass a simple number                 CELL__print_comma     ',', 10,      50000.123 , x_string                            i_lesser    0                                                                      
     exec     pass a simple number                 CELL__print_comma     ',', -1,      50000.123 , x_string                            i_lesser    0                                                                      

   COND       bad formats                                                                                                                                                                                                     
     exec     pass a simple number                 CELL__print_comma     'g',  0,      50000.123 , x_string                            i_lesser    0                                                                      
     exec     pass a simple number                 CELL__print_comma     'f',  0,      50000.123 , x_string                            i_lesser    0                                                                      
     exec     pass a simple number                 CELL__print_comma     '-',  0,      50000.123 , x_string                            i_lesser    0                                                                      
     exec     pass a simple number                 CELL__print_comma      0 ,  0,      50000.123 , x_string                            i_lesser    0                                                                      
     exec     pass a simple number                 CELL__print_comma      1 ,  0,      50000.123 , x_string                            i_lesser    0                                                                      

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  0,      50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000 +>>                                        

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  1,     -50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.1 ->>                                      

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  2,      50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.12 +>>                                     

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  3,     -50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123 ->>                                    

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  4,      50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123'4 +>>                                  

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  5,     -50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123'40 ->>                                 

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  6,      50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123'400 +>>                                

   COND       technical format                                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_comma     '#',  9,     -50000.1234, x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123'400'000 ->>                            

   COND       accounting format with small number                                                                                                                                                                             
     exec     pass a simple number                 CELL__print_comma     'a',  0,    3000000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<3,000,000 >>                                      

   COND       accounting format with negative number                                                                                                                                                                          
     exec     pass a simple number                 CELL__print_comma     'a',  0,    -400000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<(400,000)>>                                       

   COND       accounting format with several decimals                                                                                                                                                                         
     exec     pass a simple number                 CELL__print_comma     'a',  3,     -50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<(50,000.123)>>                                    

   COND       accounting format with lots of decimals                                                                                                                                                                         
     exec     pass a simple number                 CELL__print_comma     'a',  6,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<50,000.123000 >>                                  

   COND       currency format with small number                                                                                                                                                                               
     exec     pass a simple number                 CELL__print_comma     '$',  0,    3000000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<$3,000,000 >>                                     

   COND       currency format with negative number                                                                                                                                                                            
     exec     pass a simple number                 CELL__print_comma     '$',  0,    -400000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<$(400,000)>>                                      

   COND       currency format with several decimals                                                                                                                                                                           
     exec     pass a simple number                 CELL__print_comma     '$',  3,     -50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<$(50,000.123)>>                                   

   COND       currency format with lots of decimals                                                                                                                                                                           
     exec     pass a simple number                 CELL__print_comma     '$',  6,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<$50,000.123000 >>                                 

   COND       bad text return variable                                                                                                                                                                                        
     exec     pass a simple number                 CELL__print_comma     ',',  0,      50000.123 , NULL                                i_lesser    0                                                                      

   COND       signed format with small number                                                                                                                                                                                 
     exec     pass a simple number                 CELL__print_comma     's',  0,    3000000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<+3,000,000>>                                      

   COND       signed format with negative number                                                                                                                                                                              
     exec     pass a simple number                 CELL__print_comma     's',  0,    -400000.0   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-400,000>>                                        

   COND       signed format with several decimals                                                                                                                                                                             
     exec     pass a simple number                 CELL__print_comma     's',  3,     -50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-50,000.123>>                                     

   COND       signed format with lots of decimals                                                                                                                                                                             
     exec     pass a simple number                 CELL__print_comma     's',  6,      50000.123 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<+50,000.123000>>                                  

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_cell) printable numeric formats                           CELL__print_number                                                                                                                                   

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a return holder               char  x_string  [MAX_STR];                                                                                                                                                 

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       start with integer formats                                                                                                                                                                                      
     exec     pass a simple number                 CELL__print_number    'i',  0,          1     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1>>                                               

   COND       test a simple rounding                                                                                                                                                                                          
     exec     pass a simple number                 CELL__print_number    'i',  0,          1.05  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1>>                                               

   COND       test a closer rounding                                                                                                                                                                                          
     exec     pass a simple number                 CELL__print_number    'i',  0,          1.49  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1>>                                               

   COND       test a round up                                                                                                                                                                                                 
     exec     pass a simple number                 CELL__print_number    'i',  0,          1.50  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2>>                                               

   COND       test a very high round                                                                                                                                                                                          
     exec     pass a simple number                 CELL__print_number    'i',  0,          1.95  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2>>                                               

   COND       test a negative round down                                                                                                                                                                                      
     exec     pass a simple number                 CELL__print_number    'i',  0,         -1.05  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-1>>                                              

   COND       test a negative round down that is close                                                                                                                                                                        
     exec     pass a simple number                 CELL__print_number    'i',  0,         -1.49  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-1>>                                              

   COND       test a negative round up that is close                                                                                                                                                                          
     exec     pass a simple number                 CELL__print_number    'i',  0,         -1.50  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-2>>                                              

   COND       test a negative round up that is high                                                                                                                                                                           
     exec     pass a simple number                 CELL__print_number    'i',  0,         -1.95  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-2>>                                              

   COND       go up to hundreds                                                                                                                                                                                               
     exec     pass a simple number                 CELL__print_number    'i',  0,        395     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<395>>                                             

   COND       go up to thouands with no commas                                                                                                                                                                                
     exec     pass a simple number                 CELL__print_number    'i',  0,      20211     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<20211>>                                           

   COND       then a very large number                                                                                                                                                                                        
     exec     pass a simple number                 CELL__print_number    'i',  0,  256780251     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<256780251>>                                       

   COND       format a spaced integer                                                                                                                                                                                         
     exec     pass a simple number                 CELL__print_number    'i',  2,      20211     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<20211   >>                                        

   COND       and a larger spaced integer                                                                                                                                                                                     
     exec     pass a simple number                 CELL__print_number    'i',  5,      20211     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<20211      >>                                     

   COND       try invalid spacings                                                                                                                                                                                            
     exec     pass a simple number                 CELL__print_number    'i', 10,      20211     , x_string                            i_lesser    0                                                                      
     exec     pass a simple number                 CELL__print_number    'i', -3,      20211     , x_string                            i_lesser    0                                                                      

   COND       now, switch to bullet point format                                                                                                                                                                              
     exec     pass a simple number                 CELL__print_number    'p',  0,      20211     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<20211)>>                                          

   COND       now with decimals                                                                                                                                                                                               
     exec     pass a simple number                 CELL__print_number    'p',  0,        322.5   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<323)>>                                            

   COND       now negative                                                                                                                                                                                                    
     exec     pass a simple number                 CELL__print_number    'p',  0,        -50     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-50)>>                                            

   COND       add decimals                                                                                                                                                                                                    
     exec     pass a simple number                 CELL__print_number    'p',  1,          3.4   , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<3.4)>>                                            

   COND       add decimals with rounding                                                                                                                                                                                      
     exec     pass a simple number                 CELL__print_number    'p',  1,          3.49  , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<3.5)>>                                            

   COND       switching to floating point                                                                                                                                                                                     
     exec     pass a simple number                 CELL__print_number    'r',  0,        -50     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-50>>                                             

   COND       with a few decimals                                                                                                                                                                                             
     exec     pass a simple number                 CELL__print_number    'r',  2,        -23.785 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-23.79>>                                          

   COND       add a bigger number                                                                                                                                                                                             
     exec     pass a simple number                 CELL__print_number    'r',  2,    1523453.785 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1523453.79>>                                      

   COND       with more decimals                                                                                                                                                                                              
     exec     pass a simple number                 CELL__print_number    'r',  5,    1523453.785 , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1523453.78500>>                                   

   COND       and now exponential format                                                                                                                                                                                      
     exec     pass a simple number                 CELL__print_number    'e',  0,        -50     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-5.0e+01>>                                        

   COND       with larger number                                                                                                                                                                                              
     exec     pass a simple number                 CELL__print_number    'e',  0,       2536     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2.5e+03>>                                         

   COND       and more precision                                                                                                                                                                                              
     exec     pass a simple number                 CELL__print_number    'e',  2,       2536     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2.54e+03>>                                        

   COND       and even more precision                                                                                                                                                                                         
     exec     pass a simple number                 CELL__print_number    'e',  5,       2536     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2.53600e+03>>                                     

   COND       and even more precision                                                                                                                                                                                         
     exec     pass a simple number                 CELL__print_number    'E',  5,       2536     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<+2.53600 e +03>>                                  

   COND       smaller number                                                                                                                                                                                                  
     exec     pass a simple number                 CELL__print_number    'E',  0,        -50     , x_string                            i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<-5.0 e +01>>                                      

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_cell) printable time formats                              CELL__print_times                                                                                                                                    

   COND       setup some testing variables                                                                                                                                                                                    
     code     create a return holder               char  x_string  [MAX_STR];                                                                                                                                                 

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       start with basic date format                                                                                                                                                                                    
     exec     pass a simple number                 CELL__print_times     'd',     1389992527 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2014-Jan-17>>                                     

   COND       and also the time format                                                                                                                                                                                        
     exec     pass a simple number                 CELL__print_times     't',     1389992527 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<13:02>>                                           

   COND       and then the full timestamp                                                                                                                                                                                     
     exec     pass a simple number                 CELL__print_times     'T',     1389992527 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<14.01.17.13.02.07>>                               

   COND       change the date                                                                                                                                                                                                 
     exec     pass a simple number                 CELL__print_times     'd',     1387141800 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<2013-Dec-15>>                                     

   COND       and also the time format                                                                                                                                                                                        
     exec     pass a simple number                 CELL__print_times     't',     1387141800 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<13:10>>                                           

   COND       and then the full timestamp                                                                                                                                                                                     
     exec     pass a simple number                 CELL__print_times     'T',     1387141800 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<13.12.15.13.10.00>>                               

   COND       change the date                                                                                                                                                                                                 
     exec     pass a simple number                 CELL__print_times     'd',      168791400 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<1975-May-08>>                                     

   COND       and also the time format                                                                                                                                                                                        
     exec     pass a simple number                 CELL__print_times     't',      168791400 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<07:30>>                                           

   COND       and then the full timestamp                                                                                                                                                                                     
     exec     pass a simple number                 CELL__print_times     'T',      168791400 , x_string                                i_equal     0                                                                      
     get      review the cell counts               CELL__unit            "cell_print",    NULL                                         s_equal     s_cell print     : <<75.05.08.07.30.00>>                               

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_file) version number verification                         FILE_version                                                                                                                                         

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       start with a default version                                                                                                                                                                                    
     exec     pass a simple number                 FILE_version          "00.0a"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       change factor letter                                                                                                                                                                                            
     exec     pass a simple number                 FILE_version          "00.0b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0b                                               

   COND       change factor letter again                                                                                                                                                                                      
     exec     pass a simple number                 FILE_version          "00.0f"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0f                                               

   COND       change factor letter to greatest                                                                                                                                                                                
     exec     pass a simple number                 FILE_version          "00.0z"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0z                                               

   COND       try bad factor letters                                                                                                                                                                                          
     exec     pass a simple number                 FILE_version          "00.00"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.09"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.0A"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.0F"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.0+"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.0 "             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       change the minor number                                                                                                                                                                                         
     exec     pass a simple number                 FILE_version          "00.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.1b                                               

   COND       change the minor number, again                                                                                                                                                                                  
     exec     pass a simple number                 FILE_version          "00.9b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.9b                                               

   COND       change the minor number to test hex                                                                                                                                                                             
     exec     pass a simple number                 FILE_version          "00.Ab"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.Ab                                               

   COND       change the minor number to greatest                                                                                                                                                                             
     exec     pass a simple number                 FILE_version          "00.Fb"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.Fb                                               

   COND       try bad minor numbers                                                                                                                                                                                           
     exec     pass a simple number                 FILE_version          "00.af"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.Gf"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00. f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.+f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "00.Wf"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       try bad periods                                                                                                                                                                                                 
     exec     pass a simple number                 FILE_version          "01 2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "01+2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "01@2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "0192f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "01A2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       change the major number                                                                                                                                                                                         
     exec     pass a simple number                 FILE_version          "01.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 01.1b                                               

   COND       change the major number, again                                                                                                                                                                                  
     exec     pass a simple number                 FILE_version          "09.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 09.1b                                               

   COND       change the major number to test hex                                                                                                                                                                             
     exec     pass a simple number                 FILE_version          "0A.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 0A.1b                                               

   COND       change the major number to greatest                                                                                                                                                                             
     exec     pass a simple number                 FILE_version          "0F.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 0F.1b                                               

   COND       try bad major numbers                                                                                                                                                                                           
     exec     pass a simple number                 FILE_version          "0a.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "0G.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "0 .2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "0+.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "0W.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       change the super number                                                                                                                                                                                         
     exec     pass a simple number                 FILE_version          "15.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 15.1b                                               

   COND       change the super number, again                                                                                                                                                                                  
     exec     pass a simple number                 FILE_version          "95.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 95.1b                                               

   COND       change the super number to test hex                                                                                                                                                                             
     exec     pass a simple number                 FILE_version          "A5.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : A5.1b                                               

   COND       change the super number to greatest                                                                                                                                                                             
     exec     pass a simple number                 FILE_version          "F5.1b"             , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : F5.1b                                               

   COND       try bad super numbers                                                                                                                                                                                           
     exec     pass a simple number                 FILE_version          "a5.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "G5.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          " 5.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "+5.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "W5.2f"             , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       try bad lengths                                                                                                                                                                                                 
     exec     pass a simple number                 FILE_version          NULL                , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          ""                  , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "5.2"               , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               
     exec     pass a simple number                 FILE_version          "05.2fj"            , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       try misaligned                                                                                                                                                                                                  
     exec     pass a simple number                 FILE_version          "  5.2f"            , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0a                                               

   COND       try the sightly shorter version                                                                                                                                                                                 
     exec     pass a simple number                 FILE_version          "5.1b"              , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 05.1b                                               

   COND       try the sightly shorter version, again                                                                                                                                                                          
     exec     pass a simple number                 FILE_version          "0.1a"              , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.1a                                               

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_file) version bumping                                     FILE_version                                                                                                                                         

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       perform a factor bump                                                                                                                                                                                           
     code     create a custom expect string        strcpy (ver_num, "00.0a");
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0b                                               

   COND       perform a factor bump, again                                                                                                                                                                                    
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0c                                               

   COND       perform a factor bump near end                                                                                                                                                                                  
     code     create a custom expect string        strcpy (ver_num, "00.0y");
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.0z                                               

   COND       perform a factor bump at the end                                                                                                                                                                                
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.1a                                               

   COND       perform a factor bump, again                                                                                                                                                                                    
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.1b                                               

   COND       perform a minor bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.2a                                               

   COND       perform a minor bump, again                                                                                                                                                                                     
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.3a                                               

   COND       perform a factor bump, again                                                                                                                                                                                    
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.3b                                               

   COND       perform a minor bump at hex change                                                                                                                                                                              
     code     create a custom expect string        strcpy (ver_num, "00.9c");
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.Aa                                               

   COND       perform a minor bump, again                                                                                                                                                                                     
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 00.Ba                                               

   COND       perform a minor bump at at end                                                                                                                                                                                  
     code     create a custom expect string        strcpy (ver_num, "00.Fc");
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 01.0a                                               

   COND       perform a major bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'M'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 02.0a                                               

   COND       perform a major bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'M'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 03.0a                                               

   COND       perform a factor bump                                                                                                                                                                                           
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 03.0b                                               

   COND       perform a minor bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 03.1a                                               

   COND       perform a major bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'M'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 04.0a                                               

   COND       perform a major bump at hex change                                                                                                                                                                              
     code     create a custom expect string        strcpy (ver_num, "09.5d");
     exec     pass a simple number                 FILE_bump             'M'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 0A.0a                                               

   COND       perform a major bump, again                                                                                                                                                                                     
     exec     pass a simple number                 FILE_bump             'M'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 0B.0a                                               

   COND       perform a major bump at at end                                                                                                                                                                                  
     code     create a custom expect string        strcpy (ver_num, "0F.Ax");
     exec     pass a simple number                 FILE_bump             'M'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 10.0a                                               

   COND       perform a super bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'S'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 20.0a                                               

   COND       perform a factor bump                                                                                                                                                                                           
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 20.0b                                               

   COND       perform a minor bump                                                                                                                                                                                            
     exec     pass a simple number                 FILE_bump             'm'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 20.1a                                               

   COND       perform a super bump, again                                                                                                                                                                                     
     exec     pass a simple number                 FILE_bump             'S'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : 30.0a                                               

   COND       perform a super bump at hex change                                                                                                                                                                              
     code     create a custom expect string        strcpy (ver_num, "99.5d");
     exec     pass a simple number                 FILE_bump             'S'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : A0.0a                                               

   COND       perform a super bump, again                                                                                                                                                                                     
     exec     pass a simple number                 FILE_bump             'S'                 , ver_num                                 i_equal     0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : B0.0a                                               

   COND       perform a super bump at at end                                                                                                                                                                                  
     code     create a custom expect string        strcpy (ver_num, "F9.Ax");
     exec     pass a simple number                 FILE_bump             'S'                 , ver_num                                 i_lesser    0                                                                      
     get      review the cell counts               FILE_unit             "ver_num"        , 0                                          s_equal     s_file ver_num   : XX.Xx                                               

   COND       try bad bump types                                                                                                                                                                                              
     exec     pass a simple number                 FILE_bump             '-'                 , ver_num                                 i_lesser    0                                                                      
     exec     pass a simple number                 FILE_bump             '9'                 , ver_num                                 i_lesser    0                                                                      
     exec     pass a simple number                 FILE_bump             ' '                 , ver_num                                 i_lesser    0                                                                      
     exec     pass a simple number                 FILE_bump             'x'                 , ver_num                                 i_lesser    0                                                                      

   COND       try badly formatted versions                                                                                                                                                                                    
     code     create a custom expect string        strcpy (ver_num, "     ");
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_lesser    0                                                                      
     code     create a custom expect string        strcpy (ver_num, "00.0" );
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_lesser    0                                                                      
     code     create a custom expect string        strcpy (ver_num, "0000a");
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_lesser    0                                                                      
     code     create a custom expect string        strcpy (ver_num, "00a");
     exec     pass a simple number                 FILE_bump             'f'                 , ver_num                                 i_lesser    0                                                                      
     exec     pass a simple number                 FILE_bump             'f'                 , NULL                                    i_lesser    0                                                                      

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          (s_file) verify the reading of tab records                   INPT_tab                                                                                                                                             

   COND       verify program setup                                                                                                                                                                                            
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     code     tab record                           char   x_recd [MAX_STR] = "";                                                                                                                                                

   COND       check the initial state                                                                                                                                                                                         
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 100                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         

   COND       load a smaller than default tab                                                                                                                                                                                 
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0d10    \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=   4, row=  10                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       load a larger than default tab                                                                                                                                                                                  
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       load minimal tab                                                                                                                                                                                                
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0a1     \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=   1, row=   1                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a tab with columns over max                                                                                                                                                                                 
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0fa100  \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col= 130, row= 100                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a tab with rows over max                                                                                                                                                                                    
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0z10000 \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row=9999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a tab with blank size                                                                                                                                                                                       
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F         \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 100                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a tab with dashes in size                                                                                                                                                                                   
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F ------- \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 100                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a tab with junk in size                                                                                                                                                                                     
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F test    \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  26, row= 100                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       reset to a larger tab                                                                                                                                                                                           
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0a1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       change the current position over a few columns                                                                                                                                                                  
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g1     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       change the current position down a few rows                                                                                                                                                                     
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g5     \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try an empty current position                                                                                                                                                                                   
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F         \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try dashes in the current position                                                                                                                                                                              
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F ------- \x1F - \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       freeze a single column                                                                                                                                                                                          
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g5     \x1F c \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=y (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       freeze a single row                                                                                                                                                                                             
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g5     \x1F r \x1F 0a2     \x1F 0a2     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=y (   1 to    1)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       freeze two columns and one row                                                                                                                                                                                  
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g5     \x1F b \x1F 0a5     \x1F 0b5     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=y (   0 to    1)   row=y (   4 to    4)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a empty free type                                                                                                                                                                                           
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g5     \x1F   \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       try a bad freeze type                                                                                                                                                                                           
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g5     \x1F j \x1F 0a1     \x1F 0a1     \x1F one                     ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :one:                              
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       change the name                                                                                                                                                                                                 
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    0 \x1F 0az999  \x1F 0a1     \x1F 0g1     \x1F - \x1F 0a1     \x1F 0a1     \x1F second option           ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :second option:                    
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   1                                           

   COND       make a second tab                                                                                                                                                                                               
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    1 \x1F 1m49    \x1F 1a1     \x1F 1h5     \x1F b \x1F 1a1     \x1F 1a1     \x1F another tab             ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 1                                          s_equal     s_move tab pos   : tab=   1, col=   7, row=   4                        
     get      review the maximum position          move_unit             "tab_max"        , 1                                          s_equal     s_move tab max   : tab=   1, col=  13, row=  49                        
     get      review the frozen areas              FILE_unit             "freeze"         , 1                                          s_equal     s_file freeze    : col=y (   0 to    0)   row=y (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 1                                          s_equal     s_file tab name  : tab=   1, act=y, :another tab:                      
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   2                                           

   COND       make sure the first tab did not change                                                                                                                                                                          
     get      review the current position          move_unit             "tab_pos"        , 0                                          s_equal     s_move tab pos   : tab=   0, col=   6, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 0                                          s_equal     s_move tab max   : tab=   0, col=  52, row= 999                        
     get      review the frozen areas              FILE_unit             "freeze"         , 0                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 0                                          s_equal     s_file tab name  : tab=   0, act=y, :second option:                    
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   2                                           

   COND       jump to a fourth tab                                                                                                                                                                                            
     code     prepare the input record             strcpy (x_recd, "tab        \x1F -F- \x1F    3 \x1F 1d4     \x1F 1a1     \x1F 1a1     \x1F - \x1F 1a1     \x1F 1a1     \x1F fourth tab              ");                      
     exec     call the tab parsing routine         INPT_tab              x_recd                                                        i_equal     0                                                                      
     get      review the current position          move_unit             "tab_pos"        , 3                                          s_equal     s_move tab pos   : tab=   3, col=   0, row=   0                        
     get      review the maximum position          move_unit             "tab_max"        , 3                                          s_equal     s_move tab max   : tab=   3, col=   4, row=   4                        
     get      review the frozen areas              FILE_unit             "freeze"         , 3                                          s_equal     s_file freeze    : col=- (   0 to    0)   row=- (   0 to    0)         
     get      review the tab name                  FILE_unit             "tab_name"       , 3                                          s_equal     s_file tab name  : tab=   3, act=y, :fourth tab:                       
     get      review the tab count                 FILE_unit             "tab_count"      , 0                                          s_equal     s_file tab count : ntab=   4                                           

   COND       verify program teardown                                                                                                                                                                                         
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#======  ==========(description)========================(method)=========  =======================(params)========================  =(test)== =======================(result)========================= 
SCRP     alter cell format                      CELL_align                

COND     verify program setup                                               
  exec   setup the program                      PROG_testing                                                                        i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     setup some testing variables                                       
  code   create a custom expect string          char custom[2000];
  code   create a pointer to one cell           tCELL *x_one  = NULL;

COND     add first cell                                                     
  exec   add a cell                             CELL__create               0, 10, 10                                                   p_exists   0                                                       
  code   save cell pointer                      x_one  = yUNIT_p_rc;
  code   create a custom expect string          sprintf(CUSTOM, "Cell Source      : (    0) :%-.40s:", "(null)");
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    [[ CUSTOM ]]                                            
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0    

   COND       get the initial selection set                               
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                            

COND     add some contents                                                  
  exec   change the source string               CELL_change                CHG_INPUT, 0, 10, 10, "test"                                           p_exists   0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=? d=0 a=< c=  0 r=  0 d=  0    

COND     format to float                                                    
  exec   change the format                      CELL_format                CHG_INPUT, 'f'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=f d=0 a=< c=  0 r=  0 d=  0    

COND     format to currency                                                 
  exec   change the format                      CELL_format                CHG_INPUT, '$'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=$ d=0 a=< c=  0 r=  0 d=  0    

COND     format to accounting                                               
  exec   change the format                      CELL_format                CHG_INPUT, 'a'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=a d=0 a=< c=  0 r=  0 d=  0    

COND     try upper case of currency                                         
  exec   change the format                      CELL_format                CHG_INPUT, 'C'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=a d=0 a=< c=  0 r=  0 d=  0    

COND     try illegal symbol                                                 
  exec   change the format                      CELL_format                CHG_INPUT, '['                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=a d=0 a=< c=  0 r=  0 d=  0    

COND     try number                                                         
  exec   change the format                      CELL_format                CHG_INPUT, '7'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=a d=0 a=< c=  0 r=  0 d=  0    

COND     format to exponential                                              
  exec   change the format                      CELL_format                CHG_INPUT, 'e'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=e d=0 a=< c=  0 r=  0 d=  0    

COND     format to hexidecimal                                              
  exec   change the format                      CELL_format                CHG_INPUT, 'x'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=x d=0 a=< c=  0 r=  0 d=  0    

COND     format to bullet                                                   
  exec   change the format                      CELL_format                CHG_INPUT, 'b'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=b d=0 a=< c=  0 r=  0 d=  0    

COND     format to odd character                                            
  exec   change the format                      CELL_format                CHG_INPUT, '*'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=b d=0 a=< c=  0 r=  0 d=  0    

COND     format to fill with equal signs                                    
  exec   change the format                      CELL_format                CHG_INPUT, '='                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f== d=0 a=< c=  0 r=  0 d=  0    

COND     format to fill with underscores                                    
  exec   change the format                      CELL_format                CHG_INPUT, '_'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=_ d=0 a=< c=  0 r=  0 d=  0    

COND     format to fill with dashes                                         
  exec   change the format                      CELL_format                CHG_INPUT, '-'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=- d=0 a=< c=  0 r=  0 d=  0    

COND     format to fill with spaces                                         
  exec   change the format                      CELL_format                CHG_INPUT, ' '                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=< c=  0 r=  0 d=  0    

COND     format to illegal character                                        
  exec   change the format                      CELL_format                CHG_INPUT, 'W'                                                      i_not      0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=  d=0 a=< c=  0 r=  0 d=  0    

COND     format to percent                                                  
  exec   change the format                      CELL_format                CHG_INPUT, '%'                                                      i_equal    0                                                       
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=s f=% d=0 a=< c=  0 r=  0 d=  0    

   COND       purge all cells                                                                                                                                                                                       
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       verify program teardown                                                                                                                                                                               
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                            
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            



#======  ==========(description)========================(method)=========  =======================(params)========================  =(test)== =======================(result)========================= 
SCRP     test vi_input mode                     KEYS_input                

COND     verify program setup                                               
  exec   setup the program                      PROG_testing                                                                        i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     initialize contents                                                
  code   copy an empty string to contents       strncpy(contents, "", MAX_STR);
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0: 0) ::                           

COND     set the mode to input                                              
  code   set the mode                           mode = 'I';
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add a first character                                              
  exec   send a character to input              KEYS_input                  ' ', 't'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 1: 1) :t:                          
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     take one away                                                      
  exec   send a character to input              KEYS_input                  ' ', 127                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0: 0) ::                           
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     try to take another                                                
  exec   send a character to input              KEYS_input                  ' ', 127                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0: 0) ::                           
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     try to take a third                                                
  exec   send a character to input              KEYS_input                  ' ', 127                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0: 0) ::                           
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add a second one                                                   
  exec   send a character to input              KEYS_input                  ' ', 't'                                                i_equal    0                                                       
  exec   send a character to input              KEYS_input                  ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 2: 2) :te:                         
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     take one away                                                      
  exec   send a character to input              KEYS_input                  ' ', 127                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 1: 1) :t:                          
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add a second one back                                              
  exec   send a character to input              KEYS_input                  ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 2: 2) :te:                         
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add two more                                                       
  exec   send a character to input              KEYS_input                  ' ', 's'                                                i_equal    0                                                       
  exec   send a character to input              KEYS_input                  ' ', 't'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 4: 4) :test:                       
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     get out of input mode                                              
  exec   send a character to input              KEYS_input                  ' ', 27                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 4: 4) :test:                       
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     try to go back in wrong mode                                       
  code   put the position in the middle         my.cpos = 2;
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    
  exec   send a character to input              KEYS_input                  ' ', '_'                                                i_not      0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : ( 2: 4) :test:                       
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     get back into input in the middle                                  
  code   set the mode                           mode = 'I';
  code   put the position in the middle         my.cpos = 2;
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add a new character                                                
  exec   send a character to input              KEYS_input                  ' ', '_'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : ( 3: 5) :te_st:                      
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add more characters                                                
  exec   send a character to input              KEYS_input                  ' ', 'j'                                                i_equal    0                                                       
  exec   send a character to input              KEYS_input                  ' ', 'o'                                                i_equal    0                                                       
  exec   send a character to input              KEYS_input                  ' ', 'e'                                                i_equal    0                                                       
  exec   send a character to input              KEYS_input                  ' ', '_'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : ( 7: 9) :te_joe_st:                  
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     get out of input mode                                              
  exec   send a character to input              KEYS_input                  ' ', 27                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : ( 7: 9) :te_joe_st:                  
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     get back into input before the beginning                           
  code   set the mode                           mode = 'I';
  code   put the position in the middle         my.cpos = -20;
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add a new character                                                
  exec   send a character to input              KEYS_input                  ' ', 'Z'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 1:10) :Zte_joe_st:                 
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     get out of input mode                                              
  exec   send a character to input              KEYS_input                  ' ', 27                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 1:10) :Zte_joe_st:                 
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     get back into input after the ending                               
  code   set the mode                           mode = 'I';
  code   put the position in the middle         my.cpos = 300;
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     add a new character                                                
  exec   send a character to input              KEYS_input                  ' ', 'Y'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : (11:11) :Zte_joe_stY:                
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     get out of input mode                                              
  exec   send a character to input              KEYS_input                  ' ', 27                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : (11:11) :Zte_joe_stY:                
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     get back into input after the ending                               
  code   set the mode                           mode = 'I';
  code   put the position in the middle         my.cpos = 300;
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : I                                    

COND     verify program teardown                                            
  exec   wrap-up the program                    PROG_end                                                                            i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            




#======  ==========(description)========================(method)=========  =======================(params)========================  =(test)== =======================(result)========================= 
SCRP     test vi_source mode                    KEYS_source               

COND     verify program setup                                               
  exec   setup the program                      PROG_testing                                                                        i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     setup some testing variables                                       
  code   create a custom expect string          char custom[2000];
  code   create a pointer to one cell           tCELL *x_one  = NULL;

COND     add first cell                                                     
  exec   add a cell                             CELL__create               0, 10, 10                                                   p_exists   0                                                       
  code   save cell pointer                      x_one  = yUNIT_p_rc;
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (    0) :(null):                     
  get    check the cell's information           unit_accessor              "cell_info",     x_one                                   s_equal    Cell Information : t=- f=? d=0 a=? c=  0 r=  0 d=  0    

   COND       get the initial selection set                               
     exec     set the current cell                 LOC_jump              0, 10, 10                                                     i_equal     0                                                            

COND     initialize contents                                                
  code   copy a string to contents              strncpy(contents, "testing the source mode", MAX_STR);
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    
  code   set the mode                           mode = 'S';
  code   set the position                       my.cpos =   0;
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (    0) :(null):                     

COND     move one to the right                                              
  exec   send a character to source             KEYS_source                 ' ', 'l'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : ( 1:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     move one to the left                                               
  exec   send a character to source             KEYS_source                 ' ', 'h'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     move one to the left, again                                        
  exec   send a character to source             KEYS_source                 ' ', 'h'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     go to the end                                                      
  exec   send a character to source             KEYS_source                 ' ', '$'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     move one to the right                                              
  exec   send a character to source             KEYS_source                 ' ', 'l'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     go to the start                                                    
  exec   send a character to source             KEYS_source                 ' ', '0'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (    0) :(null):                     

COND     get out of source mode                                             
  exec   send a character to input              KEYS_source                 ' ', 10                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : N                                    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   23) :testing the source mode:    

COND     call source in wrong mode                                          
  exec   send a character to source             KEYS_source                 ' ', 'l'                                                i_not      0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : N                                    

COND     call source in right mode                                          
  code   set the mode                           mode = 'S';
  code   set the position                       my.cpos =   0;
  exec   send a character to source             KEYS_source                 ' ', 'l'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : ( 1:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : S                                    

COND     move a large right                                                 
  exec   send a character to source             KEYS_source                 ' ', 'L'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (g) : ( 6:23) :testing the source mode:    

COND     move a large right, again                                          
  exec   send a character to source             KEYS_source                 ' ', 'L'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : (11:23) :testing the source mode:    

COND     move to next word beginning                                        
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : (12:23) :testing the source mode:    

COND     move to next word beginning, again                                 
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (m) : (19:23) :testing the source mode:    

COND     move to next word beginning, when only end                         
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    

COND     move to next word beginning, when no more                          
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    

COND     move to beginning                                                  
  exec   send a character to source             KEYS_source                 ' ', '0'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    

COND     move to next word end                                              
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (g) : ( 6:23) :testing the source mode:    

COND     move to next word end, again                                       
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (10:23) :testing the source mode:    

COND     move to last word beginning                                        
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 8:23) :testing the source mode:    

COND     move to last word beginning, again                                 
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    

COND     move to last word beginning, when no more                          
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 0:23) :testing the source mode:    

COND     move to ending                                                     
  exec   send a character to source             KEYS_source                 ' ', '$'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    

COND     move to next word end, when no more                                
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    

COND     move to last word beginning                                        
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (m) : (19:23) :testing the source mode:    

COND     move to last word ending                                           
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (22:23) :testing the source mode:    

COND     move to last word beginning                                        
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (m) : (19:23) :testing the source mode:    

COND     get out of source mode                                             
  exec   send a character to input              KEYS_source                 ' ', 27                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (m) : (19:23) :testing the source mode:    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : N                                    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   23) :testing the source mode:    

COND     more complex content                                               
  code   copy a string to contents              strncpy(contents, " testing   the/ . s-mode ", MAX_STR);
  code   set the mode                           mode = 'S';
  code   set the position                       my.cpos =   0;
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0:25) : testing   the/ . s-mode :  
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   23) :testing the source mode:    

COND     move to next word beginning                                        
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 1:25) : testing   the/ . s-mode :  

COND     move to next word beginning, again                                 
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : (11:25) : testing   the/ . s-mode :  

COND     move to next word beginning, again                                 
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (.) : (16:25) : testing   the/ . s-mode :  

COND     move to next word beginning, again                                 
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : (18:25) : testing   the/ . s-mode :  

COND     move to next word beginning, again                                 
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : (24:25) : testing   the/ . s-mode :  

COND     move to beginning                                                  
  exec   send a character to source             KEYS_source                 ' ', '0'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0:25) : testing   the/ . s-mode :  

COND     move to next word ending                                           
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (g) : ( 7:25) : testing   the/ . s-mode :  

COND     move to next word ending, again                                    
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (/) : (14:25) : testing   the/ . s-mode :  

COND     move to next word ending, again                                    
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (.) : (16:25) : testing   the/ . s-mode :  

COND     move to next word ending, again                                    
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (23:25) : testing   the/ . s-mode :  

COND     move to next word ending, again                                    
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (e) : (23:25) : testing   the/ . s-mode :  

COND     move to last word beginnning                                       
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (s) : (18:25) : testing   the/ . s-mode :  

COND     move to last word beginnning                                       
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (.) : (16:25) : testing   the/ . s-mode :  

COND     move to last word beginnning                                       
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : (11:25) : testing   the/ . s-mode :  

COND     move to last word beginnning                                       
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 1:25) : testing   the/ . s-mode :  

COND     move to last word beginnning                                       
  exec   send a character to source             KEYS_source                 ' ', 'b'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 1:25) : testing   the/ . s-mode :  

COND     get out of source mode                                             
  exec   send a character to input              KEYS_source                 ' ', 10                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (t) : ( 1:25) : testing   the/ . s-mode :  
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : N                                    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   25) : testing   the/ . s-mode :  

COND     get back in there                                                  
  code   set the mode                           mode = 'S';
  code   set the position                       my.cpos =   0;
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0:25) : testing   the/ . s-mode :  
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   25) : testing   the/ . s-mode :  

COND     move to next word ending                                           
  exec   send a character to source             KEYS_source                 ' ', 'e'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (g) : ( 7:25) : testing   the/ . s-mode :  

COND     delete the current character                                       
  exec   send a character to source             KEYS_source                 ' ', 'x'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 7:24) : testin   the/ . s-mode :   
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   25) : testing   the/ . s-mode :  

COND     delete the current character                                       
  exec   send a character to source             KEYS_source                 ' ', 'x'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 7:23) : testin  the/ . s-mode :    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   25) : testing   the/ . s-mode :  

COND     get out of source mode                                             
  exec   send a character to input              KEYS_source                 ' ', 10                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 7:23) : testin  the/ . s-mode :    
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : N                                    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   23) : testin  the/ . s-mode :    

COND     get back in there                                                  
  code   set the mode                           mode = 'S';
  code   set the position                       my.cpos =   0;
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : ( 0:23) : testin  the/ . s-mode :    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   23) : testin  the/ . s-mode :    

COND     move over two words                                                
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  exec   send a character to source             KEYS_source                 ' ', 'w'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     (.) : (14:23) : testin  the/ . s-mode :    

COND     delete till end of line                                            
  exec   send a character to source             KEYS_source                 ' ', 'D'                                                i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : (13:14) : testin  the/ :             
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   23) : testin  the/ . s-mode :    

COND     get out of source mode                                             
  exec   send a character to input              KEYS_source                 ' ', 10                                                 i_equal    0                                                       
  get    check the contents                     unit_accessor              "cell_contents", NULL                                    s_equal    Contents     ( ) : (13:14) : testin  the/ :             
  get    check the mode                         unit_accessor              "mode",          NULL                                    s_equal    Mode             : N                                    
  get    check the cell's source string         unit_accessor              "cell_source",   x_one                                   s_equal    Cell Source      : (   14) : testin  the/ :             

COND     purge all cells                                                    
  exec   purge the cells                        CELL__purge                                                                         i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

COND     verify that all cells are detached                                 
  code   create a custom expect string          sprintf(CUSTOM, "Sheet Location   : p=%9p",  NULL);
  get    check the sheet location               unit_accessor              "sheet_who",     tabs[0].sheet[1][1]                             s_equal    [[ CUSTOM ]]                                            
  code   create a custom expect string          sprintf(CUSTOM, "Sheet Location   : p=%9p",  NULL);
  get    check the sheet location               unit_accessor              "sheet_who",     tabs[0].sheet[1][2]                             s_equal    [[ CUSTOM ]]                                            

COND     verify program teardown                                            
  exec   wrap-up the program                    PROG_end                                                                            i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   0, num=   0, fore=   0, back=   0            







#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789- 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)=================================== 
SCRP          verify row movement                                          KEYS_row                                                     

   COND       verify program setup                                        
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup custom variables                                      
     code     create a custom expect string        char custom[2000];

   COND       setup initial vertical values                               
     code     window size full                     my.y_full         =  44;
     code     window size top                      my.y_top          =   2;
     code     window size bottom                   my.y_bottom       =   2;
     code     window size avail                    my.y_avail        =  40;
     code     number of rows                       tabs[0].nrow      = 200;
     code     beginning row                        BROW              =   0;
     code     ending row                           EROW              =   0;
     code     current row                          tabs[0].crow      =   0;

   COND       setup initial horizonal values                              
     code     window size full                     my.x_full         =  80;
     code     window size left                     my.x_left         =   5;
     code     window size right                    my.x_right        =   0;
     code     window size availible                my.x_avail        =  75;
     code     number of cols                       tabs[0].ncol      = 100;
     code     beginning col                        BCOL              =   0;
     code     ending col                           ECOL              =   0;
     code     current cols                         tabs[0].ccol      =   0;

   COND       initialize the variables                                    
     exec     process row movement                 KEYS_row              " r"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   0, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move down a row                                             
     exec     process row movement                 KEYS_row              " j"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   1, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move down again                                             
     exec     process row movement                 KEYS_row              " j"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   2, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move down a big move                                        
     exec     process row movement                 KEYS_row              " J"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   7, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move down a big move again                                  
     exec     process row movement                 KEYS_row              " J"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  12, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move one row up                                             
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  11, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move one row up again                                       
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  10, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a big move                                          
     exec     process row movement                 KEYS_row              " K"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   5, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a couple                                            
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       try a illegal row movement                                  
     exec     process row movement                 KEYS_row              " h"                                                          i_lesser    0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       try a illegal modifier                                      
     exec     process row movement                 KEYS_row              "hj"                                                          i_lesser    0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       try a blank movement string                                 
     exec     process row movement                 KEYS_row              "  "                                                          i_lesser    0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       try a long movement string                                  
     exec     process row movement                 KEYS_row              " jj"                                                         i_lesser    0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       try a empty movement string                                 
     exec     process row movement                 KEYS_row              ""                                                            i_lesser    0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       try a NULL movement string                                  
     exec     process row movement                 KEYS_row              NULL                                                          i_lesser    0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   3, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a big move (not enough room)                        
     exec     process row movement                 KEYS_row              " K"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   0, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a row (not enough room)                             
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   0, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to bottom of screen                                    
     exec     process row movement                 KEYS_row              "gb"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  39, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a row                                               
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  38, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move down a row                                             
     exec     process row movement                 KEYS_row              " j"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  39, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move past the bottom                                        
     exec     process row movement                 KEYS_row              " j"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   1, cur=  40, end=  40    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move past the bottom with a big move                        
     exec     process row movement                 KEYS_row              " J"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   6, cur=  45, end=  45    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up three rows                                          
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   6, cur=  42, end=  45    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move past the bottom with a big move                        
     exec     process row movement                 KEYS_row              " J"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   8, cur=  47, end=  47    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to top of the screen                                   
     exec     process row movement                 KEYS_row              "gt"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   8, cur=   8, end=  47    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a row                                               
     exec     process row movement                 KEYS_row              " k"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   7, cur=   7, end=  46    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a big move                                          
     exec     process row movement                 KEYS_row              " K"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   2, cur=   2, end=  41    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move up a big move again (without enough room)              
     exec     process row movement                 KEYS_row              " K"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   0, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move down a big move                                        
     exec     process row movement                 KEYS_row              " J"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   5, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to middle of the screen                                
     exec     process row movement                 KEYS_row              "g."                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  19, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to top quarter                                         
     exec     process row movement                 KEYS_row              "gk"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  10, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to bottom quarter                                      
     exec     process row movement                 KEYS_row              "gj"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  30, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to the top of the screen                               
     exec     process row movement                 KEYS_row              "gt"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=   0, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to bottom quarter                                      
     exec     process row movement                 KEYS_row              "gj"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  30, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to middle of the screen                                
     exec     process row movement                 KEYS_row              "g."                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  19, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    

   COND       move to the bottom of the screen                            
     exec     process row movement                 KEYS_row              "gb"                                                          i_equal     0                                                                      
     get      check the row data                   move_unit             "row_stats"          , NULL                                   s_equal     s_move row stat  : num= 200, scr=  40, beg=   0, cur=  39, end=  39    
     get      check the col data                   move_unit             "col_stats"          , NULL                                   s_equal     s_move col stat  : num= 100, scr=  75, beg=   0, cur=   0, end=   0    








COND     move to the very bottom                                           
  exec   process row movement                   KEYS_row                   " G"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=199, e=199    

COND     move up one                                                       
  exec   process row movement                   KEYS_row                   " k"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=198, e=199    

COND     move up one                                                       
  exec   process row movement                   KEYS_row                   " k"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=197, e=199    

COND     move up one big move                                              
  exec   process row movement                   KEYS_row                   " K"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=192, e=199    

COND     move down                                                         
  exec   process row movement                   KEYS_row                   " j"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=193, e=199    

COND     move down by big move                                             
  exec   process row movement                   KEYS_row                   " J"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=198, e=199    

COND     move down by big move (again)                                     
  exec   process row movement                   KEYS_row                   " J"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=199, e=199    

COND     move down, again                                                  
  exec   process row movement                   KEYS_row                   " j"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=160, c=199, e=199    

COND     move to top                                                       
  exec   process row movement                   KEYS_row                   " _"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c=  0, e= 39    

COND     move to screen bottom                                             
  exec   process row movement                   KEYS_row                   "gb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c= 39, e= 39    

COND     move to screen middle                                             
  exec   process row movement                   KEYS_row                   "g."                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c= 19, e= 39    

COND     move to screen top quarter                                        
  exec   process row movement                   KEYS_row                   "gk"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c= 10, e= 39    

COND     move to screen bottom quarter                                     
  exec   process row movement                   KEYS_row                   "gj"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c= 30, e= 39    

COND     move to screen bottom                                             
  exec   process row movement                   KEYS_row                   "gb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c= 39, e= 39    

COND     move down                                                         
  exec   process row movement                   KEYS_row                   " j"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  1, c= 40, e= 40    

COND     move down by big move                                             
  exec   process row movement                   KEYS_row                   " J"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  6, c= 45, e= 45    

COND     move up one                                                       
  exec   process row movement                   KEYS_row                   " k"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  6, c= 44, e= 45    

COND     move up one big move                                              
  exec   process row movement                   KEYS_row                   " K"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  6, c= 39, e= 45    

COND     move to screen top                                                
  exec   process row movement                   KEYS_row                   "gt"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  6, c=  6, e= 45    

COND     move to screen middle                                             
  exec   process row movement                   KEYS_row                   "g."                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  6, c= 25, e= 45    

COND     move to screen top                                                
  exec   process row movement                   KEYS_row                   "gt"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  6, c=  6, e= 45    

COND     move up one                                                       
  exec   process row movement                   KEYS_row                   " k"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  5, c=  5, e= 44    

COND     move up one big move                                              
  exec   process row movement                   KEYS_row                   " K"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b=  0, c=  0, e= 39    

COND     page down                                                         
  exec   process row movement                   KEYS_row                   "cb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 39, c= 39, e= 78    

COND     page down, again                                                  
  exec   process row movement                   KEYS_row                   "cb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 78, c= 78, e=117    

COND     page up                                                           
  exec   process row movement                   KEYS_row                   "ct"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 39, c= 78, e= 78    

COND     scroll to top                                                     
  exec   process row movement                   KEYS_row                   "zt"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 78, c= 78, e=117    

COND     scroll to bottom                                                  
  exec   process row movement                   KEYS_row                   "zb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 39, c= 78, e= 78    

COND     scroll to top quarter                                             
  exec   process row movement                   KEYS_row                   "zk"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 69, c= 78, e=108    

COND     scroll to bottom quarter                                          
  exec   process row movement                   KEYS_row                   "zj"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 49, c= 78, e= 88    

COND     scroll to bottom                                                  
  exec   process row movement                   KEYS_row                   "zb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 39, c= 78, e= 78    

COND     scroll to bottom (again)                                          
  exec   process row movement                   KEYS_row                   "zb"                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 39, c= 78, e= 78    

COND     scroll to middle                                                  
  exec   process row movement                   KEYS_row                   "z."                                                     i_equal    0                                                       
  get    check the row data                     unit_accessor              "rows",          NULL                                    s_equal    Rows             : n=200, a= 40, b= 60, c= 78, e= 99    

COND     purge all cells                                                   
  exec   purge the cells                        CELL__purge                                                                         i_equal    0                                                       
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)            
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            




#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  04 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)===================================  04 
SCRP          (s_move) verify edge movements                               KEYS__edge                                                   

   COND       initialize testing                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------  04 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                       04 
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)             04 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       setup testing variables                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------  04 
     code     create a custom expect string        char x_custom [2000];                                                                                                                                                       04 
     code     create a register list holder        char x_list   [2000];                                                                                                                                                       04 

   COND       size sheet one                                              
     code     number of cols                       tabs[0].ncol      =  40;
     code     number of rows                       tabs[0].nrow      =  40;

   COND       setup a center table of cells                                                                                                                                                                                    04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  3, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  3,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  4,  3, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  4,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  4,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  3, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5,  5, "+10"                                              p_exists    0                                                                       04 
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=   9, f=   9, b=   9                               04 

   COND       setup a second table of cells (slightly askew)                                                                                                                                                                   04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 10,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 10,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 10,  6, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 11,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 11,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 11,  6, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 12,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 12,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 12,  6, "+10"                                              p_exists    0                                                                       04 
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=  18, f=  18, b=  18                               04 

   COND       setup a smaller table to right of both                                                                                                                                                                           04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 20,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 20,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 21,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 21,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 22,  4, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 22,  5, "+10"                                              p_exists    0                                                                       04 
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=  24, f=  24, b=  24                               04 

   COND       place a couple of outliers                                                                                                                                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  2,  1, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0, 30,  5, "+10"                                              p_exists    0                                                                       04 
     exec     add a cell                           CELL_change           CHG_INPUT, 0,  5, 30, "+10"                                              p_exists    0                                                                       04 
     get      review the cell counts               unit_accessor         "cell_count",    NULL                                         s_equal     Cell Links Count : n=  27, f=  27, b=  27                               04 





   COND       wrap-up testing                                              ------------------------------------------------------------  ------------------------------------------------------------------------------------  04 
     exec     purge the cells                      CELL__purge                                                                         i_equal     0                                                                       04 
     get      review the cell linked list          CELL__unit            "cell_list",     NULL                                         u_round/1   s_cell main list : num=   0, head=    (nil), tail=    (nil)             04 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            



#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  12 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ====(return var)====  ==(test)==  ==========================(results)===================================  ve 
SCRP          (s_file) verify functioning of ySTR_trim                     ySTR_trim                                                                                                                                                                     05 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       setup some testing variables                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     create the input string              char  x_orig   [2000] = "    testing for,  a/\"clear  result\".   ";                                                                                                                                  05 
     code     create the working string            char  x_work   [2000] = "";                                                                                                                                                                           05 
     code     create a return variable             char *x_return        = NULL;                                                                                                                                                                         05 

   COND       do no trimming on the string                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_NONE                                                        p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   39) :    testing for,  a/\"clear  result\".   :  05 

   COND       trim the front of the string                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_HEAD                                                        p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   35) :testing for,  a/\"clear  result\".   :      05 

   COND       trim the tail of the string                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_TAIL                                                        p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   36) :    testing for,  a/\"clear  result\".:     05 

   COND       trim both sides of the string                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_BOTH                                                        p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   32) :testing for,  a/\"clear  result\".:         05 

   COND       try bad modes                                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , '-'                                                              p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   39) :    testing for,  a/\"clear  result\".   :  05 
     exec     call the function                    ySTR_trim             x_work           , '0'                                                              p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   39) :    testing for,  a/\"clear  result\".   :  05 
     exec     call the function                    ySTR_trim             x_work           , ' '                                                              p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   39) :    testing for,  a/\"clear  result\".   :  05 
     exec     call the function                    ySTR_trim             x_work           , 'B'                                                              p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   39) :    testing for,  a/\"clear  result\".   :  05 

   COND       compress non-quoted whitespace to one each                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_SINGLE                                                      p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   31) :testing for, a/\"clear  result\".:          05 

   COND       compress non-quoted whitespace out of the string             ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_EVERY                                                       p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   29) :testingfor,a/\"clear  result\".:            05 

   COND       try a null string                                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the function                    ySTR_trim             NULL             , ySTR_EVERY                                                       p_null      0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (-----) ::                                           05 

   COND       try an empty string                                          ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, ""    );                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_EVERY                                                       p_null      0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (    0) ::                                           05 

   COND       compress all whitespace out of the string                    ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_trim             x_work           , ySTR_MAX                                                         p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   27) :testingfor,a/\"clearresult\".:              05 


   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      


#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  12 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ====(return var)====  ==(test)==  ==========================(results)===================================  ve 
SCRP          (s_file) verify functioning of ySTR_clean                    ySTR_clean                                                                                                                                                                    05 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       setup some testing variables                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     create the input string              char  x_orig   [2000] = "testing for (.ne) :- or [an0the9] ?!#t";                                                                                                                                    
     code     create the working string            char  x_work   [2000] = "";                                                                                                                                                                          
     code     create a return variable             char *x_return        = NULL;                                                                                                                                                                        

   COND       do no cleaning on the string                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                             
     exec     call the function                    ySTR_clean            x_work           , ySTR_NONE      , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for (.ne) :- or [an0the9] ?!#t:     05 

   COND       agressive alpha cleaning (no compress)                       ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_ALPHA     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for __ne_ __ or _an_the__ ___t:     05 

   COND       agressive alpha cleaning (compress)                          ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_ALPHA     , ySTR_COMPRESS                                   p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   26) :testing for ne  or anthe t:                 05 

   COND       now alpha-numeric cleaning (no compress)                     ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_ALNUM     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for __ne_ __ or _an0the9_ ___t:     05 

   COND       and, basic cleaning (no compress)                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_BASIC     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for __ne_ _- or _an0the9_ ___t:     05 

   COND       then, writing cleaning (no compress)                         ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_WRITE     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for (.ne) :- or _an0the9_ ?!_t:     05 

   COND       then, writing cleaning (no compress) with new replacement    ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_WRITE     , '~'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for (.ne) :- or ~an0the9~ ?!~t:     05 

   COND       then, writing cleaning (with compression)                    ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_WRITE     , ySTR_COMPRESS                                   p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   35) :testing for (.ne) :- or an0the9 ?!t:        05 

   COND       and, extending cleaning (no compress)                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_EXTEN     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for (.ne) :- or [an0the9] ?!#t:     05 

   COND       finally, 7-bit safe cleaning                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_SEVEN     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   38) :testing for (.ne) :- or [an0the9] ?!#t:     05 

   COND       now change the original                                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     alter the original string            strcpy (x_orig, "test ;#\tone10");                                                                                                                                                                    05 
     code     and add a extended char              x_orig [ 3] = 200;                                                                                                                                                                                    05 
     code     and add a extended char              x_orig [10] =  -5;                                                                                                                                                                                    05 

   COND       again with extended cleaning                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_EXTEN     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   13) :tes_ ;#_on_10:                              05 

   COND       finally, 7-bit safe cleaning                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_SEVEN     , '_'                                             p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   13) :tes_ ;#\ton_10:                             05 

   COND       then, 7-bit safe cleaning (with compression)                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     code     refresh working string               strcpy (x_work, x_orig);                                                                                                                                                                              05 
     exec     call the function                    ySTR_clean            x_work           , ySTR_SEVEN     , ySTR_COMPRESS                                   p_exists    0                                                                       05 
     get      check the final string               FILE_unit             "string"         , 0                                                                s_equal     s_file string    : (   11) :tes ;#\ton10:                               05 

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      



#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  12 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ====(return var)====  ==(test)==  ==========================(results)===================================  ve 
SCRP          (s_file) verify functioning of ySTR_count                    ySTR_count                                                                                                                                                                    05 

   COND       verify program setup                                         ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                      

   COND       check on a single instance                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the function                    ySTR_count            "   testing   "  , 'e'                                                              i_equal     1                                                                       05 

   COND       check on a double instance                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the function                    ySTR_count            "   testing   "  , 't'                                                              i_equal     2                                                                       05 

   COND       check on a large instance                                    ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the function                    ySTR_count            "   testing   "  , ' '                                                              i_equal     6                                                                       05 

   COND       check on a zero instance                                     ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the function                    ySTR_count            "   testing   "  , 'x'                                                              i_equal     0                                                                       05 

   COND       check on a wrong case                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the function                    ySTR_count            "   testing   "  , 'T'                                                              i_equal     0                                                                       05 

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  04 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)===================================  04 
SCRP          (s_file) verify basic undo and redo handling                 HIST_undo, HIST_redo                                         

   COND       initialize testing                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------  04 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                       04 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   0, c=  -1, n/a                                  05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0 too large                                       05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 too large                                       05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 too large                                       05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1 too large                                       05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 too large                                       05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 too large                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells                                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       add a cell                                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the source string             CELL_change           CHG_INPUT,    0,   10,   10, "test"                                                 p_exists    0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   1, c=   0, change                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1 too large                                       05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 too large                                       05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 too large                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells                                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       add a cell                                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the source string             CELL_change           CHG_INPUT,    0,   11,   10, "another"                                              p_exists    0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   2, c=   1, change                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :another:                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (have two cells now)                             ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   7) :another:                                     05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       undo a simple change                                         ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 

   COND       check stack condition (current pos changed)                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   2, c=   0, change                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :another:                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (second cell went away)                          ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       undo first change to get to blank                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 

   COND       check stack condition (current pos changed again)            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   2, c=  -1, n/a                                  05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :another:                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (all cells gone)                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       put first one back                                           ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_redo                                                                                                 i_equal     0                                                                       05 

   COND       check stack condition (current pos changed)                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   2, c=   0, change                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :another:                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (have the first cell back)                       ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   2, num=   1, fore=   1, back=   1            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       redirect by adding a new cell                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the source string             CELL_change           CHG_INPUT,    0,   11,   10, "alternate"                                            p_exists    0                                                                       05 

   COND       check stack condition (second entry changed)                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   2, c=   1, change                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (back to two entries)                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       format a the first cell                                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     set the current cell                 LOC_jump                 0,   10,   10                                                                    i_equal     0                                                                       05 
     exec     change the formatting                CELL_format           CHG_INPUT        , '-'                                                              i_equal     0                                                                       05 

   COND       check stack condition (added a formatting entry)             ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   3, c=   2, format                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (shows format)                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=- d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       align it too                                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the alignment                 CELL_align            CHG_INPUT        , '|'                                                              i_equal     0                                                                       05 
     get      check the cell's printable string    CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (   8) :--test- :                                    05 

   COND       check stack condition (added a formatting entry)             ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   4, c=   3, align                                05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, align                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :<:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :|:                                             05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (shows alignment)                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=- d=0 a=| c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       undo last alignment change                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's printable string    CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (   8) :test--- :                                    05 

   COND       check stack condition (added a formatting entry)             ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   4, c=   2, format                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, align                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :<:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :|:                                             05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (alignment roll back)                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=- d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       widen column                                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 
     exec     change the alignment                 CELL_width            CHG_INPUT        , 'N'                                                              i_equal     0                                                                       05 
     get      check the cell's printable string    CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (  12) :test------- :                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       check stack condition (added a width entry)                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   4, c=   3, width                                05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, width                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       check cells (no change)                                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=- d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       heighten row                                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     exec     change the alignment                 CELL_height           CHG_INPUT        , 'j'                                                              i_equal     0                                                                       05 
     get      check the cell's printable string    CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (  12) :test------- :                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  2                                05 

   COND       check stack condition (added a height entry)                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   5, c=   4, height                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, width                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, height                 05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :1:                                             05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :2:                                             05 

   COND       check cells (no change)                                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=- d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       undo height change                                           ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       undo width change                                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 

   COND       undo alighment change                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   5, c=   1, change                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, width                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, height                 05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :1:                                             05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :2:                                             05 

   COND       check cells (back to plain cells)                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       redo all three                                               ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     redo change                          HIST_redo                                                                                                 i_equal     0                                                                       05 
     exec     redo change                          HIST_redo                                                                                                 i_equal     0                                                                       05 
     exec     redo change                          HIST_redo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  2                                05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   5, c=   4, height                               05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, width                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, height                 05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :1:                                             05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :2:                                             05 

   COND       check cells                                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   4) :test:                                        05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=s f=- d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   9) :alternate:                                   05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=s f=? d=0 a=< c=  0 r=  0 d=  0                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       undo everything                                              ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     exec     undo the last change                 HIST_undo                                                                                                 i_equal     0                                                                       05 

   COND       check stack condition (to first entry)                       ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   5, c=  -1, n/a                                  05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :test:                                          05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :alternate:                                     05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, format                 05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :?:                                             05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :-:                                             05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  10, r=  10, width                  05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, height                 05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :1:                                             05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :2:                                             05 

   COND       check cells (back to nothing)                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            
     get      check entry 01                       CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 01                       CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 02                       CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 02                       CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 03                       CELL__unitnew         "cell_source"    , "0m11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 03                       CELL__unitnew         "cell_info"      , "0m11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 04                       CELL__unitnew         "cell_source"    , "0n11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 04                       CELL__unitnew         "cell_info"      , "0n11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry 05                       CELL__unitnew         "cell_source"    , "0o11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry 05                       CELL__unitnew         "cell_info"      , "0o11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 

   COND       undo past the begining                                       ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo                                 HIST_undo                                                                                                 i_lesser    0                                                                       05 

   COND       clear history                                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     clear                                HIST_clear                                                                                                i_equal     0                                                                       05 

   COND       check stack condition (back to empty)                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   0, c=  -1, n/a                                  05 
     get      check entry 01                       FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0 too large                                       05 
     get      check entry 01                       FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 too large                                       05 
     get      check entry 01                       FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 too large                                       05 
     get      check entry 02                       FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1 too large                                       05 
     get      check entry 02                       FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 too large                                       05 
     get      check entry 02                       FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 too large                                       05 
     get      check entry 03                       FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry 03                       FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry 04                       FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry 04                       FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry 05                       FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry 05                       FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 

   COND       verify program teardown                                      ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     wrap-up the program                  PROG_end                                                                            i_equal     0                                                                      




#23456789012  123456789-123456789-123456789-12345  123456789-123456789-  123456789-123456789-123456789-123456789-123456789-123456789-  123456789-  123456789-123456789-123456789-123456789-123456789-123456789-123456789-  04 
#==(verb)===  ===========(description)===========  =====(function)=====  ========================(arguments)=========================  ==(test)==  ==========================(results)===================================  04 
SCRP          (s_file) verify basic undo and redo handling                 HIST_undo, HIST_redo                                          --------------------  ----------  ----------------------------------------------------------------------  -- 

   COND       initialize testing                                           ------------------------------------------------------------  ------------------------------------------------------------------------------------  04 
     exec     setup the program                    PROG_testing                                                                        i_equal     0                                                                       04 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                         s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0            

   COND       check stack condition (initially blank)                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   0, c=  -1, n/a                                  05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       check cells (nothing there)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   1, num=   0, fore=   0, back=   0             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (----) ::                                            05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (----) ::                                            05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : --- --- --- --- ----- ----- -----                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (----) ::                                            05 

   COND       add a cell                                                   ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the source string             CELL_change           CHG_INPUT,    0,   10,   10, "+1234.56"                                             p_exists    0                                                                       05 

   COND       add a second cell                                            ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the source string             CELL_change           CHG_INPUT,    0,   11,   10, "+9876.54"                                             p_exists    0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   2, c=   1, change                               05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       check cells (nothing there)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   8) :+1234.56:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (   8) :   1235 :                                    05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   8) :+9876.54:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (   8) :   9877 :                                    05 

   COND       set both cells into a range                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_set                  0,   10,   10,   11,   10                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  10, br=  10, ec=  11, er=  10      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       widen columns                                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 
     exec     change the width                     CELL_width            CHG_INPUT        , 'N'                                                              i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   4, c=   3, WIDTH                                05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       check cells (nothing there)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   8) :+1234.56:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (  12) :       1235 :                                05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   8) :+9876.54:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (  12) :       9877 :                                05 

   COND       undo width (should do both)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo                                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 

   COND       check stack condition (just a pointer change)                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   4, c=   1, change                               05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       check cells (both width changes undone)                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   8) :+1234.56:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (   8) :   1235 :                                    05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   8) :+9876.54:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (   8) :   9877 :                                    05 

   COND       redo width (should do both)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     redo                                 HIST_redo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   4, c=   3, WIDTH                                05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       check cells (nothing there)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   8) :+1234.56:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (  12) :       1235 :                                05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   8) :+9876.54:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=n f=? d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (  12) :       9877 :                                05 

   COND       widen first column                                           ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the selection                   SEL_set                  0,   10,   10,   10,   10                                  i_equal     0                                                                      
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     exec     change the width                     CELL_width            CHG_INPUT        , 'w'                                                              i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 20, height=  1                                05 

   COND       widen second column                                          ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     call the selection                   SEL_set                  0,   11,   10,   11,   10                                  i_equal     0                                                                      
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     exec     change the width                     CELL_width            CHG_INPUT        , 'w'                                                              i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 20, height=  1                                05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   6, c=   5, width                                05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :12:                                            05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :20:                                            05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5, t=   0, c=  11, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 :12:                                            05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 :20:                                            05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       undo width (should just do last)                             ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo                                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 20, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       undo width (should another)                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo                                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       undo width (should then do the double)                       ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo                                 HIST_undo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width=  8, height=  1                                05 

   COND       redo width (should then do the double)                       ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     redo                                 HIST_redo                                                                                                 i_equal     0                                                                       05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0k11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 
     get      check the cell's size                CELL__unitnew         "cell_size"      , "0l11"                                                           s_equal     s_celln size     : width= 12, height=  1                                05 

   COND       set both cells into a range                                  ------------------------------------------------------------  ------------------------------------------------------------------------------------ 
     exec     call the selection                   SEL_set                  0,   10,   10,   11,   10                                  i_equal     0                                                                      
     get      review the selection                 SEL_unit              "sel_range"    , 0                                            s_equal     s_sel range      : c, ta=   0, bc=  10, br=  10, ec=  11, er=  10      
     exec     check if selection is live           SEL_islive                                                                          i_equal     1                                                                      

   COND       format them                                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the formatting                CELL_format           CHG_INPUT        , ','                                                              i_equal     0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   6, c=   5, FORMAT                               05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, format                 05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :?:                                             05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :,:                                             05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5, t=   0, c=  11, r=  10, FORMAT                 05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 :?:                                             05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 :,:                                             05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 too large                                       05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7 too large                                       05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 too large                                       05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 too large                                       05 

   COND       add decimals                                                 ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     change the formatting                CELL_decimals         CHG_INPUT        , '2'                                                              i_equal     0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   8, c=   7, DECIMALS                             05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, format                 05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :?:                                             05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :,:                                             05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5, t=   0, c=  11, r=  10, FORMAT                 05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 :?:                                             05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 :,:                                             05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6, t=   0, c=  10, r=  10, decimals               05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 :0:                                             05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 :2:                                             05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7, t=   0, c=  11, r=  10, DECIMALS               05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 :0:                                             05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 :2:                                             05 

   COND       check cells                                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   8) :+1234.56:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=n f=, d=2 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (  12) :   1,234.56 :                                05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   8) :+9876.54:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=n f=, d=2 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (  12) :   9,876.54 :                                05 

   COND       undo decimals                                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     undo                                 HIST_undo                                                                                                 i_equal     0                                                                       05 

   COND       check stack condition                                        ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      check the history stack              FILE_unit             "history"        , 0                                                                s_equal     s_file history   : n=   8, c=   5, FORMAT                               05 
     get      check entry                          FILE_unit             "entry"          , 0                                                                s_equal     s_file entry     :    0, t=   0, c=  10, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 0                                                                s_equal     s_file before    :    0 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 0                                                                s_equal     s_file after     :    0 :+1234.56:                                      05 
     get      check entry                          FILE_unit             "entry"          , 1                                                                s_equal     s_file entry     :    1, t=   0, c=  11, r=  10, change                 05 
     get      check entry                          FILE_unit             "before"         , 1                                                                s_equal     s_file before    :    1 :[<{(null)}>]:                                  05 
     get      check entry                          FILE_unit             "after"          , 1                                                                s_equal     s_file after     :    1 :+9876.54:                                      05 
     get      check entry                          FILE_unit             "entry"          , 2                                                                s_equal     s_file entry     :    2, t=   0, c=  10, r=  10, width                  05 
     get      check entry                          FILE_unit             "before"         , 2                                                                s_equal     s_file before    :    2 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 2                                                                s_equal     s_file after     :    2 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 3                                                                s_equal     s_file entry     :    3, t=   0, c=  11, r=  10, WIDTH                  05 
     get      check entry                          FILE_unit             "before"         , 3                                                                s_equal     s_file before    :    3 :8:                                             05 
     get      check entry                          FILE_unit             "after"          , 3                                                                s_equal     s_file after     :    3 :12:                                            05 
     get      check entry                          FILE_unit             "entry"          , 4                                                                s_equal     s_file entry     :    4, t=   0, c=  10, r=  10, format                 05 
     get      check entry                          FILE_unit             "before"         , 4                                                                s_equal     s_file before    :    4 :?:                                             05 
     get      check entry                          FILE_unit             "after"          , 4                                                                s_equal     s_file after     :    4 :,:                                             05 
     get      check entry                          FILE_unit             "entry"          , 5                                                                s_equal     s_file entry     :    5, t=   0, c=  11, r=  10, FORMAT                 05 
     get      check entry                          FILE_unit             "before"         , 5                                                                s_equal     s_file before    :    5 :?:                                             05 
     get      check entry                          FILE_unit             "after"          , 5                                                                s_equal     s_file after     :    5 :,:                                             05 
     get      check entry                          FILE_unit             "entry"          , 6                                                                s_equal     s_file entry     :    6, t=   0, c=  10, r=  10, decimals               05 
     get      check entry                          FILE_unit             "before"         , 6                                                                s_equal     s_file before    :    6 :0:                                             05 
     get      check entry                          FILE_unit             "after"          , 6                                                                s_equal     s_file after     :    6 :2:                                             05 
     get      check entry                          FILE_unit             "entry"          , 7                                                                s_equal     s_file entry     :    7, t=   0, c=  11, r=  10, DECIMALS               05 
     get      check entry                          FILE_unit             "before"         , 7                                                                s_equal     s_file before    :    7 :0:                                             05 
     get      check entry                          FILE_unit             "after"          , 7                                                                s_equal     s_file after     :    7 :2:                                             05 

   COND       check cells                                                  ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     get      review the cell counts               CELL__unit            "cell_count",    NULL                                                               s_equal     s_cell count     : all=   3, num=   2, fore=   2, back=   2             05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0k11"                                                           s_equal     s_celln source   : (   8) :+1234.56:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0k11"                                                           s_equal     s_celln info     : t=n f=, d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0k11"                                                           s_equal     s_celln print    : (  12) :      1,235 :                                05 
     get      check entry                          CELL__unitnew         "cell_source"    , "0l11"                                                           s_equal     s_celln source   : (   8) :+9876.54:                                    05 
     get      check entry                          CELL__unitnew         "cell_info"      , "0l11"                                                           s_equal     s_celln info     : t=n f=, d=0 a=> c=  0 r=  0 d=  0                    05 
     get      check entry                          CELL__unitnew         "cell_printable" , "0l11"                                                           s_equal     s_celln print    : (  12) :      9,877 :                                05 

   COND       clear history                                                ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     clear                                HIST_clear                                                                                                i_equal     0                                                                       05 

   COND       verify program teardown                                      ------------------------------------------------------------  --------------------  ----------  ----------------------------------------------------------------------  05 
     exec     wrap-up the program                  PROG_end                                                                                                  i_equal     0                                                                       05 





